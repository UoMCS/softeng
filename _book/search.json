[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"Welcome COMP23311: software engineering University Manchester.","code":""},{"path":"index.html","id":"better","chapter":"Welcome","heading":"0.1 Making better software","text":"development software systems challenging process. Customers expect reliable easy use software developed within set budget tight deadline. come depend upon software many aspects lives, increasing size complexity, together demanding users, means consequences failure increasingly severe. stakes today’s software engineers high!\nFigure 0.1: Course unit roadmap. twelve week course take small scale code changes (shown grey), working features (shown orange) larger-scale change (shown yellow). finish open source challenge chapter 11. skills develop course fundamental modern software engineering.\nExperience last decades taught us software development failures rarely caused small scale coding problems. Instead, failures result difficulties writing software customers actually need, keeping constantly changing requirements, coping scale large developments, getting many different people different skill sets work together, working large bodies existing code one team may fully understand. good coder important part good software engineer, many skills - including soft skills - needed .course unit, get chance expand broaden programming skills gained first year course units applying realistic context possible small scale lab, see figure 0.1. Instead coding scratch, working team make changes large open source software system, consisting thousands classes tens thousands files - without breaking existing functionality.fix bugs codebase add new features, well performing larger scale refactorings maintain improve non-functionality properties system. perform using industry strength tool set. complement hands-experience-based learning understanding core concepts underlying current notions software engineering best practice. Volunteer mentors industry (see chapter 14) help put learning context, understand key importance just good coder, good software engineer.course unit detail provides framework delivery 20/21 may subject change due additional Covid-19 impact. Please see Blackboard / course unit related emails updates.","code":""},{"path":"index.html","id":"bilo","chapter":"Welcome","heading":"0.2 Aims","text":"unit aims help students appreciate reality team-based software development industrial environment, customer needs, budget constraints delivery schedules met. hands-experience industry-strength development toolkit applied large open source software system, students gain appreciation challenges green brownfield software development, along understanding core software engineering concepts underpin current best practice. Students core skill set needed practicing software engineer, ready become productive valuable members modern software team.","code":""},{"path":"index.html","id":"learning-outcomes","chapter":"Welcome","heading":"0.2.1 Learning outcomes","text":"successful completion unit, student able :make use industry standard tools version management, issue tracking, automated build, unit testing, code quality management, code review continuous integration.write unit tests reveal bug describe new feature added system, using test-first coding approach.explain value code reviews, write constructive helpful reviews code written others.make use basic Git workflows coordinate parallel development code base maintain quality code scheduled release.explain role software patterns (design architectural) creating large code bases maintainable long term.explain code easy test easy maintain, make use test code smells identifying correcting design flaws (design testability)apply basic software refactorings maintain improve code qualityexplain challenges inherent cost estimation software development, create defensible estimates help work breakdown structures","code":""},{"path":"index.html","id":"recread","chapter":"Welcome","heading":"0.3 Recommended reading","text":"following books recommended course texts, available University Manchester library clickthrough references:Pro Git (Chacon Straub 2014)pragmatic programmer : journeyman master (Hunt Thomas 2004)Effective unit testing : guide Java developers (Koskela 2013)Clean code : handbook agile software craftsmanship (Martin Feathers 2009)clean coder : code conduct professional programmers (Martin 2011)Beginning software engineering (Stephens 2015)references cited listed chapter 25.","code":""},{"path":"index.html","id":"prereq","chapter":"Welcome","heading":"0.3.1 Requirements","text":"compulsory pre-requisites course first year programming units:COMP16321: Programming 1COMP16412: Programming 2","code":""},{"path":"index.html","id":"courseo","chapter":"Welcome","heading":"0.3.2 Overview of course","text":"following outline topics covered COMP23111.Team software developmentSoftware project planning issue trackingGreenfield vs brownfield software developmentGit best practices common Git workflowsAutomated build tools release managementAutomated unit, integration acceptance testingTest code quality test coverage toolsContinuous integration testing toolsBest practices tool support code review, including source code quality toolsDesign patterns common architectural patternsDesign testabilityRefactoring code qualitySafely migrating software functionalityBasic risk management techniquesWorking open source software systems","code":""},{"path":"index.html","id":"usingit","chapter":"Welcome","heading":"0.4 Using the lab manual","text":"expect web-based version manual one ’ll use software-eng.netlify.app. can search, browse link anything manual. last updated 04 July, 2022.However, ’d prefer, manual also available single pdf file softeng.pdf epub well softeng.epub. said , content optimised viewing web browser, pdf epub OK, web version best.","code":""},{"path":"index.html","id":"contributing","chapter":"Welcome","heading":"0.5 Contributing to this manual","text":"’d like contribute laboratory manual, welcome constructive feedback. ’re familiar git markdown can github.com/join :Raise new issues github.com/dullhunk/softeng/issues/newClick Edit page link, appears bottom right hand side every page published software-eng.netlify.app viewed reasonably large screen (phone)Contribute github.com/dullhunk/softeng/contribute help existing issues github.com/dullhunk/softeng/issuesFork repository, make changes submit pull request github.com/dullhunk/softeng/pulls. need brush-pulling skills see makeapullrequest.comFrom command line, clone repository submit pull requests setup:guidebook generated RMarkdown, ’s *.Rmd files. markdown files ones need edit everything else generated including *.html, *.tex, *.pdf *.epub files.","code":"git clone https://github.com/dullhunk/softeng.git"},{"path":"index.html","id":"teambury","chapter":"Welcome","heading":"0.6 Acknowledgements","text":"course designed, built written Suzanne Embury University Manchester support team academics, industry club members, support staff, graduate teaching assistants (GTAs) summer students including (alphabetical order):Muideen Ajagbe, Mohammed Alhamadi, Aitor Apaolaza, Gerard Capes, Martina Catizone, Sarah Clinch, Peter Crowther, Sukru Eraslan, Gareth Henshall, Duncan Hull, Caroline Jay, Nikolaos Konstantinou, Kamilla Kopec-Harding, Kaspar Matas, Chris Page, Dario Panada, Steve Pettifer, Liam Pringle, Julio Cesar Cortes Rios, Sara Padilla Romero, Viktor Schlegel, Stefan Strat, Jake Saunders, Federico Tavella, Mokanarangan Thayaparan, David Toluhi, Karl Tye Markel Vigo.Academic staff course 2021/22 include:Mercedes Argüello CasteleiroThomas CarrollSuzanne EmburyDuncan HullSandra SampaioAnas ElhagWe’d also like thank 1,500+ students done course since first iteration 2016 given us feedback improve.Thanks also industrial mentors, Institute Coding (IoC) instituteofcoding.org Office Students (OFS) ongoing support.","code":""},{"path":"index.html","id":"license","chapter":"Welcome","heading":"0.7 Licensing","text":"text lab manual published Creative Commons Attribution-NonCommercial-NoDerivs 3.0 License (CC--NC-ND) license see figure 0.2\nFigure 0.2: text guidebook published Creative Commons Attribution-NonCommercial-NoDerivs 3.0 License (CC--NC-ND) license means can copy redistribute material provided provide full attribution, use material commercial purposes make derivative works.\nlicense means can copy redistribute written material provided :provide full attribution linking directly original sourceYou use material commercial purposesYou make derivative worksSee full license (CC--NC-ND) details.","code":""},{"path":"index.html","id":"privacy","chapter":"Welcome","heading":"0.7.1 Your privacy","text":"site hosted netlify.com, see netlify privacy policy. site also uses Google Analytics understand audience better compliant General Data Protection Regulation (GDPR). want , can opt using Google Analytics Opt-Browser Add-.services use cookies. can disabled browser, see allaboutcookies.org/manage-cookiesSo now ’ve dispensed formalities, can start using laboratory manual.Document version: 04 July, 2022","code":""},{"path":"expectations.html","id":"expectations","chapter":"Expectations","heading":"Expectations","text":"studying software engineering course, part team wider community:immediate team membersThe community second year studentsYour learning community supported group graduate teaching assistants (GTAs), mentors academic staff.","code":""},{"path":"expectations.html","id":"agile","chapter":"Expectations","heading":"0.8 Expectation engineering","text":"’s important know expect ’ll get return. ’s page describes.\nFigure 0.3: legitimate reasons slacking , compiling (building) code. Falling team members, returning messages just busy things legitimate reasons letting team . Compiling (xkcd.com/303) Randall Munroe licensed CC -NC 2.5\n","code":""},{"path":"expectations.html","id":"rtfm","chapter":"Expectations","heading":"0.8.1 Our expectations of you","text":"need read messages send via GitLab, Jenkins, Microsoft Teams, Piazza forum, emails guidebook. ask help, make sure Read Friendly Manual(s). RTFM.","code":""},{"path":"expectations.html","id":"helpme","chapter":"Expectations","heading":"0.8.1.1 Getting help","text":"Regardless attending live (person) remotely (online, login Teams) mechanism getting help :live sessions (timetabled), team study workshops need use issue tracker:gitlab.cs.man.ac.uk/comp23311_2021/COMP23311-Live-Help-QueueOutside live sessions use piazza discussion board:piazza.com/class/ku382xdryxd644Please note:Team study sessions: can discuss help courseworkDuring Workshops: support workshop content , COURSEWORK questionsYou can use whatever combination OS IDE like can provide support students using Eclipse 2020-03 CSImage Virtual Machine (Linux machine Kilburn building). resources test support myriad combinations OS IDE. Sorry!","code":""},{"path":"expectations.html","id":"workshops","chapter":"Expectations","heading":"0.8.1.2 Workshops vs. Team study","text":"two main sessions:Team study sessionsWorkshopsTeam study sessions get together team work alongside . can also get help GTAs staff coursework. Every team member attending every team study session, may also need arrange meet outside scheduled sessions can collaborate together.workshop specific theme need focus . means won’t discuss coursework workshops, otherwise risk getting workshop material.","code":""},{"path":"expectations.html","id":"online","chapter":"Expectations","heading":"0.8.1.3 Physical vs online sessions","text":"live (physical) sessions ’ll need appropriate lab Kilburn building. online sessions (e.g. marking mentoring) especially important turn time computer access :working pair headphonesA working microphone can mute ’re somewhere noisyA webcam (ideally) see section 0.9Please note, may mean best place work necessarily Kilburn building. Go find quiet spot, use laptop (one) use phone (good mobile clients Teams) work home. really help least one team desktop computer.deliberately scheduled online activities aren’t immediately physical activities (like lecture) time get setup meeting starts.","code":""},{"path":"expectations.html","id":"urteam","chapter":"Expectations","heading":"0.8.2 What your team expects of you","text":"course run smoothly team expect :Turn bi-weekly team study sessions, especially marking sessionsParticipate workshopsContribute team :\nRespecting team members, bullying. Assume good faith default. ’s responsibility make team work. Team work makes dream work.\nGetting along team members. may like (’s life) team members crucial teams success. can get away “lone wolf” coder course units, (see figure 0.4), now expected behave like sociable engineer part professional team\nEncouraging people might slacking make contributions, see figure 0.3\nCommunicating team difficulty contributing\nReporting issues necessary, either GTA academic member staff\nRespecting team members, bullying. Assume good faith default. ’s responsibility make team work. Team work makes dream work.Getting along team members. may like (’s life) team members crucial teams success. can get away “lone wolf” coder course units, (see figure 0.4), now expected behave like sociable engineer part professional teamEncouraging people might slacking make contributions, see figure 0.3Communicating team difficulty contributingReporting issues necessary, either GTA academic member staff\nFigure 0.4: Normally social pack animal, wolves sometimes act alone. lone wolf course units may reasonable strategy studying, won’t work well one. Don’t lone wolf sociable teams usually make better software loners. CC--SA Image Winter wolf ForestWander.com Wikimedia Commons w.wiki/45Vj\nget return expectations team?","code":""},{"path":"expectations.html","id":"gtas","chapter":"Expectations","heading":"0.8.3 What to expect of GTAs","text":"course supported team Graduate Teaching Assistants (GTAs), help . lots people help , please treat respect. ’re waiting support GTA, make sure ’ve Read Friendly Manual, see section 0.8.1.GTAs Read Friendly Manual (GTA wiki) know help , can quickly find . won’t give answer, able help find way.⚠️ Caution ⚠️\nGTAs scheduled marking sessions expect stick . second year timetable incredibly crowded, team study sessions TIMES WEEK can guarantee everyone team available.","code":""},{"path":"expectations.html","id":"gomentors","chapter":"Expectations","heading":"0.8.4 What to expect from mentors","text":"assigned mentor meet online two one hour meetings, see chapter 13. meetings bit like code review meetings, access private code repository can see team .mentors professional software engineers, can give advice manage process making better software. please treat respect deserve. volunteered help sharing engineering wisdom taken time busy schedules .","code":""},{"path":"expectations.html","id":"academics","chapter":"Expectations","heading":"0.8.5 What you can expect from academic staff","text":"academic staff course include Suzanne Embury, Anas Elhag, Duncan Hull, Thomas Carroll Sandra Sampaio. ’re help please remember, 400+ students course can’t reply every single personal email immediately.⚠️ Caution ⚠️Please don’t email staff GTAs directly unless good reason (e.g. personal issues).Instead, please post issues forum piazza.com/class/ku382xdryxd644 everyone can see response help queue gitlab.cs.man.ac.uk/comp23311_2021/COMP23311-Live-Help-Queue within workshop / team study sessions.Like , ’re often busy teaching (research) commitments besides course. ’re ensure course runs smoothly aim give feedback coursework within two week window.","code":""},{"path":"expectations.html","id":"assessment","chapter":"Expectations","heading":"0.8.6 How your work gets assessed","text":"course :30% Written exam (January)70% Practical skills assessment (coursework)coursework broken follows10%: Individual coursework 1, see chapter 1610%: Individual coursework 2, see chapter 1740%: Team coursework 1, see chapter 1840%: Team coursework 2, see chapter 19","code":""},{"path":"expectations.html","id":"cameras","chapter":"Expectations","heading":"0.9 Your camera","text":"normally expect participants small meetings (large ones like lectures) turn cameras understand good reasons people may willing/able won’t explicitly ask .","code":""},{"path":"expectations.html","id":"on","chapter":"Expectations","heading":"0.9.1 Camera on?","text":"always question around whether turn cameras online meetings even obvious online meetings becoming norm rather exception. direct benefit using cameras small, personal meetings many us make use visual cues aid flow conversation – least ’s easier identify talking. Additionally, can help people get along – people might feel ‘listened ’ can see somebody listening team find easier remember names etc face match names .","code":""},{"path":"expectations.html","id":"off","chapter":"Expectations","heading":"0.9.2 Camera off?","text":"lots legitimate reasons might turn camera . obviously, don’t access camera. may also environment prefer others see, may anxiety around issue, connection might slow. many perfectly reasonable reasons put camera feel pressured . simply say “Sorry, can’t turn camera today” nobody ask never explicitly ask turn .","code":""},{"path":"expectations.html","id":"being","chapter":"Expectations","heading":"0.9.3 Being appropriate","text":"already treating online meetings like physical ones e.g. turning time, prepared, listening, engaging etc. Similarly, people can see ensure wearing appropriate clothes (wearing clothes absolute minimum !) appropriate place (bathroom probably appropriate) physical meeting.","code":""},{"path":"expectations.html","id":"respecting","chapter":"Expectations","heading":"0.9.4 Respecting others","text":"people decided turn cameras ask show respect recording anything without explicit permission. won’t touch legality believe basic respect enough prevent issues. take part larger meetings recording may standard cases made explicit.(Thanks Giles Reger Sarah Clinch text )Document version: 04 July, 2022","code":""},{"path":"timetabling.html","id":"timetabling","chapter":"Weekly timetable","heading":"Weekly timetable","text":"weekly schedule autumn 2021 shown table 0.1, based timetables.manchester.ac.uk, see also manchester.ac.uk/discover/key-dates key dates.introductory lecture week 1, lectures. Instead workshops like labs may contain mini-lecturesWorkshops Tuesday Friday afternoon depending lab group\nbit.ly/Tuesday-3pm-workshop\nbit.ly/Tuesday-4pm-workshop\nbit.ly/friday-1pm-workshop\nbit.ly/Tuesday-3pm-workshopbit.ly/Tuesday-4pm-workshopbit.ly/friday-1pm-workshopTeam study sessions Tuesdays 10am Thursday 11am.online activities, everything Microsoft Teams. constraints number private channels Teams, year arbitrarily split two spaces:bit.ly/software-engineering-Abit.ly/software-engineering-bMicrosoft Teams , name suggests, ’ll meet team.","code":""},{"path":"timetabling.html","id":"campus","chapter":"Weekly timetable","heading":"0.10 Where should I go if I’m on campus?","text":"teams mixture online campus students. ’re campus go rooms contact remote members team via Teams:Teams 1-30: 1.8 & 1.10Teams 31-44: LF31Teams 44-56: TootillThe weekly schedule shown 0.1.Table 0.1: weekly schedule twelve week course, please note using week numbering timetables.manchester.ac.uk week zero welcome week, week one first teaching week","code":""},{"path":"timetabling.html","id":"week1","chapter":"Weekly timetable","heading":"0.11 Automating","text":"Events week starting 27th September:Team Study Tuesday: Work individual coursework 1 described chapter 16One lecture introduce course unit 9am Wednesday 29th September, Simon Engineering building check timetables.manchester.ac.ukWorkshop: Automated build test Duncan HullTeam Study Thursday Work individual coursework 1 described chapter 16Coursework deadlines: Individual individual coursework 1 can pre-marked (automatically) submit 6pm Tuesday 28th September finally marked submitted 6pm Friday 1st October","code":""},{"path":"timetabling.html","id":"week2","chapter":"Weekly timetable","heading":"0.12 Reading","text":"Events week starting 4th October:Team Study Tuesday: Individual coursework 2 starts, see chapter 17. Meet team TeamsWorkshop: Reading large code bases Anas ElhagTeam Study Thursday Working coursework","code":""},{"path":"timetabling.html","id":"week3","chapter":"Weekly timetable","heading":"0.13 Debugging","text":"Events week starting 11th October:Team Study Tuesday: Working team courseworkWorkshop: Debugging codebases Anas ElhagTeam Study Thursday Working team courseworkCoursework deadlines: Individual individual coursework 2 can pre-marked (automatically) submit 6pm Tuesday 13th October finally marked submitted 6pm Friday 15th October","code":""},{"path":"timetabling.html","id":"week4","chapter":"Weekly timetable","heading":"0.14 Estimating","text":"Events week starting 18th October:Team Study Tuesday: Working team courseworkWorkshop: Cost estimation Duncan HullTeam Study Thursday Meet team mentor Teams","code":""},{"path":"timetabling.html","id":"week5","chapter":"Weekly timetable","heading":"0.15 Testing","text":"Events week starting 25th October:Team Study Tuesday: Working team courseworkWorkshop: Test first development Anas ElhagTeam Study Thursday Working team courseworkCoursework deadlines: TeamCwk1 due, 29th October 6pm","code":""},{"path":"timetabling.html","id":"week6","chapter":"Weekly timetable","heading":"0.16 Pausing","text":"Events week starting 1st November (reading week). Take break ’re ahead, catchup ’ve fallen behind.activities reading week","code":""},{"path":"timetabling.html","id":"week7","chapter":"Weekly timetable","heading":"0.17 Workflowing","text":"Events week starting 8th November:Team Study Tuesday: Marking interviews part 1 3, see 0.23Workshop: Git workflows Suzanne EmburyTeam Study Thursday Marking interviews part 2 3, see 0.23","code":""},{"path":"timetabling.html","id":"week8","chapter":"Weekly timetable","heading":"0.18 Refactoring","text":"Events week starting 15th November:Team Study Tuesday: Marking interviews part 3 3, see 0.23Workshop: Refactoring Anas ElhagTeam Study Thursday Second mentoring session","code":""},{"path":"timetabling.html","id":"week9","chapter":"Weekly timetable","heading":"0.19 Testing","text":"Events week starting 22nd November:Team Study Tuesday: Working team courseworkWorkshop: Design testability Anas ElhagTeam Study Thursday Working team coursework","code":""},{"path":"timetabling.html","id":"week10","chapter":"Weekly timetable","heading":"0.20 Patterning","text":"Events week starting 29th November:Team Study Tuesday: Working team courseworkWorkshop: Design patterns Sandra SampaioTeam Study Thursday Working team courseworkCoursework deadlines: TeamCwk2 due, Friday 3rd December 6pm","code":""},{"path":"timetabling.html","id":"week11","chapter":"Weekly timetable","heading":"0.21 Managing","text":"Events week starting 6th December:Team Study Tuesday: Marking sessionsWorkshop: Risk management practice exam Sandra SampaioTeam Study Thursday Marking sessions","code":""},{"path":"timetabling.html","id":"week12","chapter":"Weekly timetable","heading":"0.22 Challenging","text":"Events week starting 13th December:Team Study Tuesday: Marking sessionsWorkshop: Open source challenge Sandra SampaioTeam Study ThursdayCoursework deadlines:","code":""},{"path":"timetabling.html","id":"mint","chapter":"Weekly timetable","heading":"0.23 Marking interview schedule","text":"schedule marking interviews team coursework 2 shown :","code":""},{"path":"timetabling.html","id":"tooling","chapter":"Weekly timetable","heading":"0.24 Tools","text":"’ll using following tools:","code":""},{"path":"timetabling.html","id":"msfteams","chapter":"Weekly timetable","heading":"0.24.1 Microsoft Teams","text":"Team study sessions take place Microsoft Teams, login using @student.manchester.ac.uk email address teams.microsoft.com download native teams client everthing else guidebook software-eng.netlify.app/Teams also place go livestream ’re following workshops online","code":""},{"path":"timetabling.html","id":"blackboard","chapter":"Weekly timetable","heading":"0.24.2 Blackboard","text":"course materials (slides videos) can found online.manchester.ac.uk","code":""},{"path":"timetabling.html","id":"gitlab","chapter":"Weekly timetable","heading":"0.24.3 GitLab","text":"GitLab issue tracker gitlab.cs.man.ac.ukDocument version: 04 July, 2022","code":""},{"path":"building.html","id":"building","chapter":"1 Building and testing","heading":"1 Building and testing","text":"","code":""},{"path":"building.html","id":"Introduction","chapter":"1 Building and testing","heading":"1.1 Introduction","text":"workshop, building testing system called Marauroa. look essential processes working existing team-developed software system. ’ll assuming , workshop, capable carrying following tasks , without needing much guidance:Acquire right version source code work.Create executable version source code using automated build tool.Test system, prior making changes.Use test suite find functional regression system.Run piece software consisting multiple distributed subsystems., later workshops, ’ll working code Marauroa games engine constructing -line multi-player games.Marauroa open source framework engine develop games. provides simple way creating games portable robust server architecture. Marauroa manages client server communication provides object orientated view world game developers. handles database access transparent way store player accounts, character progress state world.already begun practice skills, GitLab Access Check activity.\nworkshop, build activity carry basic skills large open source software system. workshop, :Use IDE clone local copy Marauroa repository.Build executable versions client server components, using Ant build tool.Run test suite provided MarauroaUse code coverage tool assess strength test suite.See test suite can help us pinpoint errors code.may work pace, try complete step 4 end workshop can. need finish exercise time don’t manage workshop, ’ll need use techniques team coursework. --speed , slow team .","code":""},{"path":"building.html","id":"acquiring","chapter":"1 Building and testing","heading":"1.2 Acquiring Marauroa","text":"First, ’ll need acquiring local copy Marauroa Project.","code":""},{"path":"building.html","id":"runide","chapter":"1 Building and testing","heading":"1.2.1 Run the IDE","text":"Department provides range Integrated Development Environments (IDEs) use students. welcome use IDEs carry work workshop. However, able provide technical support Eclipse, specifically 2020-03. want use one IDEs, best help get stuck, can’t guarantee able fix problems. bare minimum, feel confident can tasks listed introduction chosen IDE, finalise decision.instructions follow assume using 2020-03 Department Computer Science Linux image Linux Mint VM provided Department.can start Eclipse Applications menu (Programming) command line, issuing command:","code":"/opt/eclipse-2020-03/eclipse &"},{"path":"building.html","id":"selectw","chapter":"1 Building and testing","heading":"1.2.2 Select the Workspace","text":"Eclipse calls folder containing one Eclipse projects workspace. start-, Eclipse ask workspace want use session. can either accept default location use File Browser locate create different one. (Depending workshop, may already created workspace GitLab Access Check activity. can either choose use workspace activity, create new one.choose create new workspace, Eclipse show Welcome View loads. Uncheck box bottom right window (labelled Always show Welcome start ) close , need view workshop. (can get back whenever want selecting Welcome option Help menu.)","code":""},{"path":"building.html","id":"organisew","chapter":"1 Building and testing","heading":"1.2.3 Organise Workspace","text":"’ll need organise main Eclipse workspace window now see window looks something like figure 1.1.\nFigure 1.1: main eclipse window look something like \nused workspace created individual coursework exercises, ’ll see project Package Explorer view. used new workspace, empty like one shown .standard layout working Java projects. central empty space use various Eclipse editor tools views work individual files. empty moment, working specific file. Around number views. ’ll talk main ones tell us later.find screen rather cluttered, immediately delete views don’t need regularly, free space ones , move views use convenient locations. might want . can experiment moving views around clicking dragging tabs. Delete views don’t think ’ll need, make sure keep Package Explorer view, Outline view Problems view open, ’ll making use soon.Note can always get views delete back , using Window > Show View menu option.","code":""},{"path":"building.html","id":"newproj","chapter":"1 Building and testing","heading":"1.2.4 Create a New Project by Cloning","text":"Next, ’re going pull (git clone) public Marauroa source code local repository can work . ’ve already experience working Git command line. course unit, ask use IDE (least) basic interactions Git GitLab. help understand strengths weaknesses approaches, already familiar .first step ask Eclipse import Marauroa project us, public Git repository.Select File > Import menu option. choose Git > ImportFromGit shown figure 1.2\nFigure 1.2: main eclipse window look something like \ncan either double-click Projects Git, single-click press Next.dialogue box appears showing two ways can import project Git. ’re going clone project URI, select option shown figure 1.3\nFigure 1.3: main eclipse window look something like \nNext, need tell Eclipse URI clone . team behind Marauroa set Git server, ’ll connect anonymously. Enter following URI field:Eclipse fill rest fields automatically. doesn’t, ’s likely something went wrong copying link PDF: try typing instead. Check dialogue looks like figure 1.4 proceeding.\nFigure 1.4: Import Projects Git dialogue box look like \neverything looks okay select Next.Clone Attempt Fail Error?, Arianne project Git server may temporarily . can’t clone using URI given , can try using GitHub repository URI instead:Eclipse now communicate remote Git repository specified URI. ask us branches want work locally, , branches want create local remote tracking branches . Note asking us commits want include clone. standard Git clone always include commits cloned repository, regardless branches select . asking us remote branches want repository. , standard Git clone include remote branches default. question Eclipse asking applies question tracking branches created clone.’re going making serious changes Marauroa code base workshop, just ask remote tracking branch created master branch repository, see figure 1.5. need remind branching works, might like visit (revisit) learngitbranching.js.org.\nFigure 1.5: Take look list branches contained project, scrolling list. ’ll see Marauroa project uses separate branches describe specific releases, well development branches. Another common approach single release branch use tags distinguish specific releases branch.\nMake sure master branch selected, press Next.⚠️ Caution ⚠️\nMaster Main?Historically, default name initial branch git repository master. initial branch called “master repository” copies serving “slave repositories”.Note 2021, use master now deprecated. ’re using course unit, default, new projects using git call initial branch main master avoid problemantic master/slave terminology.See .gitlab.com/blog/2021/03/10/new-git-default-branch-name/ details switch.GitLab Access Check activity, need tell Eclipse want cloned repository stored can issue Git command create see figure 1.6\nFigure 1.6: Cloning git dialog box\ncan use default location suggested, can use Browse button use file selector create new directory different location. , ’ve followed standard convention putting repository inside personal git folder.selected preferred location, select Next.Eclipse now issues commands clone project.next step import Marauroa project local Git repository Eclipse, can start work .project context?One confusing things IDEs first start use notion project. code command line, tend organise work directories. Sometimes directories relate specific tasks carrying (like coding solution lab exercise) sometimes relate structure code creating (like different directories source code object code, libraries documentation).use directories purposes code IDE well, order able support us well, IDE needs know root directory piece software building. way, can perform useful tasks us, like automatically setting classpath us, automatically compiling code reporting errors type. root directory typically referred project. IDEs use concept project means recording metadata project. example, Eclipse remember specific project Java project, know apply set tools appropriate Java projects, (example) tools relating Ruby Python.GitLab Access Check activity, tell Eclipse wizard use import project us. Since Marauroa team uses Eclipse, can use wizard looks existing Eclipse projects repository, see figure 1.7 loading project built another IDE, need use one wizards.\nFigure 1.7: Cloning git dialog box\nClick Next correct wizard chosen.Eclipse now scan local Git repository looking anything recognises Eclipse project. looks folders, searching metadata files Eclipse creates stores root directory project. case, finds just one (called newmarauroa) see figure 1.8\nFigure 1.8: Import projects git repository newmarauroa project\nSince just one project repository, easy decision . Click newmarauroa project select , click Finish (finally!).Eclipse can now import project workspace. done, ’ll taken back main Eclipse work screen (strictly speaking, ’re taken back Eclipse calls ‘Java Perspective’). see project appeared Package Explorer view, Problems view now populated information see figure 1.9\nFigure 1.9: Import projects git repository newmarauroa project\n","code":"git://git.code.sf.net/p/arianne/marauroahttps://github.com/arianne/marauroa.git"},{"path":"building.html","id":"checkout-a-specific-commit","chapter":"1 Building and testing","heading":"1.2.5 Checkout a Specific Commit","text":"Although asked master branch checked locally cloned repository, actually going working different commit, one pointed master. partly make sure everyone workshop uses commit exercise, even master gets updated creation notes running workshops. also give confidence working non-head commits (, commits pointed branch tag).activity, going work commit short SHA f30e098.easiest way check commit, branch tag within Eclipse use History View. open , right click newmarauroa project name Package Explorer view. Select Team > Show History menu appears. History View shown figure 1.10, now visible bottom panel Eclipse window. may wish double click view tab expand , contents easily seen.\nFigure 1.10: view, now see recent part network Marauroa project repository. can scroll see full commit log. can see, history significantly complex simple repository looked GitLab Access Check. Marauroa development since 2003, history reflects age. Note view repository may little different shown screen shot. working live repository, new commits made regular basis.\nLook commit SHA f30e098. (terribly helpful) commit message code cleanup. Right click , select Checkout menu appears.point, Eclipse warn detached HEAD state shown figure 1.11\nFigure 1.11: warning detached HEAD state reads: “detached HEAD state. means don’t local branch checked . can look around ’s recommended commit changes. reason commits branch visible checking another branch.”\njust means checked commit pointed current branch tag. HEAD Git currently checked commit. Eclipse (Git) warning us changes make commit point also pointed branch tag (unless create one specifically). fact, unreachable branch tag, treated Git deleted. scheduled garbage collection, next time takes place. ’re going commit changes exercise, don’t care whether HEAD commit detached . can safely ignore warning now.Checkout Detached HeadsIf ’re interested learn checking detached head, read article: ’s “detached HEAD” Git FAQPress OK double-click History View tab, shrink view back original size location, now finished working .","code":""},{"path":"building.html","id":"explore","chapter":"1 Building and testing","heading":"1.2.6 Explore your Project","text":"now copy Marauroa project source play look around little. Take minutes look around explore inside moving next step. Look way contents project organised folders. Can guess contents folder name?Explore around folders. Can find Java class files? clues use track ?Notice icon Eclipse placed next project name. Quite lot information packed small symbol. folder symbol indicates project. small J just indicates Java project. small orange drum J indicates project version control. Eclipse also tells us name Git repository project stored , branch commit project current checked , text following project name: [marauroa f30e098] (similar). Finally, small yellow road sign exclamation mark middle tells us Eclipse used internal builder Java code project, encountered compiler warnings.might surprised see Marauroa team released code produces compiler warnings. Let’s take look warnings , using Problems view. ’ll notice view already populated information project, without us ask generated. IDEs commonly provide services like , performing key analyses project source letting know problems without explicitly request . , introduced compilation error, want know soon happens, much later finally remember ask Eclipse compile code.Marauroa team configured project Java project, Eclipse already knows find Java source files, uses internal Java build tool compile . fact, recompile every time make even small change code, well import new code. Problems view, can see automatic compilation produced compiler errors (good!) 158 compiler warnings (eek!).time, can take minutes explore compiler warnings generated, clicking small triangle beside warn Warnings Problem view. Take look see think serious problems whether Marauroa creators making reasonable decision fix .STEP 1 4 COMPLETEDYou’ve now completed first step, code base explore. , beginning. Please proceed next step, ’ll look use automated build scripts provided Marauroa team build executable version Marauroa engine.","code":""},{"path":"building.html","id":"building-the-marauroa-engine","chapter":"1 Building and testing","heading":"1.3 Building the Marauroa Engine","text":"going make changes existing body code, able create executable version . point making changes source code can’t actually run new version code.step, ’re going introduced Apache Ant automated build tool, tool chosen Marauroa team use project. ’ll learn use create executable code source ’ve just downloaded.Note: cover full tutorial use Ant tool workshop — indeed workshop follow semester. One key skills need working large existing software systems ability keep moving forward even don’t much clue going . accept never know everything know tools used system, source code system, aspect system.purposes today, just need know run Ant script create executable project. ’ll take look build script, get idea works, lot ignore skip briefly. Becoming comfortable approach one skills need develop course semester. (Many already possess skill, course!)","code":""},{"path":"building.html","id":"locate-and-examine-the-build-script","chapter":"1 Building and testing","heading":"1.3.1 Locate and Examine the Build Script","text":"Open newmarauroa project Package Explorer (already done ), scroll see file called build.xml. default name Ant build scripts. Double click , get Eclipse load file Editor view, can see contents shown figure 1.12\nFigure 1.12: XML build file\nfilename wasn’t already enough clue, ’ll see Ant build scripts XML files. XML tags used define things file knows build, steps involved building , well key configuration information, class paths (show screen shot ).Notice Outline view also now populated. useful view gives high-level summary contents file, listing main components tree view. case Java file, Outline view shows classes defined file, members (fields methods). case XML files, like build file, Outline view shows hierarchy tags defined files.can use Outline view run Ant builds, right clicking XML tags represent descriptions build things. even useful view Ant View. view created knowledge Ant build tool works, added Eclipse plugin. Open selecting Window > Show View > Ant top level menus.Now open build.xml view clicking Add Buildfiles icon view toolbar. looks like ant green plus left shown figure 1.13\nFigure 1.13: XML build file\nopen new dialogue allows select Buildfile. Select build.xml click OK shown figure 1.14\nFigure 1.14: Buildfile Selection\nNotice Ant view populated. Instead listing top-level XML tags, view knows just list build targets. things Ant script knows build. user script can request target wishes build.Scan targets see can guess name one builds. Hint: dist stands distribution.Let’s take look definitions targets. Right click name targets, select Open > Ant Editor context menu appears. see contents build.xml editor window changed, definition target clicked displayed. example, figure 1.15, ’ve clicked look jar-target take look.\nFigure 1.15: jar-target\ncan get rough idea definition telling us. First, note depends attribute target tag. states can build jar file project, must built compile target. makes sense need compiled Java code can create Jar file.dependencies targets one key strengths build tools Ant. can describe individual steps build process, state steps depend . build time, Ant examine targets dependencies find order execution means target built targets depends .’s important note, , don’t need understand everything Ant build file able make educated guesses . don’t need detailed understanding just now. just looking easy--absorb clues various targets .Note Automated BuildAt point, might wondering bothering complicated build script Eclipse internal Java builder already seems good job compiling Java classes us, without us needing anything .answer typically turning source code non-trivial system deployable software just compiling Java code. Eclipse internal builder creates class files Java files. last time downloaded app application got folder full class files?Quite deployment means differs application application. Simple Java applications may simply wrapped jar file, even often need supply shell script setting class path executing main method entry point class. building Web application deployment typically means packaging components application *.war file (web archive file) copying particular directory (one used container manager web server provides). , might need prepare zip archive files, package files ready use install tool.examples show, steps needed deploy system often simple, also quite fiddly fussy. One wrong key stroke end something unusable. Explicitly documenting deployment steps automated build script make deployment process quick, easy reliable anyone development team carry , even newest team member. important, means tests can run deployable form system (even , point, deployed live environment). seen, closer test environment can live environment, chance ’ll find errors reach customer rather afterwards.","code":""},{"path":"building.html","id":"buildscript","chapter":"1 Building and testing","heading":"1.3.2 Build the System Using the Build Script","text":"Now seen something build script, going use build whole Marauroa distribution. , going ask Ant build “dist” target.Right click target want build select RunAs menu. ’ll see IDE recognises file clicked Ant Build target offers option running Ant build.Note: can build target Outline view Ant view waySelect first two Ant Build options. second takes wizard, don’t need stage.Console tab appear (figure 1.16) bottom section Eclipse window, showing output Ant sending standard output standard error streams works. Double click tab Console view, take look Ant .\nFigure 1.16: Console output\nconsole output shows various targets Ant creates, works dependencies specified build script. targets shown left window, followed colon (init compile, screenshot).Beneath target, names tasks invoked shown, square brackets.important part output, course, shown end, process finishes:\nFigure 1.17: Console output\ncan see build successful. built executable version code, just right clicking target! Building Marauroa lot work carry steps , manually, every time code changes, chances getting step wrong much higher. shows one strengths automated build tools. Marauroa team encapsulated expertise building games engine build script file. now becomes possible anyone, without expertise Ant, Marauroa, build system way.words, build tool made build process repeatable. source potential error working code (deploying user) removed.Take moment look full console output build command just run. Look actions build script taking vital creating deployable product, compiling individual class files.","code":""},{"path":"building.html","id":"examining","chapter":"1 Building and testing","heading":"1.3.3 Examining the Results of the Build","text":"’ll finish step taking brief look build process achieved.Right click newmarauroa project name select Refresh drop-menu. Eclipse know file changes make using Eclipse tools (Java editor internal Java builder) can update view project see GUI automatically . Ant part Eclipse. separate tool Eclipse running us. Ant script creates new files folders, moves things , Eclipse doesn’t know anything , view project shows us can get date. Refresh menu option tells Eclipse go look directory structure files project directory, update GUI show effects changes.refresh, several new folders appear: build, build-archive, dist javadocs.Take moments look contents folders, see can form hypotheses role deployment process. going share Marauroa engine just built friend, need ?STEP 2 4 COMPLETEDYou now completed build step process. Now need find whether engine built expect . Next, learn run automated test suite Marauroa team created.","code":""},{"path":"building.html","id":"testing-the-marauroa-engine","chapter":"1 Building and testing","heading":"1.4 Testing the Marauroa Engine","text":"created executable version system, next step check whether working correctly. part activity, ’ll take process running automated test suites created Marauroa team. saw one way run JUnit tests Eclipse GitLab Access Check activity. just one test class just test methods worry . Marauroa test suite much larger , need different approach.’ll take first look suites organised implemented step, though topic ’ll coming back future workshops, .","code":""},{"path":"building.html","id":"finding-out-what-tests-there-are-to-run","chapter":"1 Building and testing","heading":"1.4.1 Finding Out What Tests There Are to Run","text":"run tests, helpful first take high level look test suites provided developers system working . One way look source folders project. source code large project, nowadays, typically split two halves: production code (part user use customer pay ) test code (part development team use work whether delivering right thing). ’s important get two parts code mixed , therefore common practice split test code folders (sometimes packages).Another source useful information test suites Ant build script. Although called build script, seen scripts lot just compiling code. task just create executable version system, create verified executable ready user take away use. Therefore, scripts normally follow three step process:buildtestdeployThe Marauroa build script unusual target produces distribution doesn’t also run tests. (build script) contain instructions running test suites.Take look targets build script. can see one called test. sounds promising. Let’s take look figure 1.18\nFigure 1.18: can see target dependent another target, called compile-tests. makes sense expect compile test (production) code can run tests.\nLet’s take quick look target look rest test target shown figure 1.19\nFigure 1.19: Testing targets\ntarget figure 1.19 depends compile target. words, Marauroa team saying want compile test code, first compile production code tests (makes sense, test code make use lots classes methods production code).description compile-tests target, can see two calls javac, couple file copy commands. javac commands compiling code folder specified $\\{src-test\\} property functional_tests folder.string form \\$\\{something\\} Ant script reference value property called something. can defined Ant script (using property tag), src-test property value set build.ant.properties file, build script imports. look file, can see property set path tests folder., can see small section build file (without bothering look ) two kinds test Marauroa system: functional tests another kind test. fairly safe bet kind test unit tests.Forgotten unit tests functional tests ?covered COMP16412. Unit tests short snappy tests (strictly speaking) just test behaviour single code unit. Java, normally think individual classes units unit testing. Functional tests tests major functions system offers, typically involve execution many classes working together.practice, ’s quite hard write true unit tests, many tests test folder fact integration tests, .e., tests assess behaviour small number units, working together.Now understand something happening dependent tasks, can go back tests target. body contains couple tasks appear calling tool called jacoco.JaCoCo test coverage tool. ’ll look detail later activity, now need know tool runs tests, works proportion production code statements executed tests.can also see call junit Ant task embedded jacoco task definition. must tests actually run. run inside jacoco:coverage task, suggesting JaCoCo collecting coverage information JUnit running test suite.target called jacoco:report. name suggests job taking coverage logs gathered running tests, producing coverage report information.","code":""},{"path":"building.html","id":"run-the-tests","chapter":"1 Building and testing","heading":"1.4.2 Run the Tests","text":"Now know little happening inside test-related targets, ’ll run . Just dist target building code, ’re going right click test target, select Run > Ant Build.Please try now., see log Ant appearing Console view.(Note time, compile target predecessor targets run seem nothing. Ant knows production code source hasn’t changed since targets last built. , point wasting time recompiling , can just use object files created last time.)build succeed , indicating tests pass successfully.","code":""},{"path":"building.html","id":"examining-the-test-results","chapter":"1 Building and testing","heading":"1.4.3 Examining the Test Results","text":"’s useful find details results running test suite, summary output get console build helpful. need better way get details results running test suite. results stored?Line 37 build.ant.properties file tells us build-test-reports build/testreport folder. ’ll need refresh project allow Eclipse show us new folders files, right click project name Package Explorer View select Refresh.now able examine contents build/testreport folder shown figure 1.20\nFigure 1.20: testreport\nicon next test result files tells us JUnit test results, suffix tells us XML files. can double-click XML files, Eclipse open special JUnit viewer. example, select file:TEST-marauroa.clientconnect.ClientConnectTest.xmlyou’ll see JUnit view shown figure 1.21.\nFigure 1.21: JUnit view\ncan see four test cases class:clientconnectTestcreateCharacterTestjoinGamewrongPwTestAll shown small green tick next , indicating passed. numbers brackets test name indicate execution time test. (can see running fraction second, need tests kind, expect running regularly developer - every small code change, fact.)green bar top JUnit view also indicates tests test class passed.can double click tests find . Try first test: clientconnectTest. see source test case, loaded Editor view shown figure 1.22\nFigure 1.22: Editor view\ncan see test 1.22 short, quite descriptive. typical unit test code. also notice first time looked Java code exploration Marauroa system. Test cases make great starting point understanding unfamiliar code base , shall see another COMP23311 workshop.time, can explore test results, test cases associated . Try get bogged details, though. ’re just trying get overview system , rather drilling details one feature.","code":""},{"path":"building.html","id":"examining-the-test-coverage-results","chapter":"1 Building and testing","heading":"1.4.4 Examining the Test Coverage Results","text":"can now see results JUnit tests. code coverage results produced JaCoCo? get see ? results stored two places: file called build/jacoco.exec another called build/coveragereport/jacoco.xml.⚠️ IMPORTANT NOTE ⚠️\nDon’t try open jacoco.xml file Eclipse! huge Eclipse spend lot time trying (probably failing) grab enough memory . want see contains, use lightweight text editor command like head -c command line.’s clear use Marauroa team make results, normally prefer results code coverage human-friendly format giant XML file. Jacoco provides facility create report web page, well XML form. , ’re going modify build.xml file, create useful form us.need add one extra line test target build file, just line 320:Note parameter destdir, destfile, like line follows. Figure 1.23 shows edited build file look, new line highlighted.\nFigure 1.23: JUnit view\nline add highlighted editor window figure 1.23. added saved file (Control-S keyboard short cut, can click small floppy disk tool bar), run Ant test target . completes, refresh project pull extra report files asked JaCoCo create.Expand build/coveragereport folder. see lots extra folders inside , names look like Java packages. also find file called index.html towards bottom. root file HTML report JaCoCo created us.Eclipse Web browser plug-can use look report (double-clicking index.html file). plug-pretty buggy previous releases. find case Eclipse 2020-03 , can open preferred Web browser look files . (’ll need use file browser locate file file space. Searching directory called coveragereport quick way .)\nFigure 1.24: test report\nreport figure 1.24 shows, package, degree test suite exercised source code. now, ’ll just focus first four result columns. second package, marauroa.common.game, can see report test suite executed 68% instructions package. (instruction, , single Java byte code instruction.) , 32% (around third) executed test suite. bugs instructions covered test suite caught .next two columns show many “branches” code covered test suite. “branch” context means conditional point code, execution follow one two paths based value condition. JaCoCo currently computes branch coverage switch statements, though theoretically loops also introduce branches code. like test suite exercise exits branches. , -statement, like test suite execute -statement true condition (-body executed) false condition (else-body executed). columns assess far test suite met goal. case example, just 60% branches package exercised test.Aside: Coverage InstrumentationCode coverage tools like JaCoCo need find source code statements executed test (suite tests) run. typically “instrumenting” code. , convert code system every statement accompanied second statement logs occurrence first statement file somewhere. example, code fragment:converted :(Obviously, simplified picture actually going .) instrumented code run, well executing main code, log gradually built statements executed .can drill clicking package names see code coverage reports class. click classes, ’ll get breakdown coverage per method. can even get reports coverage individual lines code (clicking methods coverage report). example, figure 1.25 shows detailed coverage report method marauroa.common.game.RPObject.size().\nFigure 1.25: detailed coverage report\nfigure 1.25 green lines executed test suite. can see beginning method covered well tests. early instructions executed, two -statements executed true false condition different test cases.Towards end method, coverage looks less good. yellow colouring statement line 1408 indicates one two exits exercised test case. Since body -statement coloured red, seems code executed scenarios links variable set null. can also see exception handling code tested.Hopefully, now obvious useful kind tool . see important complex parts code covered test suite, can write test cases explicitly target missed branches instructions (using white-box testing design techniques). way, can gradually build test suite covers important cases, wasting time covering parts code seldom executed little importance.STEP 3 4 COMPLETEDYou now run test suite Marauroa engine, begun process understanding works. ’ll coming back look tests detail future workshop. now, ’re going spend whatever left workshop looking test suite can help us detect bugs introduced code.","code":"<html destdir=\"${build-coverage}\" />int x = Math.random();\nSystem.out.println(x);int x = Math.random();\ncoverage_log(\"int x = Math.random();\");\nSystem.out.println(x);\ncoverage_log(\"System.out.println(x);\");"},{"path":"building.html","id":"using-the-test-suite-to-find-bugs","chapter":"1 Building and testing","heading":"1.4.5 Using the Test Suite to Find Bugs","text":"’re going end workshop making quick experiment show power kind automated test suite. ’re going make change code, ’ll see tests can indicate something broken. example, let’s make small change method:First, need get source method loaded Editor view. can expanding src folder tree Package Explorer, using Search facility main menu bar. (File search easiest use, Java search sensible way run search, .)Double click class method load Editor window. can use Outline View locate method quickly class loaded Editor. Now can make change. Comment line 649, shown figure 1.26\nFigure 1.26: detailed coverage report\nSave file run build test target.time, see failed build like one shown figure 1.27. one () tests failed, change introduced. failing test(s) caused process executing test suite come full stop. Marauroa build script tells JUnit stop soon failing test encountered.\nFigure 1.27: detailed coverage report\nsituations useful (leaves details failing test clearly visible console window), situations want see results whole test suite, whether failures . words, want build process carry despite failing tests.allow , open build.xml file, go line 292. line, change values haltonerror haltonfailure parameters false. run tests , Ant View. now see much larger number test results scrolling Console View.run test build target . see output similar figure 1.28.\nFigure 1.28: Tests FAILED\nNotice important line bottom red. One tests failed. see details, open JUnit results file:Double click names test cases failed JUnit View. see test class automatically loaded Editor window, cursor placed assertion failed.shows error introduced case spotted tests.may thinking point must spent ages looking line code comment cause test fail. fact, line first one tried — honest! cheat little bit, made sure look line change code well covered test suite. ’d made change code less well covered, ’d probably look harder find change tests spot.Aside: Writing Tests Trap BugsYou may notice name test failed contains word “bug”. Even fairly comprehensive test suite, still possible bugs slip . happens, good practice write new test fails due bug. , test describes correct behaviour system , failure tells developers bug still system. , developer thinks fixed bug, can run bug test find whether .bug fixed, test wrote make visible can enter normal pool tests run regularly system. way, future code change causes bug reappear, ’ll test catch .whatever time left, try making changes code. Run tests, see able detect error introduced. Try making changes code well covered tests code less well covered. test suite ?won’t try long start want better way looking test results scanning build output console. usual set build script creates summary report test results project, can see glance tests failing. Marauroa team done (perhaps prefer look test results continuous integration test system—look tools, use coursework, later course unit).want get summary test failures, can add following target end build script (closing “project” tab):’ll now see new target appearing Ant View build.xml file. Run target generate summary report test reports folder. built, file look : build/testreport/summary/index.html.injected bugs test suite catches, challenge colleagues see can use information provided failed tests work line changed. (Don’t forget make note class file line changed.)STEP 4 4 COMPLETEDAll done activity nowhere go?raced , still time left workshop, try run code built far. Marauroa game engine rather game . provides functionality used software (game), run , isn’t much see. need game sort run, can see engine work.Marauroa team provide tutorial describing use Marauroa create simple “chat” game using engine, allow us run engine built. Head Marauroa wiki follow tutorial instructions want try (’s optional exercise, important coursework remainder workshops). short, just involves creation 5 classes total. code classes provided, couple tricky elements making fit together Eclipse.start making new Java project Eclipse, lib folder (ordinary folder, source folder). Import Marauroa jar file built previous steps directory, add build path project. done right clicking imported jar, selecting Build Path > Add Build Path. can add files tutorial src folder.’ll need add couple libraries lib folder progress. can imported/copied newmarauroa project.ready run, ’ll need create new Run Configuration. drop menu associated small green circle white triangle task bar (.e. run button) take screen .hesitate ask stuck!Document version: 04 July, 2022","code":"marauroa.common.game.RPSlot.setDeletedRPObject()build/testreport/TEST-marauroa.common.game.RPObjectDelta2Test.xml    <target name=\"all-tests-report\" depends=\"test\">\n        <property name=\"test-summary-report\" value=\"${build-tests-report}/summary\"/>\n        <mkdir dir=\"${test-summary-report}\"/>\n        <junitreport todir=\"${test-summary-report}\">\n            <fileset dir=\"${build-tests-report}\">\n                <include name=\"TEST-*.xml\"/>\n            <\/fileset>\n            <report format=\"frames\" todir=\"${test-summary-report}\"/>\n        <\/junitreport>\n    <\/target>"},{"path":"understanding.html","id":"understanding","chapter":"2 Large systems","heading":"2 Large systems","text":"summer internship, year-long placement leave University, chances work LARGE software systems. crucial able understand large software systems. need develop strategies working unfamiliar large codebases. codebase ’re working probably much larger things ’ve worked previously, though relatively small compared larger well known software projects, see figure 2.1.\nFigure 2.1: Like telescopes, software projects can get quite large, ’ll need develop strategies working large codebases. Telescope Names (xkcd.com/1294) Randall Munroe licensed CC -NC 2.5\n","code":""},{"path":"understanding.html","id":"purposes","chapter":"2 Large systems","heading":"2.1 Purposes of the workshop","text":"workshop, look strategies better comprehend unfamiliar large codebases. strategies supported code reading techniques (Spinellis 2003) functionalities offered Integrated Development Environment (IDE). ’ll assuming , workshop, capable carrying following tasks , without needing much guidance:Navigate large codebases using effective strategy comprehending code.Use views functionalities provided Eclipse IDE acquire better understanding code.Read write unit tests understand codebase.workshop, :Use Eclipse explore codebase Marauroa.Use functionalities Eclipse carry top-reading strategies.Build simple calculator remove fear unit testing.Write unit tests understand different components Marauroa.","code":""},{"path":"understanding.html","id":"largecode","chapter":"2 Large systems","heading":"2.2 Learning Large Codebases","text":"","code":""},{"path":"understanding.html","id":"timesink","chapter":"2 Large systems","heading":"2.2.1 What activity takes most of a maintenance programmer’s time?","text":"work large unfamiliar codebase common challenge face points career. Hence, developing required skills deal challenge imperative. course unit far, already faced challenge (twice!).Large codebases keep changing time. Normally, handful people working project time. Hence, ’s difficult anyone claim full knowledge parts codebase. really matters learn build mental model large codebase helps navigate find way around large codebase trying work whenever need.\nFigure 2.2: marauroa large codbase, can find way around ?\n","code":""},{"path":"understanding.html","id":"tips","chapter":"2 Large systems","heading":"2.2.1.1 Tips for learning large codebases","text":"can challenging finding way around large codebase new . strategies can apply:","code":""},{"path":"understanding.html","id":"tip1","chapter":"2 Large systems","heading":"2.2.1.1.1 Tip 1: Develop general knowledge","text":"Develop general programming knowledge. large codebases follow similar well-known design patterns. know , easier things . codebase trying debug use MVC pattern instance? already know MVC pattern, life much easier dealing codebase.","code":""},{"path":"understanding.html","id":"tip2","chapter":"2 Large systems","heading":"2.2.1.1.2 Tip 2: Develop domain knowledge","text":"Develop application domain knowledge. know understand application domain, better understanding codebase .","code":""},{"path":"understanding.html","id":"tip3","chapter":"2 Large systems","heading":"2.2.1.1.3 Tip 3: Be systematic","text":"Packages classes hierarchical! Use systematic reading strategies top-bottom-strategies. top-, use context application together previous assumptions order gain overall understanding codebase. bottom-strategy, start individual statements build picture incrementally.","code":""},{"path":"understanding.html","id":"tip4","chapter":"2 Large systems","heading":"2.2.1.1.4 Tip 4: use your IDE","text":"Use functionalities IDE. Different IDEs (Eclipse) offer different options can helpful learning large codebases. Eclipse IDE, select attribute, function object right mouse click, explore options resulting menu.","code":""},{"path":"understanding.html","id":"tip5","chapter":"2 Large systems","heading":"2.2.1.1.5 Tip 5","text":"Always assume previous coders sensible honest. Every part code written serve purpose written logical methodical way. understand something, don’t just dismiss . course, always chance someone made mistake, rely .","code":""},{"path":"understanding.html","id":"tip6","chapter":"2 Large systems","heading":"2.2.1.1.6 Tip 6: read the tests","text":"Read Tests! Every large codebase comes large test suite contains hundreds even thousands tests. tests usually organised structure mimics source code. tests typically important resource learning various parts code meant . Reading tests gives good opportunity understand expected behaviour specific part source code, try match actual code. Even better, go ahead modify tests even write ! dramatically increase understanding codebase.","code":""},{"path":"understanding.html","id":"tip7","chapter":"2 Large systems","heading":"2.2.1.1.7 Tip 7: Take your time","text":"Take time, don’t hesitate ask. discussed , large codebases keep changing time. Even experienced software engineers can’t claim detailed knowledge every single part codebase time. , take time don’t put lot pressure . Take breath work logical methodical manner. ever get stuck, always feel free ask experienced member team.","code":""},{"path":"understanding.html","id":"comprehension","chapter":"2 Large systems","heading":"2.2.1.2 Comprehending Marauroa","text":"\nFigure 2.3: screenshot marauroa\nNow, using tips outlined section 2.2.1.1, try apply improve understanding Marauroa codebase.Let’s start application domain. know Marauroa’s application domain? point already know game engine used develop Massive Multiplayer Online Role-Playing Videogames MMORPGs. /piece information helped understanding codebase?Secondly, IDE, follow gradual expansion hierarchy read package class names shown figure 2.2. gives bird’s eye view general structure codebase. think names meaningful? contribute understanding codebase?Now try identify classes play central role. identify , try digging. Open classes skim . Check import clause see dependencies. notice anything common? (Use Outline view Eclipse). instance, check class marauroad.java within marauroa.server package. think approach helps improve understanding codebase?Classes can also read gradually using top-strategy. Look icons provided environment. know icon means? Skim comments inside class – use Javadoc. think comments useful? just adding chaos?Skim attributes methods class. don’t need understand every word understand overall meaning. Can establish hypotheses “marauroad.java” class? one following statements agree :’s daemon running server side.’s thread throws 12 threads.follows singleton pattern.","code":""},{"path":"understanding.html","id":"unit-testing-overview","chapter":"2 Large systems","heading":"2.3 Unit Testing Overview","text":"","code":""},{"path":"understanding.html","id":"definition","chapter":"2 Large systems","heading":"2.3.1 Definition","text":"unit test automated test quickly verifies small piece (unit) code isolated manner.small piece code? convention piece code test single class, single method inside class. common beginner’s mistake try test one class . general, always strive keep guideline unit testing one class time.Quickly refers amount time acceptable within given domain (normally, fractions second). However, long execution time complete test suite good enough , means tests quick enough.Isolated manner refers fact unit tests written can run isolation . way, unit tests dependant , can run order time.","code":""},{"path":"understanding.html","id":"aaa","chapter":"2 Large systems","heading":"2.3.2 The AAA pattern: Arrange-Act-Assert","text":"AAA pattern simple intuitive approach provides elegant structure unit tests. helps reading writing unit tests easily understandable maintainable.Arrange: section, set objects tested (usually referred System Test – SUT). SUT configured take specific state, along variables required test.Act: invoke code (unit) like test. SUT prepared previous section used call one methods. output method captured saved.Assert: output action verified. Based arrangement first section, action invoked second section expected produce specific result manipulate state SUT specific way. section, assert result(s) action meet expectation(s).","code":""},{"path":"understanding.html","id":"a-simple-example","chapter":"2 Large systems","heading":"2.3.3 A simple example","text":"Assume class called StringUtils includes method called reverse return reverse input string. instance, method receives string xyz, return string zyx. Now, without knowing exact implementation method, can write following unit test using AAA pattern:important note need know implementation method tested order write required unit tests. example , need know signature (inputs outputs) method expected . fact, encouraged write unit tests methods implement . way, tests written specific implementation, rather written based method supposed . common practice referred Test-Driven-Development (TDD). (Koskela 2013)","code":"@Test\npublic void testReverse () {\n    // Arrange\n    String input = \"abc\";\n    StringUtils sut = new StringUtils(); // sut = system under test\n\n    // Act\n    String result = sut.reverse(input);\n\n    // Assert\n    assertEquals(\"cba\", result);\n\n}"},{"path":"understanding.html","id":"tricks","chapter":"2 Large systems","heading":"2.3.4 Tips and tricks","text":"tips tricks test-driven development.","code":""},{"path":"understanding.html","id":"tip-1-arrange-section-is-largest","chapter":"2 Large systems","heading":"2.3.4.1 Tip 1: Arrange section is largest","text":"Arrange section always largest 3. section, required variables objects created given desired state required test. Sometimes multiple tests require Arrange section. Hence, ’s common practice extract arrange section private method(s) inside test class simply call methods arrange section test require .","code":"String input;\nStringUtils sut; // sut = system under test\n\n// this method will be used in the arrange section of the tests\nprivate void initialize(){\n    input = \"abc\";\n    sut = new StringUtils();\n\n}\n\n@Test\npublic void testReverse () {\n\n    // Arrange\n    initialize(); // everything we need is arranged using this single line\n\n    // Act\n    String result = sut.reverse(input);\n\n    // Assert\n    assertEquals(\"cba\", result);\n\n}"},{"path":"understanding.html","id":"singleline","chapter":"2 Large systems","heading":"2.3.4.2 Tip 2: Act is usually a single line","text":"Act section normally single line code invokes method tested. cases, Act section one line code, immediately think refactoring unit test (breaking smaller unit tests). main reason , test fails, usually difficult tell part act section responsible failure test.","code":""},{"path":"understanding.html","id":"ordering","chapter":"2 Large systems","heading":"2.3.4.3 Tip 3: Order is important","text":"using AAA pattern, start writing test code beginning: 3A sections always come order; Arrange > Act > Assert. However, start writing order. Sometimes, makes sense start either act assert section, based system unit testing way understand .","code":""},{"path":"understanding.html","id":"multipleaaa","chapter":"2 Large systems","heading":"2.3.4.4 Tip 4: Avoid multiple AAA","text":"Avoid multiple Arrange-Act-Assert sections single test. cases find test repeats section one time. look something like :Arrange > Act > Assert > ActAgain > AssertSomethingElse > ArrangeAgain > ActOnceMore > AssertIf struggling understand previous line, imagine trying understand code test actually follows pattern! test contains one Act sections mixed multiple Assert /Arrange sections, means test trying verify one unit code. indicates test longer unit test, rather integration test, since tries verify interaction one units code.ever come across test contains multiple Act-Assert sections, always good idea think refactoring breaking one test, one Act Assert sections.","code":""},{"path":"understanding.html","id":"avoidif","chapter":"2 Large systems","heading":"2.3.4.5 Tip 5: Avoid if statements in tests","text":"Avoid using statements unit tests. Unit test conditional statements difficult read understand. unit test supposed simple sequence instructions contains branching. statements unit tests also make think refactoring, .e breaking test one test verifies outcomes one branches original test.","code":""},{"path":"understanding.html","id":"annotate","chapter":"2 Large systems","heading":"2.3.4.6 Tip 6: Annotate","text":"’s common practice annotate section ’s name comment, shown example . Annotated tests much easier read maintain.","code":""},{"path":"understanding.html","id":"simples","chapter":"2 Large systems","heading":"2.3.5 Building a simple application with simple tests","text":"Let’s put knowledge gained far practice. build class two methods write unit tests check working expected. Follow steps:Create new project: File > New > Java Project (example, called project COMP23311)src source folder created default. Create another source folder right-clicking root element hierarchy: New > Source Folder.One folders contain code test, one tests.code test folder, create class New > Class (example calles class Acme) two methods:\nOne returns sum two integers. : 5,3; : 8\nOne takes two strings returns string product concatenating . : aab, bbc; : aabbbc; : abc, xyz; : abcxyz\nOne returns sum two integers. : 5,3; : 8One takes two strings returns string product concatenating . : aab, bbc; : aabbbc; : abc, xyz; : abcxyzCreate Test case right clicking project, New select JUnit Test Case.Now going fill fields New JUnit Test Case dialogue menu.\nName. convention naming test classes, append Test code test class name, see figure 2.4\nClass test. can specify class test last field dialogue menu. Click Browse... see figure 2.5\ndialogue ask whether want include JUnit libraries. Say Yes .\nClick Finish.\nName. convention naming test classes, append Test code test class name, see figure 2.4Class test. can specify class test last field dialogue menu. Click Browse... see figure 2.5A dialogue ask whether want include JUnit libraries. Say Yes .Click Finish.now need create methods test code written. ultimately think “can know code functioning correctly? behaviour look tell ? Can trip-code way, therefore telling isnt working properly?”test many things:\nsum method, check whether output 8 inputs 3 5\nstring concatenation method, check output aabbbc inputs aab bbc\nstring concatenation method, check output 35 inputs 3 5\netc.\nsum method, check whether output 8 inputs 3 5On string concatenation method, check output aabbbc inputs aab bbcOn string concatenation method, check output 35 inputs 3 5etc.hints create tests:\nUse @Test indicate method test\nassertEquals(String message, expected, actual) tests two values equal.\nUse @Test indicate method testassertEquals(String message, expected, actual) tests two values equal.\nFigure 2.4: JUnit Test Case, Test appended Acme class\n\nFigure 2.5: Class Test example Acme\npossible solution exercise discussed workshop published Blackboard end week 2.","code":""},{"path":"understanding.html","id":"unittestingr","chapter":"2 Large systems","heading":"2.4 Unit Testing Reading and Writing in Marauroa and Stendhal","text":"four exercises understand Marauroa better use tests. Worlds, zones objects fundamental concepts many videogames. Therefore, Marauroa provides classes facilitate development concepts. classes going deal can found :Object: Java marauroa.common.game.RPObjectZone: marauroa.server.game.rp.MarauroaRPZoneWorld: marauroa.server.game.rp.RPWorldWe create new JUnit Test Case following four exercises. Based discussed today think best location tests package.","code":""},{"path":"understanding.html","id":"exercise-1-there-is-only-one-instance-of-world","chapter":"2 Large systems","heading":"2.4.1 Exercise 1: There is only one instance of World","text":"strategy :Get two instances World classUse JUnit statement compare whether two variables refer object.","code":""},{"path":"understanding.html","id":"exercise-2-zones-are-actually-added-to-worlds","chapter":"2 Large systems","heading":"2.4.2 Exercise 2: Zones are actually added to Worlds","text":"Get instance WorldCreate new ZoneAdd new Zone WorldUse method World class check Zone belongs WorldUse JUnit statement check ","code":""},{"path":"understanding.html","id":"exercise-3-objects-are-actually-added-to-zones","chapter":"2 Large systems","heading":"2.4.3 Exercise 3: Objects are actually added to Zones","text":"Create Zone create ObjectSet identifier Object. Tip: Zones class method .Add object ZoneUse method Zone class check Object belongs Zone.Use JUnit statement check ","code":""},{"path":"understanding.html","id":"exercise-4-objects-are-destroyed-when-removed-from-zones","chapter":"2 Large systems","heading":"2.4.4 Exercise 4: Objects are destroyed when removed from Zones","text":"Exercise 3 step 3.Remove object zoneUse method Zone class check Object belongs Zone. Use JUnit statement.","code":""},{"path":"understanding.html","id":"exercise-5-reading-and-refactoring-stendhal-tests","chapter":"2 Large systems","heading":"2.4.5 Exercise 5: Reading and refactoring Stendhal tests","text":"Note: task part team coursework expected commit push results task part current coursework.Stendhal codebase, use tips previous section find tests Quests.Skim tests identify follow AAA pattern .Find skim largest test method class. think approach used write test. many act sections test.Try refactor test make readable understandable?Solutions exercises discussed workshop published Blackboard end week 2.","code":""},{"path":"understanding.html","id":"junit-cheatsheet","chapter":"2 Large systems","heading":"2.5 JUnit Cheatsheet","text":"cheatsheet JUnit:","code":""},{"path":"understanding.html","id":"junit-annotations","chapter":"2 Large systems","heading":"2.5.1 JUnit annotations","text":"Identifies method test method.Fails method throw named exception.Fails method takes longer 100 milliseconds.method executed test. used prepare test environment (e.g., read input data, initialize class).method executed test. used cleanup test environment (e.g., delete temporary data, restore defaults). can also save memory cleaning expensive memory structures.method executed , tests start. used perform time intensive activities, example, connect database.method executed , tests finished. used perform clean-activities, example, disconnect database.","code":"@Test@Test(expected = Exception.class)@Test(timeout=100)@Before@After@BeforeClass@AfterClass"},{"path":"understanding.html","id":"junit-statements","chapter":"2 Large systems","heading":"2.5.2 JUnit statements","text":"Let method fail. Might used check certain part code reached failing test test code implemented.Checks boolean condition true.Checks boolean condition false.Tests two values . Note: arrays reference checked content arrays.Test float double values match. tolerance number decimals must .Checks object null.Checks object null.Checks variables refer object.Checks variables refer different objects.Document version: 04 July, 2022","code":"fail(String message)assertTrue(String message, boolean condition)assertFalse(String message, boolean condition)assertEquals(String message, expected, actual)assertEquals(String message, expected, actual, tolerance)assertNull(String message, object)assertNotNull(String message, object)assertSame(String message, expected, actual)assertNotSame(String message, expected, actual)"},{"path":"debugging.html","id":"debugging","chapter":"3 Debugging","heading":"3 Debugging","text":"Much time software engineer spent debugging code, either people’s . code often unfamiliar important able develop strategies debugging unfamiliar codebase. course use Stendhal example help develop better debugging skills, see figure 3.1\nFigure 3.1: Debugging unfamiliar codebases routine part software engineering. Debugging (xkcd.com/1722) Randall Munroe licensed CC -NC 2.5\n","code":""},{"path":"debugging.html","id":"preparing-for-the-workshop","chapter":"3 Debugging","heading":"3.1 Preparing for the workshop","text":"Welcome COMP23311 workshop Debugging Unfamiliar Code Base.Today, short lecture introducing core concepts, ’ll working number activities undertaking debugging tasks. workshop begins, please follow instructions prepare machine activities workshop today.going use Stendhal code base illustrate topics discussion. involve reading Stendhal code, making small changes. order put coursework risk, ’re going use slimmed version Stendhal code repository containing Stendhal code without extensive revision history.prepare workshop, need clone repository import preferred IDE.HTTPS protocol URI repository :using Eclipse need reminder , can follow steps took Week 1 workshops, cloned imported Marauroa code base. instructions Blackboard, course content > Week 1.Eclipse users need create new workspace import project . Eclipse doesn’t allow two projects name single workspace.","code":"https://gitlab.cs.man.ac.uk/suzanne.m.embury/stendhal-playground-2019.git"},{"path":"debugging.html","id":"introw","chapter":"3 Debugging","heading":"3.1.1 Introduction to the Workshop Activity","text":"workshop, look techniques debugging unfamiliar codebases \nencountered throughout COMP23311 (marauroa stendhal), contributing\nopen source projects working legacy codebases (e.g. part industry\ndevelopment role).Note unlike COMP23311 workshops far, workshop focus debugging stendhal codebase rather marauroa.workshop direct application first team coursework exercise.workshop builds techniques given Workshop 2 navigating large, unfamiliar codebases.\nworkshop :Systematically develop understanding reported error Stendhal codebase execution .Develop test cases verify problem closely replicating gameplay.Use code navigation skills developed Workshop 2 identify possible causes error.Use range debugging tactics eliminate causes, possible fix can proposed.Use code navigation skills developed Workshop 2 identify similar areas code may contain analogous flaws.’ll assuming , workshop, capable carrying following tasks , without needing much guidance:Develop understanding reported observed fault large /unfamiliar codebase.Identify appropriate strategies tactics identify likely location reported observed fault large /unfamiliar codebase.Read write test cases part selected debugging strategy.prior workshops, scope work task pace. ambitious workshop task. However, aim completed steps 1-3 end workshop, least narrowed source problem considerably. Ideally, clear idea fix applied. Implementing (testing) fix add little extra work , real way prove ’ve successfully completed step 3.","code":""},{"path":"debugging.html","id":"workshop-activity-working-through-a-bug-report","chapter":"3 Debugging","heading":"3.2 Workshop Activity: Working Through a Bug Report","text":"Definition: Debugging process understanding reducing number “bugs” (errors defects) computer system (software, hardware combination two) system behaves expected.’ll work systematic process get bug report resolution follows:Start problemStabilise problemIsolate source problemFix problemTest fixLook similar errorsNote although represented six distinct steps, reality times steps may overlap. example, decide add test cases help stabilise understanding problem (#2); probably require take steps towards isolating source problem (#3) need decide portions code subjected test cases going write.Figure 3.2 example bug report similar already seen team coursework.\nFigure 3.2: example bug report issue GitLab. GitLab issues similar GitHub issues ’re familiar : guides.github.com/features/issues/\nworkshop ’ll working systematically steps confirm reported error, understand cause (possible time available) implement changes stendhal codebase address issue.","code":""},{"path":"debugging.html","id":"wheretostart","chapter":"3 Debugging","heading":"3.2.1 Start With a Problem","text":"’ll begin workshop confirming reported bug genuinely problem, understanding trigger regular gameplay. ’ll without looking code.relatively intuitive figure quest work. However, want avoid assumptions strongly encouraged view stendhal documentation quest: stendhalgame.org/quest/water_for_xhiphin_zohos.html.💡 Hint 💡\nuseful stendhal commands (’ll need make admin user use ):/summonat [player] bag [quantity] [item] - Add quantity item player’s bag./teleportto  [player|NPC] - Move player location another player NPC./alterquest [player] [questslot] - Sets specified quest null (accepted, completed) given player.\n\\end{smitemize}full list admin commands (details make player admin user) see: stendhalgame.org/wiki/Stendhal:AdministrationTo replicate bug, ’ll want teleport characters Xhiphin Zohos Stefan. ’ll want summon item water. may also find helpful summon additional items act clear separators player’s bag, e.g. chicken potion. name quest slot water_for_xhiphinTo get quest Xhiphin, ’ll need engage conversation: “hi”, “quest”, “ok” (order) accept quest. Likewise “hi” “water” result Stefan checking water .item top-left bag grid “first” item bag.WARNING: Problems Becoming Admin User?Make sure edit data/conf/admins.txt file running Stendhal server. Server won’t pick changes file running.[OUTPUT] demonstrate completion step, write statement summarises current understanding reported problem.","code":""},{"path":"debugging.html","id":"stabilise","chapter":"3 Debugging","heading":"3.2.2 Stabilise the Problem","text":"Following initial confirmation odd behaviour quest, now need develop detailed understanding problem. cases quest behaves expected? behave expected?[OUTPUT] Now played quest couple times refine original statement something precise represents new understanding problem.may find understanding hasn’t changed much – case, compare others around sure simply really precise statement problem start . Note also problem statement likely continue revised work rest process.Since don’t want repeatedly play game every time make change code, ’ll look develop set test cases demonstrate variety behaviours related error. case, problem relates quest Water Xhiphin Zohos, find correct place locate tests related behaviour quests: tests/games/stendhal/server/maps/quests.[OUTPUT] Write set test cases demonstrate correct incorrect behaviour quest (tests succeed fail).","code":""},{"path":"debugging.html","id":"isolation","chapter":"3 Debugging","heading":"3.2.3 Isolate the Source of the Problem","text":"locate parts computer system (case software) causing problem, first need select one strategies tactics use tools investigation. purposes debugging, think strategy broad approach, tactics set specific actions equipment use follow strategy. Note strategy–tactic pairs make sense use together.workshop, ’re going suggest avoid brute force strategy. can also rule architectural strategy (error definitely server, client). Tactics-wise, profiler definitely appropriate . matter tactics pick, ultimately aim write tests suspected method calls demonstrate correctly identified source.try isolate source problem work least one person. Check regularly partner learn new things problem. suggested approach follows:Choose one strategy tactic isolate source.Compare partner – find someone taking different approach .Work code 15 minutes.Discuss partner – learned problem. ’ve made progress towards isolating source, consider ’ve picked good strategies/tactics.Repeat needed.Try keep brief notes go record progress.[OUTPUT] Evidence developing knowledge source problem.[OUTPUT] confident identified source, already done must write test cases suspected method calls demonstrate correctly identified source.","code":""},{"path":"debugging.html","id":"fixit","chapter":"3 Debugging","heading":"3.2.4 Fix the Problem","text":"accurately isolated source problem, fix usually fairly straightforward. case, able figure relatively trivial modifications codebase allow ensure correct quest behaviour.[OUTPUT] Modify codebase alter, replace, add problematic method call associated problem.","code":""},{"path":"debugging.html","id":"testfix","chapter":"3 Debugging","heading":"3.2.5 Test the Fix","text":"Rerun tests developed Steps 2 (Stabilise Problem) 3 (Isolate Source Problem). tests now pass? , return earlier step process (usually Step 2 Step 3) try .[OUTPUT] able successfully demonstrate sets tests complete without errors.Play game – quest now behave expected? , tests pick ? Return Step 2 revise understanding problem sure tests accurately reflect correct incorrect behaviour quest (specific aspect code quest uses).[OUTPUT] able successfully demonstrate quest behaves correctly cases.","code":""},{"path":"debugging.html","id":"similarity","chapter":"3 Debugging","heading":"3.2.6 Look for Similar Errors","text":"far debugging process reactive – , someone reported problem ’ve tried respond identifying fixing flaw computer system responsible. ’re now going finish debugging process one final proactive step – ’re going go deliberately look codebase see likely parts computer system similar behaviour may also problematic.Using code navigation skills developed Workshop 2, work stendhal codebase find places original (unmodified) method implicated reported bug called. calls, try establish expected actual behaviours .[OUTPUT] debugging log workshop contain list candidate calls implicated method, predictions expected behaviours comparison actual behaviour seen execution.","code":""},{"path":"debugging.html","id":"truths","chapter":"3 Debugging","heading":"3.2.7 The 11 Truths of Debugging","text":"Nick Parlante Stanford University (cs.stanford.edu/people/nick) enumerated eleven truths debugging, encapsulate strategies discussed :Intuition hunches great – just test . hunch fact collide, fact wins. ’s life city.Don’t look complex explanations. Even simplest omission typo can lead weird behaviour. Everyone capable producing extremely simple obvious errors time time. Look code critically – don’t just sweep eye series simple statements assuming simple wrong.clue wrong code flow control. Try see facts pointing . computer trying mislead . Work facts.systematic persistent. Don’t panic. bug moving around code, trying trick evade . just sitting one place, wrong thing way every time.code working minute ago, now doesn’t – last thing changed? incredibly reliable rule thumb reason test code go rather .change code haphazardly trying track bug. sort like scientist changes one variable experiment time.makes observed behaviour much difficult interpret, tend introduce new bugs.find wrong code seem related bug tracking, fix wrong code anyway. Many times wrong code related obscured bug way imagined.able explain Sherlock Holmes style series facts, tests, deductions led find bug. Alternately, bug can’t pinpoint , able give argument critical third party detailing one methods contain bug. One arguments contain flaw since one methods fact contain bug. Trying construct arguments may help see flaw.critical beliefs code. ’s almost impossible see bug method instinct method innocent. facts proven without question method source problem assume correct.Although need systematic, still enormous amount room beliefs, hunches, guesses, etc. Use intuition bug probably direct order check things systematic search. Check methods suspect first. Good instincts come experience.Debugging depends objective reasoned approach. depends overall perspective understanding workings code. Debugging code mentally demanding writing code. longer try track bug without success, less perspective tend . Realise lost perspective code debug. Take break.Document version: 04 July, 2022","code":""},{"path":"estimating.html","id":"estimating","chapter":"4 Cost estimation","heading":"4 Cost estimation","text":"Cost estimation, see figure 4.1. Course material chapter blackboard online.manchester.ac.uk\nFigure 4.1: Accurately estimating long things take can hard. author windows file copy dialog visits friends: “’m just outside town, fifteen minutes” … “Actually, ’s looking like six days” … “Wait, thirty seconds”. Estimation (xkcd.com/612) Randall Munroe licensed CC -NC 2.5\n","code":""},{"path":"estimating.html","id":"wbs","chapter":"4 Cost estimation","heading":"4.1 Work Breakdown Structures","text":"Estimating long something take often challenging task many estimates like one figure 4.1 accurate. important able justify estimates make, rather just making vague guess.One technique improving accuracy (justifiably) estimates called Work Breakdown Structures (WBS) explained video figure 4.2.\nFigure 4.2: Work Breakdown Structures (WBS) help improve accuracy justifiability cost estimations software engineering. image picture screenshot, watch full seven minute video youtu./tKCfnF-z2hY\nexample, stendhal, lets say needed estimate cost fixing bug players losing health points 5.00am 7.00am morning. 100% task break several sub-tasks follows:Replicate bug (20%)Fix bug (20%)Check bug really fixed (20%)Push bug fix repository (20%)Make sure bug doesn’t exist elsewhere (20%)break step sub-sub-tasksReplicate bug (20%)\nReplicate bug manually (5%)\nGather missing info reporter (5%)\nFind tests similar functionality (5%)\nWrite test reveals bug (5%)\nReplicate bug manually (5%)Gather missing info reporter (5%)Find tests similar functionality (5%)Write test reveals bug (5%)’ve split tasks evenly , though practice probably give different percentages depending size difficulty tasks.Document version: 04 July, 2022","code":""},{"path":"testing.html","id":"testing","chapter":"5 Test first development","heading":"5 Test first development","text":"Course material chapter blackboard online.manchester.ac.uk","code":""},{"path":"testing.html","id":"course-content","chapter":"5 Test first development","heading":"5.1 Course content","text":"Document version: 04 July, 2022","code":""},{"path":"flowing.html","id":"flowing","chapter":"6 Git workflows","heading":"6 Git workflows","text":"several workflows can use git, figure 6.1 one .\nFigure 6.1: Deleting project downloading fresh copy best workflow. Git (xkcd.com/1597) Randall Munroe licensed CC -NC 2.5\nworkshop look different workflows can use. Course material chapter blackboard online.manchester.ac.uk delivered live sessions.Document version: 04 July, 2022","code":""},{"path":"refactoring.html","id":"refactoring","chapter":"7 Software Refactoring","heading":"7 Software Refactoring","text":"Software refactoring migration","code":""},{"path":"refactoring.html","id":"gitprep","chapter":"7 Software Refactoring","heading":"7.1 Preparing for the workshop","text":"Welcome COMP23311 workshop software refactoring migration.Today, short lecture introducing core concepts, ’ll working number activities undertaking refactoring migration tasks. workshop begins, please follow instructions prepare machine activities workshop today.","code":""},{"path":"refactoring.html","id":"prepide","chapter":"7 Software Refactoring","heading":"7.1.1 Prepare your IDE","text":"going use Stendhal Playground code base today’s workshop. can make changes without putting coursework risk. prepare workshop, please run IDE load project.attend earlier workshops used Stendhal Playground codebase, ’ll need look workshop instructions chapter 7, see acquire .","code":""},{"path":"refactoring.html","id":"testsuite","chapter":"7 Software Refactoring","heading":"7.1.2 Run the Regression Test Suite","text":"can’t effective refactoring without running regression test suite frequently. Make sure can run test suite project, using run configuration comes Stendhal Playground project.run configuration work, can’t find fix problems , get help TA promptly, can get activity.","code":""},{"path":"refactoring.html","id":"magic","chapter":"7 Software Refactoring","heading":"7.2 Activity: Literals and Magic Numbers","text":"First, ’re going look basic code smell: presence literals production code. Literal values production code problematic tend duplicated throughout code, need changed can difficult time consuming identify places code need updated. Literal values can also make code harder read, guess special meaning literal.course, test code different. Literal values expected test code (though still take steps avoid duplication literals test code).see example code smell action, search open following file:Look literal values class. many, several repeated number places.Choose one literal (repeated ) think benefit represented constant, rather repeated throughout file.Double click one example selected constant (whole literal highlighted).Right click highlighted constant select Refactor > Extract Constant menu appears.dialogue box pop , asking name new constant . convention Java constants names upper case, underscores separate words. Like :Type name constant form dialogue box. also need specify access modifier (private fine now), can accept defaults.now see literal selected removed code, replaced constant, defined towards top class definition.Use undo option IDE run refactoring , time requesting duplicate literals replaced new constant.Hopefully, can see refactoring improved design code, removed technical debt (chose literal well). Can see making change mean future changes easier ?Don’t forget run test suite making change, make sure haven’t caused problems fixed .variant smell “magic number”. number meaning important code, hard infer just looking number . can find several examples magic number code smell following class:hand, next class example magic number neatly turned constant, greatly improving readability code involved . Can find magic number:Can find magic numbers Stendhal code? magic strings?","code":"src/games/stendhal/server/maps/quests/revivalweeks/FoundGirl.javaA_CONSTANT_IN_JAVAtests/games/stendhal/client/sound/system/ToneGeneratorTest.javasrc/games/stendhal/client/sound/system/processors/ToneGenerator.java"},{"path":"refactoring.html","id":"longmethods","chapter":"7 Software Refactoring","heading":"7.3 Activity: Long Methods","text":"code smell based around simple surprisingly powerful idea: short methods easier understand long ones. Take look following classes see point action.First, look :See can figure methods . contrast, look :experience trying figure NameAction.onAction() method compare experience reading much shorter methods OwnAction?good rule thumb method bodies longer single screen’s worth text. can keep methods short, able easily digest . also good discipline developer, forces us think terms small, self-contained chunks logic, rather long rambling sequences code.can shorten NameAction.onAction() method? can’t take functionality . needed. options?unnecessary duplicated code removed, useful tool refactoring called Extract Method. can use take lines code method, put smaller method. simple change can dramatic effect readability.opportunity NameAction.onAction() lines 62–65. wrap lines method called removeQuotes() (something similar). work converting lines method, IDE can job us almost automatically, including working parameters result type . Let’s try .Select lines 62-65 (beginning end) right click highlighted code. Select Refactor > Extract Method menu appears. dialogue box, give name want extracted method . name removeQuotes seems okay . can always rename later, need . make private method, accept default parameters dialogue gives us. can select OK.Look code class refactoring. IDE created new method, bottom class, name specified. worked need pass name processed parameter, declared method appropriate signature. onAction() method now slightly shorter, name method tells code reader exactly intent code extracted . makes double readability improvement one simple step.Helper MethodsMethods like one (private methods, called perhaps just within class) sometimes referred helper methods. help us write readable clear code. early days computing, considered ridiculous define function method called just . Methods, definition, used group together code statements called many times. older compilers, method calls incurred performance overhead: variables calling scope put onto heap, preserved method called, restored afterwards.Modern compilers, however, cope easily methods called just one place. longer worry performance aspects creating new methods, can make many need create readable clear code.next essential task run tests. broken something, want find now, refactoring still IDE’s undo buffer changes made still fresh mind.Can see opportunities shorten method extracting shorter helper methods? Experiment Extract Method refactoring see can reduce size method even .hint given commented <!-- hint --> , get stuck can view source: either *.html *.Rmd see hint.Extract Method really powerful tool, worth learning keyboard short cuts , along short cuts Rename, can apply quickly easily opportunities code improvements present . Often, extract method, useful domain concept showing developers identified . private helper methods create refactoring can sometimes prove useful become public methods, even get grouped form class (using Extract Class refactoring).","code":"src/games/stendhal/server/actions/pet/OwnAction.javasrc/games/stendhal/server/actions/pet/NameAction.java"},{"path":"refactoring.html","id":"excessive","chapter":"7 Software Refactoring","heading":"7.4 Activity: Excessive Comments","text":"Another code quality issue can effectively dealt Extract Method smell excessive comments. judicious comments, well placed, can extremely useful helping developers read code accurately quickly, anything now viewed indication code may highest quality. Rather fixing quality problems, making code self-documenting, developer felt necessary include lots explanatory comments. quicker solution developer short term, leads technical debt long term, comments age grow step changing code.can see example code smell execute() method following class:comments spread throughout method, don’t always seem add much value. seem duplicated calls logger. Others seem like conveyed effectively extracted methods (also deal fact method long).Can see chances extract methods class?comments help us see might add helper methods, situation complication structure code. number statements, look like make good methods, return statement body, makes sense executed current method. can’t pull statement helper method, expect work.case, need little manual refactoring first. Can see move return statement outside body -statement, still execution dependent value condition -statement?hint given commented <!-- hint --> , get stuck can view source: either *.html *.Rmd see hint.’ve refactored return statements -statements, can see opportunities removing need comments extracting code well-named helper methods? goal produce code reads clearly natural language, explains code plain obvious way possible.reach point, want help, let lecturer know. demonstrate technique screen share.","code":"src/games/stendhal/server/actions/equip/EquipAction.java"},{"path":"refactoring.html","id":"refactorings","chapter":"7 Software Refactoring","heading":"7.5 Activity: Applying the Refactorings Together","text":"finish activities move topic migration, can try last activity.activity, asked refactor test code. People learning refactor often forget apply test code well production code. readability ease modification just important test code production code - maybe even important, test code essential tool guides us changing production code. don’t safety net test code, vitally important clear simple can seen correct.Take look code tests Ice Cream Annie test:see couple code smells looking code. hopefully idea refactorings can use help improve .way contrast, take look test code:shows kind organisation want get IceCreamForAnnie tests follow. RatChildren test, part quest tested separate test case method. means one fails, tests still run, ’ll get see parts whole quest working .IceCreamForAnnie test, hand, everything written one long test case. JUnit stop first failing assertion test case, assertion fails test somewhere near beginning, rest assertions won’t get run, won’t get diagnostic information need .See can use three refactorings used workshop improve diagnostic capabilities IceCreamForAnnie test, without changing meaning.Question refactor test code, tells us made mistake changed behaviour system?Good luck!Document version: 04 July, 2022","code":"tests/games/stendhal/server/maps/quests/IcecreamForAnnieTest.java/stendhal/tests/games/stendhal/server/maps/quests/FindRatChildrenTest.java"},{"path":"designing.html","id":"designing","chapter":"8 Design for Testability","heading":"8 Design for Testability","text":"Software refactoring migration","code":""},{"path":"designing.html","id":"preparing-for-the-workshop-1","chapter":"8 Design for Testability","heading":"8.1 Preparing for the Workshop","text":"Welcome COMP23311 workshop design testability.Today, short lecture introducing core concepts, ’ll working number activities using Stendhal code base learn basic design testability concepts.going use Stendhal Playground code base today’s workshop. can make changes without putting coursework risk. prepare workshop, please run IDE load project.attend earlier workshops used Stendhal Playground code base, ’ll need look workshop instructions week 3, see acquire .","code":""},{"path":"designing.html","id":"dummies","chapter":"8 Design for Testability","heading":"8.2 Understanding Test Doubles: Dummies","text":"simplest kind test double dummy.use dummy code test required pass object part fixture, know object used test execution. case, just need test double object interface required fixture object. don’t care dummy , never used.easiest see looking examples.","code":""},{"path":"designing.html","id":"dummy1","chapter":"8 Design for Testability","heading":"8.2.0.1 Example Dummy No. 1","text":"IDE, find code following method:test class method name comments make clear test case checking whole zones can correctly configured disallow teleporting . test checks teleporting allowed two locations zone (top left bottom right edge squares) teleporting still allowed.fixture test zone configured disallow inwards teleports. don’t care attributes zone. signature method adding configuration zone requires two arguments: zone configured map containing attributes used guiding configuration. (Hover call configureZone() method see ’s JavaDoc.) NoTeleportIn configuration need special attributes set, method signature inherited attributes must provided whether needed .’s point wasting time resources (lines code) setting fake attributes configuration test isn’t going use . , coder test sensibly chosen simplest possible object compatible method signature: null value.Java, many object oriented languages, null instance class Object, class root object inheritance hierarchy classes sub-class . instance Object can used anywhere instance class needed. means null match required data type (Map<String, String>) can given simplest possible attribute map satisfy Java’s strong typing requirements.","code":"games.stendhal.server.core.config.zone.NoTeleportInTest.testConfigureZone()}"},{"path":"designing.html","id":"dummy2","chapter":"8 Design for Testability","heading":"8.2.1 Example Dummy No. 2","text":"Let’s look another example, time client code. Search method:first line method contains example null value used dummy. itemPanel() constructor takes two arguments: slot name placeholder sprite. don’t care much either value test, need ItemPanel instance part fixture. name easy enough, can give value. (Note carefully chosen value used test, clearly indicates reader code name important.) also don’t care sprite. coder used simplest possible Sprite instance fulfil fixture requirements: null value.","code":"games.stendhal.client.gui.ItemPanelTest.testCursors()"},{"path":"designing.html","id":"dummy3","chapter":"8 Design for Testability","heading":"8.2.2 Example Dummy No. 3","text":"Staying testCursors() test case previous example, can see another dummy used test—one just null value time?See can find , check answer staff member graduate teaching assistant (GTA). Remember dummy test double represents simplest possible, vanilla object can allow necessary fixture found.","code":""},{"path":"designing.html","id":"stubs","chapter":"8 Design for Testability","heading":"8.3 Understanding Test Doubles: Stubs","text":"fixture needs complex simple dummy objects looked far? test doubles need behave like production objects mimic, real behaviour invoked test.Sometimes, need able control values returned method calls. can hard code simple return value object, call test double stub object.stub version desired fixture class interface class, returns simple, hard-coded values methods, rather actual game processing. removes randomness unpredictability fixture, also giving results need test.older languages, stub classes defined full, just ordinary production classes , need include mechanism code say use stub class (testing) use production class (production use). OO languages, sub-classing inheritance, give us convenient way defining stubs, right inside test code .","code":""},{"path":"designing.html","id":"stubby1","chapter":"8 Design for Testability","heading":"8.3.1 Example Stub No. 1","text":"Look test case methods :methods create instance class called MockEntity. look class code base, find , import pulls class name class defining.Instead, class defined end EntityTest class, private class (lines 156–176).new class inherits Entity class, behaviour production code class, apart behaviour overridden added definition. changes define extra control need Entity instances order write test effectively.case, changes :Adding new private field called count.Overriding superclass constructor behaviour create Marauroa RPObject instance give type.stubbing method returns area entity MockEntity instances return null RectangularArea (example dummy used inside stub).Overriding onPosition() method well everything production superclass method called, also increment count variable., look test methods test class, see can work roughly stub class designed behaviours.Notice stub class controls state (returning hard-coded value area entity requested) adds special control behaviour needed test code production code (counts number times onPosition() method called).","code":"games.stendhal.client.entity.EntityTest"},{"path":"designing.html","id":"stubby2","chapter":"8 Design for Testability","heading":"8.3.2 Example Stub No. 2","text":"Another useful Java mechanism creating stub classes anonymous sub-class. used widely throughout Stendhal test suite creating test doubles, popular technique general getting code test.see example Stendhal code base, find method:Make sure find server version test class. another class name client code, contain obvious stub.Take look simple method see can work . (Anonymous sub-classes feature Java taught first year programming course units. can either ask member staff GTA explain, can research Java feature works. don’t leave workshop without understanding language construct can used create test doubles.)SummonActionTest.setUP() method creates anonymous sub-class StendhalRPZone class, overrides one methods class: collides() method met previous workshops. Instead using collision layer decide whether player objects can placed location given, -ridden version method just always returns false. matter location zone give parameters, method always say collision point, object can placed .Hopefully, can see much quicker elegant way ensuring collisions zone setup configure actual collision layer test zone. stub object created time test run, exactly behaviour StendhalRPZone class, except never report collisions zone created .Take look zone instance created anonymous sub-class used, stub test double allows us write test simply.","code":"games.stendhal.server.actions.admin.SummonActionTest.setUP()"},{"path":"designing.html","id":"scavenger","chapter":"8 Design for Testability","heading":"8.4 Test Doubles Scavenger Hunt","text":"Work pairs small groups find examples different types test double Stendhal. guidance given . Can find least:One additional example dummyOne additional example stubWrite name class, line test double occurs, sheet paper file.found example type test double (given ) check answers staff TA, share examples neighbouring students.","code":""},{"path":"designing.html","id":"findum","chapter":"8 Design for Testability","heading":"8.4.1 Finding Dummies","text":"find candidate code examine, can use File Search IDE search string null test code. (good shorthand way search test classes use regular expression *Test.java file name section search dialogue box.)looking places fixture setup part test case null passed parameter preparing class test test execution, preparing dependent object.dummies, look use argument constructors, simple instances created passed parameters class test, setting dependent class.good sign found dummy replace another complex object, test behaviour change.","code":""},{"path":"designing.html","id":"findstubs","chapter":"8 Design for Testability","heading":"8.4.2 Finding Stubs","text":"Stubs also normally found test classes. Look anonymous subclasses created set-stages test case, literal values used specify return values methods.Stubs can also implemented named private classes. normally happens need create several instances stub, use across multiple test cases, perhaps. need one instance stub, don’t need refer parts code, fine anonymous.Sometimes stubs need used several classes test. case, can’t declared private classes, must declared file. Look classes wherever test classes declared, also places test helper code located.Can find packages containing test helper code Stendhal?Look names used non-anonymous stubs find. authors code made role classes test doubles clear name?","code":""},{"path":"designing.html","id":"mockobjects","chapter":"8 Design for Testability","heading":"8.5 Understanding Test Doubles: First Experiments with Mock Objects","text":"short activity, asked look test code HandToHand class:list names test case methods class. Take sheet paper draw line middle. one side, write names methods using mocks, side write names test methods using mock objects framework.testAttack()testCanAttackNow()testCanAttackNowBigCreature()testFindNewTarget()testHasValidTarget()testHasValidTargetDifferentZones()testHasValidTargetInvisibleVictim()testHasValidTargetNonAttacker()testHasValidTargetvisibleVictim()testNotAttackTurnAttack()methods use mocks common, compared methods don’t use mocks?Next, ’re going look happens tests using mock objects fail.Starting first test method, testAttack(), use IDE’s navigation facilities jump definition method test case checking. (Hint: double click method name press Function key 3 (F3) Eclipse, right click method name select Open Declaration.)Comment line 26, like :Now run tests.Take look error message get. Can tell means?","code":"games.stendhal.server.entity.creature.impl.attack.HandToHandTest.javapublic void attack(final Creature creature) {\n    if (creature.isAttackTurn(SingletonRepository.getRuleProcessor().getTurn())){\n        //creature.attack();\n    }\n}"},{"path":"designing.html","id":"next","chapter":"8 Design for Testability","heading":"8.6 All Finished and Nowhere to Go?","text":"finished activities, can try challenging exercise.Daily Item Quest contains annoying bug. quest asks find item set Mayor Ados. can’t find item, week, Mayor allow request different item. , bug code allows quest class possibility giving impossible--find item .Work pairs small groups make Daily Item Quest functionality testable, using test double techniques covered class, bug can made visible.create complete implementation. Just sketch changes make, sufficient detail understand costs benefits.single right answer . Several approaches work. unsure, just try one see looks sketched . Discuss answer staff unsure.Document version: 04 July, 2022","code":""},{"path":"patterning.html","id":"patterning","chapter":"9 Software design patterns","heading":"9 Software design patterns","text":"","code":""},{"path":"patterning.html","id":"introduction","chapter":"9 Software design patterns","heading":"9.1 Introduction","text":"workshop, look design patterns, application refactoring. software design pattern describes general, reusable solution commonly occurring problem specific design context. ’re often useful designing new pieces software allow us reuse best practice prior experience, provide means discuss design others (shared vocabulary). However, design patterns can equally useful refactoring existing codebases.workshop builds techniques given previous workshops working large codebases, particular extending Workshop 8 refactoring existing code. workshop :introduced 6 23 Gang Four (GoF) Design Patterns (Gamma et al. 1994)Refactor small existing code base apply Behavioural, Structural Creational patternsWe’ll assuming , workshop, capable carrying following tasks , without needing much guidance:Identify portions existing codebases improved application Design PatternsDescribe refactoring using design pattern vocabulary , appropriate, supporting UMLApply design patterns existing codebaseAs prior workshops, scope work tasks pace – particular, three workshop exercises divided multiple stages address first one design pattern, second. (minimum) aim completed tasks related first design pattern exercise.","code":""},{"path":"patterning.html","id":"behave","chapter":"9 Software design patterns","heading":"9.2 Workshop Exercise 1 - Behavioural Patterns","text":"first section workshop focuses applying two Behavioural patterns introduced: Strategy, State.exercise, ’ll working small-scale Java codebase ’s loosely inspired classes Stendhal codebase. first exercise ’ll focussing set classes represent pets. main classes members can represented UML class diagram shown figure 9.1\nFigure 9.1: Pets, Cats, Goats Magic Dragons\nworkshop ’ll extending refactoring codebase explore behavioural patterns can simplify process adding new functionality, can remove need duplicate code.","code":""},{"path":"patterning.html","id":"strategy","chapter":"9 Software design patterns","heading":"9.2.1 Exercise 1a - The Strategy Pattern","text":"part exercise ’ll focusing Strategy pattern. modify code five stages:Add new Pet class CuddlyToy requires new algorithms growth, feeding, hunger, crying.Consider one might use sub-class/super-class relationships avoid duplicate code.Implement abstract GrowthStrategy provides method signatures growth-related algorithms.Implement three concrete implementations GrowthStrategy encountered far.Modify existing Pet classes use newly created strategy classes.","code":""},{"path":"patterning.html","id":"pet","chapter":"9 Software design patterns","heading":"9.2.1.1 Stage 1 - Add a new Pet class","text":"’ve asked add new Pet, CuddlyToy, players (example) allergies just don’t want effort looking real-life creature. requirements CuddlyToy follows:CuddlyToy grow, ADULT_SIZE instantiation.CuddlyToy eat, get hungry.CuddlyToy squeaks, cry generated plastic squeaker[ACTION] Implement new Pet subclass complies requirements, modify PetDriver.java demonstrate new Pet subtype.","code":""},{"path":"patterning.html","id":"stage-2---design-sub-classsuper-class-relationships-to-avoid-duplicated-code","chapter":"9 Software design patterns","heading":"9.2.1.2 Stage 2 - Design sub-class/super-class relationships to avoid duplicated code","text":"’s clear many Pets quite different algorithms growth. , like Goats Cats grow steadily, increasing fixed amount constant time interval. Others, like MagicDragons, increase fixed amount irregular intervals – growth stagnates undergo growth spurt. Pets, like CuddlyToys, don’t grow .wanted introduce Pet types, quickly end duplicate code steady, irregular growth across multiple Pet subclases. Alternatively, add layers subclassing shown figure 9.2\nFigure 9.2: Possible subclasses Pet\nHowever, quickly become difficult manage, doesn’t always avoid duplicate. example, suppose ’re now asked add new Bird subtype. Birds can fly (like Dragons) grow steadily (like Cats Goats). resulting class structure might look something like shown figure 9.3\nFigure 9.3: badly designed hierarchy\n, ’ve now potentially duplicated steady growth code two superclasses SteadilyGrowingGroundPet SteadilyGrowingFlyingPet, new code flying behaviours two superclasses SteadilyGrowingFlyingPet RandomlyGrowingFlyingPet. definitely isn’t great design.","code":""},{"path":"patterning.html","id":"growthstrategy","chapter":"9 Software design patterns","heading":"9.2.1.3 Stage 3 - Introduce a GrowthStrategy","text":"Strategy pattern defines encapsulates family interchangeable algorithms – , interchangeable algorithms describe different patterns growth.first step refactoring Strategy create abstract class GrowthStrategy.[ACTION] Create new GrowthStrategy class, abstract method signatures canGrow() Grow().","code":""},{"path":"patterning.html","id":"growthstrategies","chapter":"9 Software design patterns","heading":"9.2.1.4 Stage 4 - Implement concrete growth strategies","text":"now need create concrete implementations GrowthStrategy class, representing different growth algorithm. far, ’ve encountered three growth algorithms:Steady growth – Grows fixed amount every time grow method called.Random growth – Grows fixed amount random subset times grow method called.growth – grow, even grow method called.[ACTION] Create three subclass implementations GrowthStrategy, one growth algorithms encountered far.","code":""},{"path":"patterning.html","id":"modifys","chapter":"9 Software design patterns","heading":"9.2.1.5 Stage 5 - Modify the codebase to use our GrowthStrategy","text":"Now selection implemented GrowthStrategy classes, need modify Pet subclass utilise new classes. , ’ll add attribute growthStrategy type GrowthStrategy Pet class. ’ll also need add set method new attribute, modify existing canGrow() grow() method Pet ’s subclasses make calls new strategies.[ACTION] Make remaining code changes needed Pet subclasses use GrowthStrategy. now mean special-case grow() implementation MagicDragon CuddlyToy. Verify PetDriver.java still behaves expected.UML diagram figure 9.4 good representation codebase end migration task.\nFigure 9.4: codebase look something like end migration task\n","code":""},{"path":"patterning.html","id":"state","chapter":"9 Software design patterns","heading":"9.2.2 Exercise 1b - The State Pattern","text":"part exercise ’ll focusing State pattern. continue modify Pet codebase.task, look apply State pattern store attributes related hunger, algorithms depend attribute values.Note extension/secondary task “Exercise 1 - Behavioural Patterns”. Detailed instructions therefore provided, suggested approach might break modification following four stages:Identify hunger states dependant behaviours.Implement abstract HungerState provides method signatures dependant behaviours.Implement concrete implementations hunger states identified previously.Modify existing Pet classes use newly created state classesYou may find helpful make brief UML sketches needed refactor code towards State pattern.","code":""},{"path":"patterning.html","id":"structural","chapter":"9 Software design patterns","heading":"9.3 Workshop Exercise 2 - Structural Patterns","text":"first section workshop focuses applying two Structural patterns introduced: Composite, Adapter.exercise, ’ll working set classes represent habitats – places pets might want live. main classes members can represented UML class diagram figure 9.5\nFigure 9.5: Subclasses Habitat\nworkshop ’ll extending refactoring codebase explore structural patterns can simplify process adding new functionality, can remove need duplicate code.","code":""},{"path":"patterning.html","id":"composite","chapter":"9 Software design patterns","heading":"9.3.1 Exercise 2a - The Composite Pattern","text":"part exercise ’ll focusing Composite pattern. modify code 3 stages:Add new Habitat classes, Cave, Field, MuddyPuddle\nModify Habitat can (optionally) contain number child Habitat objects.Modify describe() getOccupants() methods include values child objects.","code":""},{"path":"patterning.html","id":"habitats","chapter":"9 Software design patterns","heading":"9.3.1.1 Stage 1 - Add new Habitat classes","text":"’ve asked add new Habitat classes represent specific places Pets might choose spend time.\ncurrent description MythicalCaveSystem already indicates cave system actually composed three separate Caves.\nLikewise, Farm described containing multiple fields barn.’ve asked add three specific new Habitat classes:Cave - single cave dragons hide .Field - field grass goats might eat.MuddyPuddle - patch muddy water – goats love splashing puddles.[ACTION] Implement three new Habitat subclass , modify HabitatDriver.java demonstrate new Habitat subtypes.","code":""},{"path":"patterning.html","id":"children","chapter":"9 Software design patterns","heading":"9.3.1.2 Stage 2 - Modify Habitat to contain child Habitat objects","text":"already know MythicalCaveSystem contains three Caves, Farm contains Field. ’re going use Composite pattern make relationship integral part class structure.start refactoring, ’ll need modify Habitat list children; children type Habitat.[ACTION] Modify Habitat class add new element.[ACTION] Create new methods add, remove get children Habitat.[ACTION] Modify HabitatDriver demonstrate multiple Caves objects can added child MythicalCaveSystem, Field can added child Farm.[ACTION] Modify HabitatDriver demonstrate instance MuddyPuddle can added child Field (child Farm).","code":""},{"path":"patterning.html","id":"childmethods","chapter":"9 Software design patterns","heading":"9.3.1.3 Stage 3 - Modify Habitat to call child methods","text":"final stage refactoring make sure descriptions Habitat complete possible, occupancy counts correct (.e. include occupants part Habitat). , need make sure describe() getOccupants() Habitat recursively call methods children.[ACTION] Modify describe() recursively call childHabitat.describe() every childHabitat list children habitat. need store result build new formatted description string parent.[ACTION] Modify getOccupants() recursively call childHabitat.getOccupants() every childHabitat list children habitat. need store result build one complete list every Pet parts top-level Habitat.[ACTION] Modify HabitatDriver demonstrate new describe() getOccupants() methods work expected. particular confirm :call aMuddyPuddle.describe() shows description MuddyPuddle.call aField.describe() shows description Field MuddyPuddle.call theFarm.describe() shows description Farm, Field MuddyPuddle.Likewise, check calls getOccupants() , check describe() getOccupants() theCaves aCave.[OPTIONAL EXTRA] Modify removeOccupant() remove Occupant child Habitats aren’t found parent.UML diagram figure 9.6 good representation codebase end migration task.\nFigure 9.6: codebase look something like end migration task\n","code":""},{"path":"patterning.html","id":"adapter","chapter":"9 Software design patterns","heading":"9.3.2 Exercise 2b - The Adapter Pattern","text":"part exercise ’ll focusing Adapter pattern. continue modify Habitat codebase.task, look apply Adapter pattern make legacy class FieryMountains.java available possible Habitat.\nFieryMountains implemented many years ago previous game lots neat graphics team want reuse. use Adapter pattern FieryMountains used , new Habitat. absolutely must modify FieryMountains.java, must used final solution (.e. can’t just copy paste values just ignore ).Note extension/secondary task “Exercise 2 - Structural Patterns”. Detailed instructions therefore provided, suggested approach might break modification following four stages:Create new Java stub FieryMountainsAdapter extends Habitat stores new FieryMountains instance one attributes.Write new implementation FieryMountainsAdapter.describe(), complies signature provided method Habitat calls relevant functionality FieryMountains.Modify HabitatDriver demonstrate fiery mountains can added ArrayList Habitats, Pet instances (maybe Dragon?) can added occupant FieryMountains.may find helpful make brief UML sketches needed refactor code towards Adapter pattern.","code":""},{"path":"patterning.html","id":"creational","chapter":"9 Software design patterns","heading":"9.4 Workshop Exercise 3 - Creational Patterns","text":"first section workshop focuses applying two Creational patterns introduced: Factory Method, Singleton.two patterns familiar , experiences courses. example, ’ve previously looked Stendhal’s Singleton class RPWorld one early workshops.exercise, ’ll working Pet Habitat classes ’ve already seen. time ’re using classes together part Tamagotchi application – simple text based application lets users look virtual pet .workshop ’ll extending refactoring codebase explore creational patterns can allow users control instantiation Pets Habitats.","code":""},{"path":"patterning.html","id":"factory","chapter":"9 Software design patterns","heading":"9.4.1 Exercise 3a - The Factory Method","text":"part exercise ’ll refactoring Factory Method instantiate different Pet Habitat classes runtime1This much simpler change previous changes, can likely achieved 3 stages:Add new PetCreator class creates Pet objects response String parameter.Add new HabitatCreator class creates Habitat objects response String parameter.Modify Tamagotchi class use new classes, passing user input String parameters.now able carry changes without detailed instructions previous exercises.","code":""},{"path":"patterning.html","id":"singleton","chapter":"9 Software design patterns","heading":"9.4.2 Exercise 3b - The Singleton Pattern","text":"final part exercise consider sensible application Singleton pattern application code worked today’s exercises.Document version: 04 July, 2022","code":""},{"path":"risking.html","id":"risking","chapter":"10 Risk management","heading":"10 Risk management","text":"\nFigure 10.1: Just like life, software engineering inherently risky. COVID Risk Chart (xkcd.com/2333) Randall Munroe licensed CC -NC 2.5\n","code":""},{"path":"risking.html","id":"course-content-1","chapter":"10 Risk management","heading":"10.1 Course content","text":"Course material chapter blackboard online.manchester.ac.ukDocument version: 04 July, 2022","code":""},{"path":"opening.html","id":"opening","chapter":"11 Open source challenge","heading":"11 Open source challenge","text":"","code":""},{"path":"opening.html","id":"introduction-1","chapter":"11 Open source challenge","heading":"11.1 Introduction","text":"Contributing open source software great way get experience, looks great CV (improve chances invited job interviews) also helps develop skills knowledge. (Hull 2021; Spinellis 2021)workshop, can work alone, pairs small groups put everything learnt semester practice, aiming fix issue (create pull request) open source system choice.workshop builds techniques given previous workshops working large /unfamiliar codebases.\nHopefully pull request put together today first many …","code":""},{"path":"opening.html","id":"challenge","chapter":"11 Open source challenge","heading":"11.2 The challenge","text":"Working alone, pairs, small groups… find fix issue open source system choice.\nmay work project programming language feel comfortable coding .","code":""},{"path":"opening.html","id":"projecti","chapter":"11 Open source challenge","heading":"11.3 Identify an appropriate project","text":"Make sure project :accepts new contributionshas license / contribution policy ’re happy .\nneed complete contributors agreement?\nspecific programming style need stick ?\nneed complete contributors agreement?specific programming style need stick ?can easily download, build runyou can run relevant tests foris programming language ’re familiar withuses toolchain ’re (mostly) familiar withhas issue tracker open issuesSome Java projects might work :jitsi.org - Java audio/video/chat client. Uses Ant JUnit, hosted github.com/jitsi/jitsi. July 2021 46 open issues tagged help-wanted.junit.org - next generation JUnit (Java testing). Hosted github.com/junit-team/junit5, July 2021 14 open issues tagged --grabs.’ll also find Java projects listed --grabs.net. may also find ideas twitter.com/yourfirstpr. suggestions open source projects, including many Python languages see Coding Future. (Hull 2021)","code":""},{"path":"opening.html","id":"findanissue","chapter":"11 Open source challenge","heading":"11.3.1 Find an interesting issue to work on","text":"’ll need identify issue group tackle. check :issue one can replicate (.e. able demonstrate really problem).issue one project team open contributions .\nissues may addressed released yet\nissues may already progress\nmay issues project team choosing address (e.g. backward compatibility reasons, consider issue feature, bug).\nissues may addressed released yetOther issues may already progressSome may issues project team choosing address (e.g. backward compatibility reasons, consider issue feature, bug).group agree chosen issue something skills address.","code":""},{"path":"opening.html","id":"forklone","chapter":"11 Open source challenge","heading":"11.3.2 Fork and clone the repository","text":"’ll need copy codebase work . Exactly achieve may vary based project hosted.GitHub hosted projects ’ll usually fork repository, clone forked version.See help.github.com/articles/fork--repo","code":""},{"path":"opening.html","id":"bcp","chapter":"11 Open source challenge","heading":"11.3.3 Branch, change and push","text":"Work issue team. ’re happy ’ve addressed issue, run relevant tests . tests pass ’re confident ’ve met requirements contributors, now’s time push changes forked repository.","code":""},{"path":"opening.html","id":"pullrequest","chapter":"11 Open source challenge","heading":"11.3.4 Notify the repository creator (make a pull request)","text":"everything complete, ’ll want feed work back original codebase.Github-hosted projects making pull request: help.github.com/articles/creating--pull-request. may also want : post relevant mailing lists/forums, contact project owner twitter.Document version: 04 July, 2022","code":""},{"path":"starting.html","id":"starting","chapter":"12 Starting Stendhal","heading":"12 Starting Stendhal","text":"","code":""},{"path":"starting.html","id":"introduction-2","chapter":"12 Starting Stendhal","heading":"12.1 Introduction","text":"start first team coursework exercise, GitLab repository created team, containing code base work across semester. repository contains version source code Stendhal: multi-player online adventure game. built top Marauroa game engine work early workshops course unit. Although game, Stendhal functions much like kinds software systems keep industry, governments non-profit sector functioning. multi-user, multi-threaded, client-server system uses secure sockets communicate Web. also implements many business rules, must manage stored data using database. therefore provides us good training base learning modern software engineering skills.first team study Sessions, ’ll meet team get first look code base ’re going working . spending time getting know fellow team members, please work sections 1–3 document. end , clone repository VM.works smoothly , can start working sections 4–8 together. sections show build system make changes, run server client game, run tests. may technical difficulties take days sort . don’t worry don’t get far sections first day.second team study session, can get started coursework. Instructions made available day issues team need solve copied repositories ahead team study session., team study session, finish working steps 4–8 document, look coursework instructions begin planning work together complete tasks deadline.completing steps document, every team member able achieve following core tasks Within IDE selected team:Acquire local copy code (cloning team’s Stendhal repository GitLab).Figure build Stendhal components (client server).Figure run tests Stendhal, see results.Figure run code Stendhal local machine, can see effects changes game.document guide steps needed achieve goal. meet online team, using preferred online meeting tool, work document together. activity, everyone team carry steps machine. might choose one team member share screen everyone carries steps time, everyone can see outcome step . (aware step 3, cloning code base, may take time, especially many students accessing GitLab server time.)ℹ️ Note ℹ️Working Remote TeamFor first activity together team, ’ll need experiment ways organising can collaborate effectively project together, may located remotely. Fully partially remote software development teams now commonplace industry. coursework gives chance experience challenges opportunities way working. communicate ? know working ? team member gets stuck? give ask help? can prevent people online feeling like second-class citizens?Remember everyone working different equipment different environments. patient someone seems falling behind. may working slow machine, low bandwidth connection. kind someone seems struggling. may quiet place work, may worried health health family members.Everyone team needs feel comfortable reporting difficulties carrying part work team, can support one another. Think now personally can create culture trust respect within team. Think tone voice choice words speaking. Think can listen actively productively people speak. can make sure everyone’s voice heard everyone’s talents recognised?can find lots information code game main Stendhal website :stendhalgame.orgOn website, ’ll find development guide plus lots end-user documentation wiki describing world game set.","code":""},{"path":"starting.html","id":"idelike","chapter":"12 Starting Stendhal","heading":"12.2 Choosing an IDE","text":"Probably first thing team needs agree IDE use.\n\nwelcome use Java IDE team, must use proper IDE. Glorified text editors accepted coursework. IDEs always better tasks. aim ensure experience working depth least one IDE, can understand strengths weaknesses, compared , simpler development environments.recommended choose single IDE whole team uses. perfectly possible different team members use different IDEs, don’t disallow . adds extra layer complexity process shared coding, requires certain level confidence Git IDEs question work. (example, ’ll need decide whether put configuration files IDEs used version control, make sure none share name.) Since ’ll facing plenty technical team work challenges coursework, may wish avoid adding extra, unnecessary complications team’s workflow. agreeing use IDE one way .mentioned elsewhere, although teams welcome choose standard Java IDEs, able provide technical support 2020-03 Linux VM provided Department coursework exercise. Stendhal team use Eclipse, code already set Eclipse project. use IDE, project come ready set . choose another IDE, ’ll set work , get project right configuration.","code":""},{"path":"starting.html","id":"acoding","chapter":"12 Starting Stendhal","heading":"12.3 Acquiring the Code","text":"set repository team school’s GitLab server. contains close copy actual Stendhal code base. ’ve make changes make code base suitable work going . extent nature changes different every year. year, students working remotely machines, ’ve take drastic action removing commit history, convert repository ’s usual 1.5Gb size something manageable. ’ve also removed large binary files needed coursework .e-mailed link team’s repository created. first step team member make local clone repository account (preferably VM supplied Department). might want team exercise, initially, team members grouped around single machine. eventually need carry steps filespace can get started coursework.make local clone, follow set steps used first individual coursework (workshops week 1, completed workshop time team study session). Check back coursework instructions can’t remember details yet completed week 1 workshops.can get URI team’s repository logging onto GitLab, finding Stendhal project Projects list navigating main page. ’ll able copy URI onto clipboard , using blue Clone button. can use either protocol2You need select branch checkout create clone. Stendhal team use master branch main development branch. ’ll choose starting point, .difficulties creating clone, see trouble shooting guide online Lab Help wiki:Index trouble-shooting error messages: wiki.cs.manchester.ac.uk/index.php/LabHelp:ErrorsIndex trouble-shooting general symptoms: wiki.cs.manchester.ac.uk/index.php/LabHelp:Symptoms","code":""},{"path":"starting.html","id":"bcode","chapter":"12 Starting Stendhal","heading":"12.4 Building the Code","text":"Since version Stendhal working uses Java main implementation technology, built-Eclipse Java compiler able compile source files , without needing request . (fact, like IDEs, Eclipse automatically recompile source files small code change, errors can highlighted source, typing — useful facility.), saw workshops week 1, building system just compiling Java classes. Stendhal team use Ant script describe build system. showed Marauroa code base workshops week 1 see Building Testing Marauroa chapter 1. apply approach invoke Ant build Stendhal code base.","code":""},{"path":"starting.html","id":"testsuites","chapter":"12 Starting Stendhal","heading":"12.5 Running the Test Suite","text":"two ways run test suite Stendhal, become familiar .","code":""},{"path":"starting.html","id":"antrunning","chapter":"12 Starting Stendhal","heading":"12.5.1 Running the Test Suite Through Ant","text":"First, run test suite using Ant build file. set everything needed run test suite (including necessary database configuration files)., follow procedures used week 1 workshop run Maraurao tests, using Ant view within Eclipse. Open Ant view add Stendhal project build file view. Open list targets look quickly. several targets appear related tests Stendhal Ant build file. target use one called test. targets containing word “test” intermediate targets run directly.Notice process compiling code running full test suite takes little (cloning repository). Depending load network, can take anything 3 10 minutes run. large code base test suite, factor compilation test running times way work, since introduce noticeable delay.","code":""},{"path":"starting.html","id":"junitplugin","chapter":"12 Starting Stendhal","heading":"12.5.2 Run the Tests Using the Eclipse JUnit Plugin","text":"second approach run tests within Eclipse using JUnit plug-Run Configuration. little complicated running tests JUnit first individual coursework, need configure class path database. Instructions can found Stendhal wiki :stendhalgame.org/wiki/Stendhal_on_Eclipse#Running_JUnit_Tests_in_EclipseThese instructions mostly correct, ’ll notice slight changes working newer version Eclipse using. See box details.ℹ️ Note ℹ️version Eclipse using already puts Jars classpath JUnit configuration. can skip step.However, still need add root folder, described. operating systems, won’t find tab labelled “Classpath” Eclipse run configuration wizard. Instead, called “Dependencies”.platforms, click “Classpath Entries” instead “User Entries” add root folder.sure follow instructions carefully, may find test suite run. especially important set class path correctly, include project root folder class path. well allowing classes found run, allows Stendhal server locate XML configuration files contain important details game world, including items, creatures, zones locations.Check Department’s Lab Help Wikiif problems. several pages help specifically working Stendhal code base.⚠️ Caution ⚠️Run Tests Using Ant FirstIf decided run tests JUnit plugin running Ant, may surprised notice significant number errors cropping , causing many tests fail blocked. correct configuration files set able access database forms back-end storage game. Ant build script includes instructions check whether required configuration file exists, create . shows advantage automated build tool like Ant, simple test harness like JUnit.immediately notice benefits running test suite Eclipse Run Configuration, compared running tests Ant. console window, see logger output running tests, can helpful tracking cause failing tests. results tests visible JUnit window, way allows easy navigation test case failure code test.Take look results executing test suite Eclipse JUnit plugin. ’ve set repository tests pass, see green bar JUnit. However, unusual large complex code bases, one test seems failing intermittently platforms. happens team, please report Anas. ’ll supply fix.","code":""},{"path":"starting.html","id":"eclipsej","chapter":"12 Starting Stendhal","heading":"12.5.3 Running Individual Tests Using the Eclipse JUnit Plugin","text":"run configuration ’ve just set allows us execute complete Stendhal test suite. Often, developing, want execute tests within single Java test class, avoid delay involved waiting whole test suite execute.mentioned, larger, complex software system, can’t just right click individual tests Stendhal expect able run “JUnit Tests”, individual coursework. test case needs access game data configured XML files, stored game database, needs class path set root folder project path, example.Therefore, want run tests individual Java test class, create run configuration class, just whole test suite. Remember add Jar files class path (IDE doesn’t already ), project root, allow test cases access data need job.","code":""},{"path":"starting.html","id":"coderunning","chapter":"12 Starting Stendhal","heading":"12.6 Running the Code","text":"final step run code local machine. Note run public version Stendhal game. Instead, must run version built local copy code, connects local copy game database. Otherwise, changes make code visible code run.run local Stendhal, ’ll need set two new run configurations Eclipse, addition run configuration set JUnit tests earlier. One run configurations start Stendhal server running local machine, run client local machine.Help things Eclipse available Stendhal wiki, :stendhalgame.org/wiki/Stendhal_on_Eclipse#Start_StendhalServerstendhalgame.org/wiki/Stendhal_on_Eclipse#Start_Stendhal_ClientThe process straightforward follow instructions carefully, bearing mind slight changes Eclipse interface mentioned set testing configuration. can also check Department’s Lab Help Wiki, problems. ’ve put pages help common errors students make carrying process.ℹ️ Note ℹ️Run Configurations vs Debug ConfigurationsThe instructions Stendhal team suggest create Debug Configurations. Instead, suggest now create Run Configurations. difference run code using debug configuration, Eclipse stop launch built-debugger whenever breakpoint reached, run configuration breakpoints ignored. shouldn’t need use debugger work Stendhal, run configurations appropriate. can always run configurations create debug configurations later, need .","code":""},{"path":"starting.html","id":"saccount","chapter":"12 Starting Stendhal","heading":"12.7 Creating a Local Stendhal Account","text":"run server client, need create account server use manual testing. Use localhost name server connect (since want connect server running machine using, public Stendhal game server). Keep default port number already filled form. can choose username password. stored local database server, won’t need re-enter next time log . (Obviously, } use university username password purpose.)\nFigure 12.1: Create local Stendhal account\nlogin account, sure use localhost server address:\nFigure 12.2: Login local Stendhal account\nuse main Stendhal game server address, connecting local client public version server, running machine outside University, won’t see effects changes made copy code.ℹ️ Note ℹ️Important Note Running StendhalIt necessary coursework run Stendhal true multiplayer mode, public server. necessary set host public server. run local server machine connect manual testing needed coursework. need test feature requires interaction two players, can run two copies client local machine, connecting local server. (good news won’t use network , can run game, test changes, regardless network downtime overloading.)Finally, necessary play Stendhal game complete coursework, necessary take house insurance maintaining software insurance company, x-rayed working software controls medical scanning equipment. ’ll need run game, try specific features, later ’ll look special testing features embedded game allow bypass need anything shortest trial sessions game.","code":""},{"path":"starting.html","id":"knowcode","chapter":"12 Starting Stendhal","heading":"12.8 Getting to Know the Code","text":"can run version Stendhal repository, can try code changes see can see effects run code. examples can try.Can work make Hayunn Naratha, first non-player character meet game, give lots experience points /money talk ? Can change greeting?changing prices items sold Semos city—Carmen, Margaret (Inn) Xoderos (Blacksmiths near Carmen), everything really cheap? get Semos game starting point, leave guard house follow path left.Can change many health points get eating drinking items sold Margaret? make player receive health points faster?suggested approach making changes :Run game see component trying change works. suggested changes based around items characters encounter within first minutes playing game. Don’t try complete quests interactions non-player characters. Just focus seeing specific functionality trying change action.interacting game, note keywords can help locate code looking . Character names, item names location names useful pointers.Use keyword search facility IDE locate candidate files/lines examine. Eclipse, use Search > File Search menu command search keywords occurring anywhere within repository. Hint: remember look configuration files well program code. game’s functionality described Java code.Make changes code, save rebuild. Don’t commit, certainly don’t push changes, just experimenting stage.Run tests make sure haven’t broken anything used work.Shutdown restart local Stendhal server, version running definitely contains changes made.Shutdown restart local Stendhal client, version running definitely contains changes made. Make sure connect local server next log .Go place game made change, see new behaviour expect.’ve worked exercises team, ready get working coursework. Don’t forget undo changes ’ve made experimenting, can start coursework clean version code. (quickest way checkout files changed, overwritten version master branch. Eclipse, can done right-clicking project name Package Explorer view, selecting Replace > HEAD revision option.)ℹ️ Note ℹ️Important Note Open Source CodersThe code base provided coursework public Stendhal project code base. year, make changes suit purposes coursework. year, made quite drastic changes, cope change remote learning.means , interested contributing code Stendhal project, first get clean --date copy actual code base work . bulk code base working , just enough differences mean patch/pull request create might usable (even recognisable useful) Stendhal team.Stendhal dev team welcoming, say happy receive contributions student taking COMP23311. Information contribute can found Stendhal Game website.Good luck!Document version: 04 July, 2022","code":""},{"path":"mentoring.html","id":"mentoring","chapter":"13 Industrial mentoring","heading":"13 Industrial mentoring","text":"Hello, welcome thanks interest software engineering mentoring program. chapter aimed primarily mentors students ’re student course can go ignore bit go straight chapter 14 find mentoring works.’re mentor (potential mentor) read …\nFigure 13.1: outline software engineering mentoring University Manchester. Watch full 13 minute introduction youtu./H3rnYhd5hx8\nshort video explaining software engineering scheme shown figure 13.1 describes:course students, see sections 13.4 13.3employers currently involved, see section 13.8what ask volunteer mentors, see 13.5what mentors get return volunteering, see 13.7how sign , see 13.2","code":""},{"path":"mentoring.html","id":"when","chapter":"13 Industrial mentoring","heading":"13.1 When are the mentoring sessions?","text":"two one hour sessions timetabled, meet team. Please register can make sessions Allotted time:Thursday 21st October 2021 11am BST (GMT+1) London (Zoom)Thursday 18th November 2021 11am GMT London (Zoom)times can guarantee everyone given software engineering team available. Timetabling 400+ students complicated different degree programs different options selected. mentoring sessions rigidly fixed.","code":""},{"path":"mentoring.html","id":"registration","chapter":"13 Industrial mentoring","heading":"13.2 I’m interested, how can I register?","text":"looking around 60 mentors September 2022, registration link appear closer time. oversubscribed give higher priority :returning mentors, employers already supported scheme (see section 13.8)female mentors, women -represented communityBAME minority group mentorsalumni, especially former students done course since 2016local employers, part University’s commitment civic engagement social responsibility","code":""},{"path":"mentoring.html","id":"aboutus","chapter":"13 Industrial mentoring","heading":"13.3 About us","text":"Department Computer Science University Manchester www.cs.manchester.ac.uk one oldest biggest UK. world’s first stored-program computer (“Manchester Baby”) developed 1948, engineers scientists go found Department. followed :first floating point machinethe first transistor computerthe first computer use virtual memoryThis history innovation continues today cutting-edge research projects like SpiNNaker (part Billion Euro Human Brain Project) built million core ARM-powered neural High Performance Computer (HPC). world’s largest neuromorphic supercomputer.recent government ranking research across UK, School ranked 4th UK (based GPA), assessed best environment UK computer science informatics research. Since awarding first undergraduate degrees Computer Science 1965, school awarded 10,000 degrees Computer Science Bachelors, Masters Doctoral level. students sought employees, active (successful) taking part major coding competitions hackathons.2022, entry tariff * * * * Maths, minimum one Science subject *. second year course, students already experience programming Python Java first year undergraduate study, see section 0.3.1.can find mentoring business engagement activities www.cs.manchester.ac.uk/connect/business-engagement/industrial-mentoring/","code":""},{"path":"mentoring.html","id":"thecourse","chapter":"13 Industrial mentoring","heading":"13.4 About the course","text":"volunteer, course unit support second year compulsory course Software Engineering 1 (COMP23311). year-long course unit taken students undergraduate programmes followed Software Engineering 2 (COMP23412). course focusses skills expertise needed able work large body open source code. Students gain experience offixing bugs code written peoplewriting automating tests using test first developmentadding new features code without breaking existing functionalitymaking larger scale architectural changes improve non-functional properties system…keeping system running users.2021/22 academic year, cohort 400 students taking Software Engineering. working small teams around 7 students undertake team-based coursework assignments across semester, final examination summer.well learning academic discipline software engineering, students take course unit gain key employability skills, prepare interviews industrial placements graduate positions, allow hit ground running start work.","code":""},{"path":"mentoring.html","id":"mentoringscheme","chapter":"13 Industrial mentoring","heading":"13.5 About the Mentoring Scheme","text":"mentor, asked meet team students twice, work team students around hour time using Teams/Zoom. visits take place specific weeks, time teams scheduled working Software Engineering coursework, see section 18. dates/times visits described section 13.1. sessions fifty minutes long.","code":""},{"path":"mentoring.html","id":"agenda","chapter":"13 Industrial mentoring","heading":"13.6 Meeting agenda","text":"quick round introductions, suggest following questions may useful structuring meeting:","code":""},{"path":"mentoring.html","id":"teambuilding","chapter":"13 Industrial mentoring","heading":"13.6.1 Getting to know your team","text":"Questions get know team:degree programme studying?ideas career?interests computers/building software?thinking industrial year, summer placement?largest piece software built/worked far?","code":""},{"path":"mentoring.html","id":"challenging","chapter":"13 Industrial mentoring","heading":"13.6.2 Challenging and guiding the team","text":"Questions challenge guide team:working moment?coordinating work within team?sorts challenges facing moment?team working issues faced far?divide work team members?think team performing? know?target meet next deadline? yes, know ?","code":""},{"path":"mentoring.html","id":"studentqs","chapter":"13 Industrial mentoring","heading":"13.6.3 Questions the Students Might Ask Mentors","text":"Questions mentor:Can give brief overview career point?get job today?enjoy current role?anything surprised working industry compared student?Questions team-work:resolve technical disagreements development teams?deal personality clashes within team?encourage people recommit team?One team members isn’t contributing. happen industry? resolve problems?Questions process developing software:processes/methodologies use company?software tools use ?process use release software company?code review practices use?makes good commit message?good test look like?big software system working now?techniques use working code written people?can avoid getting mess using Git (version control systems)?’re lot trouble fixing bug/making change? struggle ? go dealing sort problem?Questions employability:skills need competitive job applications?skills look hiring people?know now wish ’d known student?current trends software development?--coming topics recommend know ?can make CV stand applying placements/jobs?","code":""},{"path":"mentoring.html","id":"payback","chapter":"13 Industrial mentoring","heading":"13.7 What do mentors get in return?","text":"several benefits employer mentor:Increasing visibility employer organisation makes high quality softwareShare knowledge expertise: employers often complain students taught better, chance improve quality teaching prepare students workplace making aware realities modern software engineeringCareer development: opportunity junior software engineers demonstrate leadership mentoring skillsDigital badge: ’re offering signed digital badges micro-credentials thank volunteer mentorsFun: Many mentors enjoy experience working young people take big software engineering project, often first time","code":""},{"path":"mentoring.html","id":"thanks","chapter":"13 Industrial mentoring","heading":"13.8 Who are the mentors?","text":"like thank collaborators, partners industry club members helped us date including:Airbus, Digital, Apadmi, ARM, Auto Trader UK, Barclays, BBC, Bet365, Beyond Trust, Biorelate, Blaize, Bloomberg, Booking.com, Brightec, CERN, CDL Software, CodeThink, Code Computer Love, Cubic Motion (now Epic Games), DAI, DataCentred, Digital Bridge Ltd, Disney Streaming, EGN Digital, Facebook, Farm Digital, Giant Digital, Goldman Sachs, Google, IBM, Interact Software, Ivanti, Koder.ly, Matillion, Microsoft, Morgan Stanley, NCC Group, Beach, Peak.ai, Rental Cars, Sainsburys, Sage Group plc, Shout Platform Limited, Siemens (Mentor Graphics), SKY, Slalom, Spotify, SteamaCo, Startup Factory, THG, ThoughtWorks, Tranzfar, UK Parliament, UL, Unipart Digital Zuhlke.Thanks also 1,500 students taken course since inception 2016 given us feedback improve .Document version: 04 July, 2022","code":""},{"path":"ourmentor.html","id":"ourmentor","chapter":"14 Your mentor","heading":"14 Your mentor","text":"mentor professional software engineer one employers listed : Airbus, Digital, Apadmi, ARM, Auto Trader UK, Barclays, BBC, Bet365, Beyond Trust, Biorelate, Blaize, Bloomberg, Booking.com, Brightec, CERN, CDL Software, CodeThink, Code Computer Love, Cubic Motion (now Epic Games), DAI, DataCentred, Digital Bridge Ltd, Disney Streaming, EGN Digital, Facebook, Farm Digital, Giant Digital, Goldman Sachs, Google, IBM, Interact Software, Ivanti, Koder.ly, Matillion, Microsoft, Morgan Stanley, NCC Group, Beach, Peak.ai, Rental Cars, Sainsburys, Sage Group plc, Shout Platform Limited, Siemens (Mentor Graphics), SKY, Slalom, Spotify, SteamaCo, Startup Factory, THG, ThoughtWorks, Tranzfar, UK Parliament, UL, Unipart Digital Zuhlke.mentor meet team twice Zoom mentoring sessions Thursdays. can help understand ’re learning course relates software engineering real world. can guide process politics software engineering project.Mentors volunteered time help , make sure ask lots questions, suggested questions shown section 13.6.3 need inspiration.makes mentors job lot easier turn camera , see section 0.9","code":""},{"path":"ourmentor.html","id":"hellomentor","chapter":"14 Your mentor","heading":"14.1 Introducing your team","text":"mentor get meeting introduce team beforehand. requires one collates team information emails mentor meeting. suggest following example template:(optionally) add information help mentor get know :","code":"from: flo.ting-point@student.manchester.ac.uk\nto: $mentors-email\ncc: neil; pen; peter; marge; polly; etc\nsubject:  Hello from Team X at the University of Manchester\n\n\nDear $mentors-name (or $mentors-names)\n\nWe'd like to introduce ourselves before our team meeting.\n\nWe are team $team-number\n\nOur team members (modify as needed) include:\n\n* neil.pointer@student.manchester.ac.uk\n* pen.tester@student.manchester.ac.uk\n* peter.byte@student.manchester\n* marge.conlict@student.manchester.ac.uk\n* rick.urshion@student.manchester.ac.uk\n* polly.morphism@student.manchester.ac.uk\n* etc\n\nWe look forward to meeting you on $date at $time on Zoom.\n\nBest wishes\n\nFlorence Ting-Point\n(On behalf of team X)\nUniversity of Manchester\nOur team members (modify as needed) include:\n\n* neil.pointer@student.manchester.ac.uk likes C\n* pen.tester@student.manchester.ac.uk likes cybersecurity\n* peter.byte@student.manchester likes big data\n* marge.conlict@student.manchester.ac.uk likes version control\n* rick.urshion@student.manchester.ac.uk likes functional programming\n* polly.morphism@student.manchester.ac.uk likes O.O.P.\n* etc"},{"path":"ourmentor.html","id":"dontcare","chapter":"14 Your mentor","heading":"14.2 But I’m not interested in employer x?","text":"lucky, mentor employer \\(x\\) just happen working role sector interested .’re , can still learn lots . Software engineering converging standard practices means can learn huge amount mentors, even ’re especially interested employer work .way high quality software built different industries remarkably similar, banks technology companies e-commerce companies consumer electronics.Document version: 04 July, 2022","code":""},{"path":"syncing.html","id":"syncing","chapter":"15 Synchronising","heading":"15 Synchronising","text":"’re working team, need synchronise team repository.","code":""},{"path":"syncing.html","id":"syncintro","chapter":"15 Synchronising","heading":"15.1 Introduction","text":"activity, ’ll take process synchronising local Git repositories fellow team members pushed new commits remote. team activity, work together team study session.\nactivity:One team member make commit local repository.team member push commit team repository.Everyone else fetch commit local repository.Everyone else synchronise local branches remote tracking branches.document guide steps needed achieve goals, explaining core Git concepts go.instructions assume one yet pushed commits team repository. ’s case team, ’ll need carry steps 3 4 getting started instructions. Check Commits page GitLab project find commits made since repository created.","code":""},{"path":"syncing.html","id":"locommit","chapter":"15 Synchronising","heading":"15.2 Making a Local Commit","text":"Choose one team member make push commit. person share screen team members, observe make notes process, giving feedback suggestions needed.’re going make change following file:file empty present, important function us developers code base. username Stendhal player added file, player becomes administrator game, access lots capabilities ordinary players don’t . capabilities important replicating issues testing changes need make game, without actually play game long periods.capabilities available admin level players described Stendhal wiki stendhalgame.org/wiki/Stendhal:AdministrationYou familiarise main ones, can use testing code changes game.first step making change code base version control decide commit made. commit going make small self-contained change needed everyone team. , going make commit directly onto main development branch. Obviously, change complicated affected files, want first make change feature branch. simple Git workflow Stendhal team use allows commits development branch, commit small simple. importantly, change program code system; can’t introduce compile errors change seems unlikely cause existing tests fail. therefore probably safe make directly onto development branch, provided check effects change carefully committing pushing.begin checking correct branch: master branch. done correctly, see name branch next project name Package Explorer view.commit set admin level players team wants, editing admins.txt file. Git Staging View3, enter description commit make commit message:Now ’ll prepare code change become commit.Every team member need access admin level player test server, need use admins.txt file checked team repository. need decide strategy now. can one following:Add one user name admins.txt file (‘testplayer’). Everyone must create player username local server testing. ,Everyone tells person making commit preferred admin user name, names added admins.txt file now. file formatting one name line, punctuation surrounding . Everyone creates player one names local game server testing.created admins.txt file fits team’s requirements, save .next step run test suite, build process, check change broken something unexpected. tests pass (, least, new failing tests appeared) can go ahead make commit.admins.txt file now appear “unstaged change” Git Staging View. Drag “staged changes” box (taking care leave files may changed “unstaged changes” — related commit, don’t want included ). Make commit (push stage).\nFigure 15.1: main eclipse window look something like \nWARNING\nDon’t forget check code compiles tests pass committing code changes. haven’t made changes Java source code commit, made changes configuration information potentially cause part build process tests fail. , still important run build test check making commit.Remember commit broken code team repository, team members fetch errors local repository, build test process affected branch . development branch, can cause lot extra work whole team, done last minute release may even break code customer sees (, case, affect team mark). , good idea get habit checking build test results regularly, always making commit.","code":"/data/conf/admins.txtSet up admin player for manual testing by dev team"},{"path":"syncing.html","id":"pushing","chapter":"15 Synchronising","heading":"15.3 Step 2: Pushing the Commit to the Team Repository","text":"next step check commit looks okay viewed context project history. Right click Stendhal project name Package Explorer view select Team > Show History. see something like figure 15.2\nFigure 15.2: setup look something like \nClick commit just created check right files changes included. see small commit master branch changes admins.txt file.Let’s compare state repository team’s remote repository GitLab stage. web browser, view team’s GitLab project. Use Repository > Graph option menu left hand side see commit graph. look something like figure 15.3\nFigure 15.3: gitlab repository (gitlab.cs.man.ac.uk) look something like .\ncan see team’s project now lagging behind state local repository commit made. doesn’t yet new commit. reflected History view Eclipse, position master branch remote repository origin/master shown parent commit one just made.Remote Tracking BranchesThe origin/master branch special kind branch called “remote tracking branch”. normal branch use development. Instead, role remember positions branches remote repository. two master branches play : master branch developer’s local repository master branch remote repository. time branches point commit, lot time pointing different commits. can’t use one branch represent ; need one branch local repository position another track position branch remote repository. Hence name: remote tracking branch.Remote tracking branches easily identified commit graphs name remote repository prepended . case, remote uses default name origin, remote tracking branch master branch team repository origin/master.Eclipse colours branches grey History view, indicate present information us actively work . check remote-tracking branch, ’ll see treated Detached Head checkout: won’t able move position branch forward making commits .happy commit contents location commit graph correct, can go ahead push code team remote repository. Right click project name select Team > Push Branch 'master'... menu. Use Preview check Git going expect (push one commit just made), make Push. Eclipse confirm results operation, can Close window.commits made team repository since created, push succeed.good habit check changes reached team repository, look expect. Refresh commit graph page team project GitLab. now look graph History view, shown figure 15.4\nFigure 15.4: commit graph look something like \ncan also check History view Eclipse, see remote-tracking branch master now moved forward match position local master branch. tag marks starting point coursework (shown yellow Eclipse History view) unaffected changes made remains original location.","code":""},{"path":"syncing.html","id":"fetching","chapter":"15 Synchronising","heading":"15.4 Step 3: Fetching the New Commit from the Team Repository","text":"remaining steps carried team members. person made commit changed admins.txt file just observe point. Perhaps one team member carrying steps share screen part activity.stage, commit exists team repository local repository person made commit, yet exist local repositories team members. need synchronise local repositories team repository, can see build work team members.Synchronising repository remote repository requires two basic steps:First, bring commits branches appeared changed remote since last synchronised local repository.integrate work local repository work colleagues ’ve just fetched repository.’ll carry first steps now.Bring History view project IDE, open commit graph view project GitLab. (GitLab commit graph look screenshot end instructions Step 2.) compare two commit graphs, see additional commit GitLab don’t repository — commit adds admin players. see master branch “behind” position master branch remote repository shown figure 15.5.\nFigure 15.5: commit graph look something like \nPackage Explorer view, find open data/conf/admins.txt file. empty. changes made team mate yet visible .Now ’re going “fetch” new commits branch/tags remote repository. Start checking master branch. , right click Stendhal project name Package Explorer view, select Team > Fetch origin. see dialogue box summarising commits brought repository confirming fetch operation succeeded like one shown figure 15.6\nFigure 15.6: fetch results dialog box\nHistory view also updated show results fetch operation. now look something like figure 15.7.\nFigure 15.7: updated History view showing results fetch operation\ndon’t see commit graph, make sure selected option “Show branches tags”4. don’t select option, ’ll see history visible currently checked branch (case, master branch) commits happened .Notice new commit now present local commit graph. , master branch moved include . Instead, remote tracking branch called origin/master moved point new commit, whereas previously commit master branch. fetch operation gave Git chance update position remote tracking branch, match current position remote repository.Note remote tracking branch tracks position branch remote repository time last asked state remote: , time last fetch push operation. Remote tracking branches magic — don’t always follow position branch remote whenever changes made . whenever synchronise repository state remote, remote tracking branch updated.never try check make changes position remote tracking branch. make commits local branch, position branch moves forward point new commits without us ask. position remote tracking branch move changes made remote repository. Similarly, try reset position remote tracking branch, merge commits branches . Leave Git keep position updated, concentrate controlling position local branches. ones record state work .","code":""},{"path":"syncing.html","id":"inc","chapter":"15 Synchronising","heading":"15.5 Step 4: Incorporating the Commit into Your Local Branch","text":"Now need integrate changes just brought remote local branches, can build top work team mates code changes.case, means need get local master branch point commit remote tracking branch, can see new commit make changes code base includes change makes (specification new admin player).haven’t yet added commits ourself master branch, process easy5. can just use merge operation. Git merge used bring changes one branch another. always changes branch checked . master branch checked out6 ’s branch change position result merge.Next need work branch contains code changes (commits) want include checked branch. case, want bring changes origin/master branch local master branch. , right click commit labelled origin/master select Merge operation.sounds like contradiction earlier instructions regarding merges remote tracking branches, worth noting Git merge operations involve two branches, one branches changed merge. , local master branch checked , branch change. branch involved merge left unchanged ., suggesting merge remote tracking branch local branch completely consistent earlier advice try change position remote tracking branches. merges change position remote tracking branch problematic.case, merge operation simple one: Git just move master branch forward along chain commits reaches place origin/master. kind merge called “fast forward merge”, quick Git (just changes commit master branch points , rather actual mucking creating new versions code base) involves moving branch forward along chain commits.History view now look something like figure 15.8.\nFigure 15.8: commit graph look something like \nNotice two versions master branch now commit, also checked commit. look contents data/conf/admins.txt file, see changes made team mate now included. start work commit, ’ll building top changes made colleague.point, beginning make changes , check code can built tests run. find problem, track author commit introduced error work correct . ’ll need run whole process , fix can get copied everyone’s local repository.","code":""},{"path":"syncing.html","id":"finalword","chapter":"15 Synchronising","heading":"15.6 A Final Word","text":"illustrates basic workflow use project, except making changes feature branches rather master branch. basic steps . branch names change.find whole process collaborative coding using Git goes smoothly get habit synchronising code base team remote regular basis. means carrying steps 3 4 described document. synchronise code base whenever start work code day, whenever create new feature branch, whenever push work remote (importantly) whenever integrate work feature branch development branch.course, activity, covered simple synchronisation scenario. team begins push code remote, ’ll quickly encounter scenarios simple approach described document doesn’t work. involved scenarios (handle ) described chapter 21 “Integrating Commits Team’s Commits”.Good luck!Document version: 04 July, 2022","code":""},{"path":"gitting.html","id":"gitting","chapter":"16 Individual Coursework 1","heading":"16 Individual Coursework 1","text":"","code":""},{"path":"gitting.html","id":"introcw1","chapter":"16 Individual Coursework 1","heading":"16.1 Introduction","text":"first piece coursework COMP23311 individual exercise designed help warm Git Java skills long summer holidays, ready collaborate team team-based coursework. takes simple Git workflow ’ll using team coursework later semester introduces basic Java testing debugging concepts. ’ll carry following steps:Clone GitLab repository.Compile code run .Test code using automated test suite reveal bug.Make new branch repository.Fix bug see tests pass.Commit fix repository.Merge branch development branch.Push changes remote repository.Update issue tracker record project status.Detailed instructions carrying tasks within Eclipse IDE given document. focus Eclipse IDE used team coursework. free use IDE wish carry individual coursework exercise, can currently provide instructions technical support Eclipse.exercise completed, ready use workflow team’s repository first team coursework exercise.Trouble-shooting: experience problems completing exercise, can find trouble-shooting guide Department’s wiki :wiki.cs.manchester.ac.uk/index.php/LabHelp:Main_PageWe’ve provided two indexes trouble shooter, help find way around. One index error messages:wiki.cs.manchester.ac.uk/index.php/LabHelp:ErrorsIf specific error message reported alongside problem experiencing, can look index, find suggested solutions worked students problem past.second index contains descriptions general symptoms:wiki.cs.manchester.ac.uk/index.php/LabHelp:SymptomsUse index something going wrong specific error message help track cause problem.Please report problems encounter covered troubleshooter, giving details specific error messages screenshots appropriate. can report problems course unit forum (Piazza) Live Help Queue Team Study Sessions. ’ll best help!","code":""},{"path":"gitting.html","id":"about","chapter":"16 Individual Coursework 1","heading":"16.2 About the Coursework","text":"","code":""},{"path":"gitting.html","id":"key","chapter":"16 Individual Coursework 1","heading":"16.2.1 Key Information","text":"exercise marked 10, count towards 10 percent total mark course unit.deadline exercise 6.00pm, Friday 1st October 2021You’ll submit work private GitLab repository. created , visible personal project list GitLab web interface atgitlab.cs.man.ac.ukAt deadline, ’ll make clone repository run automated marking code. just make sure pushed Git branches commits GitLab repository , make comment issue tracker let us know work ready mark. additional submission steps.","code":""},{"path":"gitting.html","id":"submission","chapter":"16 Individual Coursework 1","heading":"16.2.2 Submission Procedure","text":"submit work marking, must add comment coursework issue issue tracker project, saying:Project ready marking.time submission time comment added repository.exact phrase present comment coursework issue deadline, assume ready submit work ’ll get mark 0.may delete re-add comment many times like formal deadline coursework. work marked, ignore changes issue tracker; possible request marking second time marking project complete feedback uploaded issue tracker, even deadline yet passed.changes repository made final eligible marking request comment ignored marking process. make sure definitely finished work, add comment, especially submitting deadline.","code":""},{"path":"gitting.html","id":"markingscheme","chapter":"16 Individual Coursework 1","heading":"16.2.3 Marking Scheme","text":"coursework exercise consists 9 steps. complete correctly, earn full marks marking scheme shown table 16.1.Table 16.1: Mark scheme first piece individual courseworkNote can mark work present GitLab repository, earlier steps involve work local Git repository. won’t able see work get final step, push commits branches GitLab repository. reach deadline steps incomplete, want us mark work done, ’ll need jump forward step 7 work much can deadline allow .","code":""},{"path":"gitting.html","id":"prov","chapter":"16 Individual Coursework 1","heading":"16.2.4 Pre-Deadline Feedback","text":"give chance see well understood applied principles underlying coursework exercise, run marking code little ahead deadline, generate provisional marks feedback work completed time. feedback provisional mark appear GitLab issue tracker coursework repository.provisional marking take place Tuesday 28th September 2021, 6.00pmYou 3 days make corrections final marking process takes place, shortly coursework deadline Friday.don’t anything specific request provisional marking. mark repositories time, provide feedback can based whatever work done point.","code":""},{"path":"gitting.html","id":"late","chapter":"16 Individual Coursework 1","heading":"16.2.5 Late Submissions","text":"coursework uses University’s standard policy marking work submitted late.penalty 1 mark applied 24 hour period following deadline work late, total 10 periods. Note purposes calculation, weekends evenings counted. means , since coursework’s deadline Friday, submission following Monday morning receive penalty 3 marks.penalties applied marks earned student removed. Marks go zero.Work submitted 10 calendar days deadline considered non-submission given automatic mark 0. discretion course leader Department, may able give mark work achieved submitted late, along feedback explaining . Contact course team leader want discuss possibility .coursework, submission time date time place comment saying work ready marking issue exercise. work pushed GitLab date marked. commits references pushed GitLab marking requested considered marking, even created modified local Git repository .initial deadline passed, ’ll running automated marking software every couple weeks. , may delay receiving mark feedback late submission.","code":""},{"path":"gitting.html","id":"plagiarism","chapter":"16 Individual Coursework 1","heading":"16.2.6 Plagiarism","text":"coursework subject University’s standard policy plagiarism:wiki.cs.manchester.ac.uk/index.php/UGHandbook21:Academic_Malpractice","code":""},{"path":"gitting.html","id":"help","chapter":"16 Individual Coursework 1","heading":"16.2.7 How to Get Help","text":"Help exercise available two team study sessions week deadline submission. Team study sessions scheduled Tuesdays 10.00am Thursdays 11.00am. Since team coursework yet started, sessions run clinic basis: need turn need help individual coursework. GTAs academic staff available provide help advice.See Blackboard online.manchester.ac.uk details access sessions joining online.Help also available Piazza discussion forum piazza.com/class/ku382xdryxd644","code":""},{"path":"gitting.html","id":"instructions","chapter":"16 Individual Coursework 1","heading":"16.3 The Coursework Instructions","text":"","code":""},{"path":"gitting.html","id":"starteclipse","chapter":"16 Individual Coursework 1","heading":"16.3.1 Step One: Start Eclipse","text":"First need run Eclipse (IDE chosen use activity, using different one). working home, use VM provided department.Start 2020-03. command line, done typing:can also find Applications menu, Programming.first time run version Eclipse, prompted create select workspace. just folder Eclipse projects live. Choose default offered, use file browser choose location prefer make folder appropriate name (EclipseProjects). can make workspace contain projects relating COMP23311, COMP23311WorkspaceOnce told Eclipse workspace want use, Eclipse load.first time accessed workspace, see Welcome view, giving links tutorials using Eclipse. Click cross tab remove . now see basic Eclipse window, default code views opened ready used.","code":"/opt/eclipse-2020-03/eclipse"},{"path":"gitting.html","id":"clone","chapter":"16 Individual Coursework 1","heading":"16.3.2 Step Two: Clone a GitLab Repository in Eclipse","text":"next step activity ask Eclipse clone required GitLab repository, import contents Java project.Choose File > Import menu option.wizard appears, select Git > Projects Git option click Next.two ways import project Git. can import local Git repository clone remote repository. ’re going work project currently stored remotely GitLab, select Clone URI list options click Next.form appears, need enter URI remote repository want Eclipse clone. Eclipse fill fields, using components URI. activity, clone repository URI:https://gitlab.cs.man.ac.uk/COMP23311_2021/sliding_puzzle_<-username>.gitwhere <-username> replaced University username. personal repository set just use , activity. students can see contents (though course team GTAs can see ).⚠️ Caution ⚠️\nNote URI need give cloning remote Git project URL GitLab page describing project, even using HTTPS protocol. Make sure right URI checking one given project’s main GitLab page, via Clone button. end string .git.URI entered, Eclipse fill fields . (doesn’t happen, ’s likely something went wrong copying link text pdf. Try copying directly values given Clone button GitLab page project, instead. still getting error, get help one team study sessions.)Click Next. Eclipse connect GitLab authenticate connection. Since using HTTPS access protocol , need enter University username password point. (also given option save details, don’t need enter .)Aside Protocols: GitLab can authenticate two protocols, HTTPS SSH. previous academic years, ’ve found HTTPS protocol stable lab machines, present expect protocols work well students VM asked use coursework, machine directly, Eclipse IDEs.set SSH key machine using uploaded GitLab account, want use SSH protocol coursework, just copy paste SSH URI repository Repository URI field place HTTPS URI. Note must also tick checkbox labelled Accept store key, continue connecting? SSH connection work.Information GitLab SSH setup within Department, including create register PGP key GitLab server, can found Department wiki pages:wiki.cs.manchester.ac.uk/index.php/Gitlab/Git_SetupAfter entered correct login details, Eclipse fetch information remote repository. ask branches might want work cloned repository. fact, branches included clone regardless select . Eclipse create local versions branches select (-called remote tracking branches), addition branches already present remote.one branch repository (master branch) one working . ensure branch selected, figure 16.1, click Next.\nFigure 16.1: Selecting branch\nEclipse now ask want clone repository located (.e., folder file space want put ). can located anywhere like file space. common convention folder home directory, called git, local Git repositories live. folder, ’ll need create folder inside , hold repository . , might request clone placed somewhere like :choosing creating suitable location clone, click Next.point, Eclipse issues commands create local clone remote repository folder selected . (need enter login details point, save earlier, Eclipse can send another request GitLab system.) Eclipse also checks branch selected, folder selected, also see src folder, test folder configuration files Eclipse folder created, viewed file browser command line.next step Eclipse import checked-files (repository) Eclipse project can work IDE. Ensure ‘Import existing projects’ selected shown figure 16.2, press Next.\nFigure 16.2: Import existing Eclipse projects\nwizard looks existing Eclipse projects cloned repository. finds just one project (hopefully, many put ) need make sure selected, press Finish.\nFigure 16.3: Selecting Eclipse Project import\nproject now imported, visible Package Explorer View (left figure 16.4 along projects may created workspace. can double-click project see contents.\nFigure 16.4: Eclipse project loaded visible package explorer\n","code":"/git/sliding-puzzle-activity"},{"path":"gitting.html","id":"bugid","chapter":"16 Individual Coursework 1","heading":"16.3.3 Step Three: Identify the Bug","text":"web browser, open GitLab page repository created exercise go issue tracker (using menu left). see single open issue. issue describes bug within program going fix.first task see can replicate issue within program . launch puzzle, find Puzzle class Package Explorer view: located :package within src folder. Right click , choose Run > Java Application. game now appear window screen.game simple 8-tile sliding puzzle goal get tiles ascending order, left right, top bottom. Tiles can moved adjacent free space. Players click tiles move space. game changes outlines tiles bright green game finished.Play around puzzle see can replicate bug issue describes. done, close program return Eclipse continue bug fixing process.code base working follows common (useful) convention making clear separation test code production code (, code actually implements functionality needed client). contains two source folders. one called src contains production code, test source folder contains test code.ℹ️ Note ℹ️\nsource folder Eclipse simply folder build path project. case Java project, like one, means folder Java class path. Java classes methods stored within folders build path found Eclipse Java compiler executed code run. Eclipse uses special folder icon small package symbol overlaid , distinguish source folders ordinary folders.orange drum symbol indicates file folder version controlIf double-click test folder, open show contents: two packages. packages contain single class .Double-click MouseInteractionTest class open Editor. see something like figure 16.5:\nFigure 16.5: Viewing test code\nclass contains 5 JUnit test case methods, testing slightly different aspect program. separate document, available Blackboard, explains test cases written JUnit. work document starting team coursework, now, just going see run tests Eclipse.several ways run JUnit test suite Eclipse, depending complexity program working . simple project, can just right click name test class Package Explorer view, choose Run > JUnit Test menu appears. new view containing test results appear, alongside Package Explorer. ’s bit cramped , can’t see much telling us. Double-click tab JUnit view expand fill Eclipse window. see something like figure 16.6\nFigure 16.6: running tests see fail\nsystem, three tests passed (labelled green tick) two failed (labelled blue cross). tests give indication classes responsible bug. bar top view red, showing tests failed. good practice keep tests passing, possible, next step make changes code, make tests pass. Hopefully, also fix bug game.Double-click tab JUnit view , restore earlier position allow us see Eclipse views .","code":"uk.ac.man.cs.puzzle"},{"path":"gitting.html","id":"createbranch","chapter":"16 Individual Coursework 1","heading":"16.3.4 Step four: Create a Branch for Your Own Changes","text":"’re going make simple change project, commit Git repository. course unit, ask use simple Git workflow, called Feature Branches. workflow uses separate Git branches hold changes initially, multiple developers can work code time without interfering one another changes one developer can checked correctness merged main development branch. , make changes, create feature branch local Git repository.Eclipse, right click name sliding-puzzle project Package Explorer view. menu appears, select Team > SwitchTo > New Branch. Eclipse asks give branch name.Branch names describe functional change branch contain. ’re going make change fix failing tests related mouse interaction, call new branch mouse-interaction-fix.Enter exact name (without quotes) dialogue box branch name. Make sure Check new branch option selected press Finish.⚠️ Caution ⚠️\nuse automated process mark exercise, order provide feedback errors quickly start work team coursework. , important use exact text given name branch, ensure automated process can find mark work.Eclipse now ask Git make new branch local Git repository, name given. command creates new branch whatever commit previously checked . case, checked master branch, new branch created commit master.branch created, Eclipse checks contents, become visible package explorer. Since new branch commit already contents project look exactly . important difference, though, changes now make files folders appear branch just created. contents branch remain original state.One difference see, however, new feature branch now appears annotation next project name Package Explorer view. annotation (square brackets) shows repository name branch currently checked .\nFigure 16.7: creating branch note annotation change package explorer\ndon’t see , something gone wrong. can’t work , can get help staff GTA one team study sessions exercise.ℹ️ Note ℹ️\nTeam MenuMost Eclipse commands interacting Git come Team menu used create new branch. can explore around various options see Eclipse allows Git repository.","code":""},{"path":"gitting.html","id":"commitnew","chapter":"16 Individual Coursework 1","heading":"16.3.5 Step five: Commit a Change to the New Branch","text":"Next, ’re going make change one files project, commit new branch. Eclipse provides number views commands help making commits Git repository. One useful Git Staging view. open , select following option menus top Eclipse window:Window > Show View > > Git > Git StagingA new view name now appear. Notice box right message associate commit make. good practice write commit message begin make code changes. helps us think change make, helps keep commits small focussed. case, please add following text Commit Message box Git Staging view:view look like figure 16.8.\nFigure 16.8: Git staging view changes comment\nNote , present, “Unstaged changes” “Staged changes” boxes empty. (yet) changes made.’re going something now!next part exercise, need identify bug production code: , files src folder. Use information provided failing tests point right direction. JUnit also gives trace tests fail. can viewed clicking tests labelled blue cross JUnit view. can double click test, ’ll taken directly point test failed Editor view.think identified part code causing bug, correct save file (using floppy disk icon toolbar standard Ctrl-S shortcut). notice soon changes saved, file appears Git Staging view unstaged change.Figure 16.9 illustrates file appearing unstaged change different issue one working . (Obviously, can’t show screenshots change fixes bug working , give answer exercise away.)\nFigure 16.9: unstaged changes showing staging view\ncommitting change, important check tests now pass. Run tests check fixed bug, haven’t introduced problems. correctly fixed bug, tests pass, test packages, see green bar JUnit window shown figure 16.10\nFigure 16.10: JUnit view\ntests pass, run puzzle check now behaves intended. tests keep failing, puzzle still isn’t working , can’t find problem, ’ll need come one team study sessions get help staff GTAs.code compiles, passes tests, puzzle runs expected can commit changes local Git repository. tell Eclipse change ’ve made included commit, drag file ‘Unstaged Changes’ box ‘Staged Changes’ box Git Staging view. Figure 16.11 illustrates look different change one making.\nFigure 16.11: Stage changes now tests pass\nmaking commit, need check Git configured correctly machine working , assigns correct author committer information commits. make use lot automated marking code course unit. code able find commits configured Git correctly.Git use values set user.name user.email parameters set author/committer details commits. commits pushed GitLab, GitLab server tries guess project member made commits, using information. , commits still exist linked GitLab user. make much harder automated marking tools find work. make sure get credit work , please take care configuring Git machines code .check Git configured correctly machine, look Author Committer information Git Staging view. show correct name (importantly) University e-mail (ending domain student.manchester.ac.uk, brackets quotation marks) everything okay. , need exit Eclipse reconfigure Git using information Department wiki:wiki.cs.manchester.ac.uk/index.php/Gitlab/Git_SetupWhen re-enter Eclipse, correct author committer details shown.⚠️ Caution ⚠️\nname e-mail shown correctly Author Committer fields, may tempted edit directly Eclipse, rather fixing Git configuration. fix problem far one commit concerned, ’ll need remember make change every commit make course unit.particular problem team-based coursework, way marking systems know made commits can find ones linked GitLab account. GitLab uses author e-mail address commits link account e-mail address. Students commits linked GitLab account exercise automatically receive mark 0. Therefore, ’s really important take time now configure local Git installation correctly now, avoid losing marks future.Now can press Commit button. Important: push commit time. Just make commit.asking push commit stage? good idea, especially new Git, commit changes locally first, can check push remote Git repository. general, easy fix Git errors local repository. much harder fix problems pushed public team repository, pulled team mates’ local repositories. Getting habit checking commits pushing can save lot time, frustration embarrassment future, well sparing team mates losing marks due error., anything else, ’re going check commit went expected. quick easy using Git History view. bring , right click project name Package Explorer, select Team > Show History. see new view appear next Staging view. ’s bit small, figure 16.12 shows effect double-clicking view tab, make fill screen.\nFigure 16.12: check commit history view\nview shows history commits visible currently checked commit. shows branch one commit ahead local master, well master branch remote repository (called origin/master origin default name remote repository). history view also tells us branch currently checked , bolding name branch (also putting label HEAD next ).looks okay, go ahead push changes remote. , take look network remote repository GitLab shown figure 16.13\nFigure 16.13: Screenshot showing gitlab pushing\nsee master branch original lone commit. changes made local repository , yet, present remote (therefore visible collaborators may project).Now push changes, right clicking project name, selecting Team > Push origin menu appears. available, may also Team > Remote > Push , ensure details correct dialogue box, click Next. Whenever perform remote operations, like push, Eclipse need GitLab credentials. didn’t save earlier, ’ll asked provide point.point, may asked configure repository pushing. sounds complicated fact simple. Git just asking tell can map local branches remote branches. Click Advanced. see dialogue appear figure 16.14\nFigure 16.14: Configure push dialog\nPress “Add Branches Spec button middle dialogue. add default ref specs (reference specifications) repository. Select “Finish”. repository now configured push.asks Git push, Eclipse give summary push ask confirm want go ahead, looking something like dialogue shown figure 16.15\nFigure 16.15: Confirmation push remote dialog\nPress OK initiate push.push successfully completed, look contents History View. Can see changed, result push?also look commit graph remote repository. changed since looked push operation?ℹ️ Note ℹ️rule thumb, commit working code. means: code compiles passes tests. especially embarrassing push code compile errors team’s repository. Remember check push!","code":"Fix bug with wrong tiles sliding on mouse click"},{"path":"gitting.html","id":"mergechanges","chapter":"16 Individual Coursework 1","heading":"16.3.6 Step six: Merge your Changes","text":"Git workflow use exercise, development branch called master.change code base tried feature branch (passes tests), can incorporate main development branch, (pushed) team members can see build top .called merging.case, want merge changes feature branch master branch. Git merge commands works bringing changes currently checked branch. need start checking master.can switch branches easily History view. Just right click commit want check (one labelled master branch case), select Checkout.Eclipse notice two branches commit want check . ask one want check . case, local version master branch origin/master, branch tracking contents master branch GitLab remote. (Broadly speaking, never check remote-tracking branch.)Select local branch (refs/heads/master) click OK.checkout completes, contents History view change. look now commit mouse-interaction-fix branch deleted, along branch . Don’t worry—commit still . default, History View shows commits reachable checked branch, now master—parent commit just made. Note also master now shown bold text, HEAD label also moved commit: signs checked commit.Now can go ahead make merge. Merging tricky part Git, easy make mistakes. ’re going merge local repository first, without pushing commits, can check result fix things anyone else team pulls mistakes local repository. really good habit get .request merge, right click project name Package Explorer, choose Team > Merge... option. (expanded History View, , ’ll need double-click tab get back normal Eclipse view layout .)bring dialogue box giving choice branches merge shown figure 16.16\nFigure 16.16: Request merge master select branch merge dialog\nSelect feature branch working . Leave options default settings click Merge.ℹ️ Note ℹ️\nlearning Git, can tricky remember branch merges , using merge command.key thing remember , unless ’ve said otherwise, Git make changes checked branch. merging, start checking branch yet new changes . branch specified merge command branch contains changes want pull checked branch.merge complete, checked branch change, branch given merge command unaffected merge.Remember: try merges locally check pushing . easy fix merge problems locally, using Git reset command. Merge errors pushed remote repository much harder correct.merge finished, Eclipse show summary results shown figure 16.17.\nFigure 16.17: Screenshot showing merge results\ncase, merge successful. Git perform *fast forward merge8. , just push master branch forward one commit bring changes made mouse-interaction-fix branch. need create merge commit, merge conflicts resolve.next step check tests still pass merged code. important fast-forward merge, checked tests pass feature branch merging. merging always straightforward, good get habit checking tests pass merging well .History View (visible screenshot) shows new Git network merge. Now master mouse-interaction-fix commit, master still checked . remote tracking branch master branch remote repository, however, still commit first imported. change push changes remote repository.","code":""},{"path":"gitting.html","id":"pushingchange","chapter":"16 Individual Coursework 1","heading":"16.3.7 Step seven: Push the Changes to the Remote Repository","text":"merge looks okay History view, tests still pass, can push changes remote repository., right clicking project name, selecting Team > Push origin menu appears. , haven’t saved GitLab credentials Eclipse, ’ll need supply operation complete.Press OK initiate push.push successfully completed, look contents History View. Can see changed, result second push?merged pushed correctly, see branches pointing commit GitLab shown figure 16.18\nFigure 16.18: Screenshot showing check gitlab network feature branch pushed\n","code":""},{"path":"gitting.html","id":"issuetracker","chapter":"16 Individual Coursework 1","heading":"16.3.8 Step 8: Record the Project Status in the Issue Tracker","text":"bug fix merged development branch, tests still pass, can close issue. Open Wrong Tiles Sliding issue issue tracker click Close issue button. (course, feature branch hasn’t merged development branch tests still fail, can’t close issue, bug wouldn’t properly fixed yet.)ready work marked, add comment issue, let automated marking system know. comment contain following text:comment detected automated marking code, work scheduled marking next automated marking point. , ’s important use exact text string issue comment. can delete re-add comment time coursework deadline, want make changes. ’s also important add comment correct issue. past, students created new issues marking-request comment even, cases, made dummy commits string commit message. None actions picked automated marking system, ’s important check comment appearing issue created changes visible remote deadline.⚠️ Caution ⚠️\nresponsibility check work successfully pushed GitLab project repository deadline coursework submission. mark local repository contents, contents GitLab repository. Therefore, make sure check full set commits branches expect see visible GitLab repository, report problems course team deadline.submit work late whatever reason, add comment issue let us know ready work marked. Late marking rerun every couple weeks, won’t receive feedback immediately.","code":"Project ready for marking."},{"path":"gitting.html","id":"gameover","chapter":"16 Individual Coursework 1","heading":"16.3.9 Coursework Complete","text":"completes instructions first individual coursework exercise COMP23311. managed complete full, can confident Git/GitLab set needed machine workshops coursework. Perhaps even importantly, gone basic cycle steps ’ll expect follow carrying team coursework unit. unfamiliar approach coding, might felt long-winded complicated. little practice, pattern work become easier natural. , experience belt, ’ll find much easier adapt variants , join software engineering team placement employment outside University.next individual coursework, ’ll look complicated merge case, Git can’t handle merge needs help intervene.Document version: 04 July, 2022","code":""},{"path":"conflicting.html","id":"conflicting","chapter":"17 Individual Coursework 2","heading":"17 Individual Coursework 2","text":"Exercise 2: Test-First Development Managing Conflicts Git","code":""},{"path":"conflicting.html","id":"introt","chapter":"17 Individual Coursework 2","heading":"17.1 Introduction","text":"second individual coursework exercise COMP23311 designed help develop two new skills professional software engineers need, essential second team coursework exercise:Test-first development, andHandling conflicts integration separate lines development Git.Test-first development (TFD) approach developing software first write test cases describing functionality need implement, write production code cause change failing tests passing tests. tests provide specification needs built. getting taste TFD writing tests make bugs visible code base first team coursework exercise, ’ll required apply extensively second team coursework exercise. individual coursework exercise gives chance practice basic skills private, use front team mentor. giving set test cases describing behaviour needed new feature Sliding Puzzle game worked first individual coursework exercise. task make failing tests pass, implementing feature tests (issue text) describe .’ve implemented feature, ’ll need integrate development branch (repository, main branch). , another member Sliding Puzzle team also made commits development branch since work feature began, implementing another feature. ’ll need merge two lines development together. Since features touch much parts code, number conflicts discovered try merge. task remove conflicts code base, merge can go ahead. ’ll finish creating commit contains new features, co-existing together, passing tests.’ll practice skills carrying following steps:Clone coursework repository import IDE.Read tests describing new feature must implement, feature branch provided.Make changes production code, implement feature cause tests pass.Commit code feature branch.\nMerge branch development branch.Deal conflicts attempt merge makes visible, complete merge.Push completed merge remote repository marking.Update issue tracker record project status, request marking.Instructions carrying tasks within Eclipse IDE given document. focus Eclipse IDE used team coursework. free use IDE wish carry individual coursework exercise, can currently provide instructions technical support Eclipse, run VM provided Department machines labs Kilburn building.exercise completed, ready use skills team’s repository remaining team coursework exercises.ℹ️ Note ℹ️Trouble-shooting experience problems completing exercise, can find trouble-shooting guide School’s wiki :wiki.cs.manchester.ac.uk/index.php/LabHelp:Main_PageWe’ve provided two indexes trouble shooter, help find way around. One index error messages:wiki.cs.manchester.ac.uk/index.php/LabHelp:ErrorsIf specific error message reported alongside problem experiencing, can look index, find suggested solutions worked students problem past.second index contains descriptions general symptoms:wiki.cs.manchester.ac.uk/index.php/LabHelp:SymptomsUse index something going wrong specific error message help track cause problem.Please report problems encounter covered troubleshooter soon possible, including full details specific error messages screenshots appropriate. can report problems course unit piazza forum piazza.com/class/ku382xdryxd644, e-mail course team. ’ll best help!","code":""},{"path":"conflicting.html","id":"aboutcwk2","chapter":"17 Individual Coursework 2","heading":"17.2 About the Coursework","text":"","code":""},{"path":"conflicting.html","id":"keyinfo","chapter":"17 Individual Coursework 2","heading":"17.2.1 Key Information","text":"exercise marked 10, count towards 10% total mark course unit.deadline submitting exercise : 6.00pm, Friday 15th October 2021You’ll submit work GitLab repository created exercise begins. created, visible personal project list GitLab web interface :gitlab.cs.man.ac.ukAt deadline, ’ll make clone repository run automated marking code. just make sure pushed Git branches commits GitLab repository , make comment issue tracker let us know work ready mark. additional submission steps.Feedback work uploaded issue tracker GitLab project, marking code run.","code":""},{"path":"conflicting.html","id":"markingscheme2","chapter":"17 Individual Coursework 2","heading":"17.2.2 Marking Scheme","text":"coursework exercise consists 8 steps. complete correctly, earn full marks marking scheme shown table 17.1. note can mark work present GitLab repository, earlier steps involve work local Git repository. won’t able see work get final step, push commits branches GitLab repository. reach deadline steps incomplete, want us mark work done, ’ll need jump forward step 7 complete much can deadline allow .Table 17.1: marking scheme 2nd individual coursework exercise⚠️ Caution ⚠️Note coursework must carried without use merge requests. point exercise carry operations , local repository, gain understanding exactly Git tools pull/merge requests used.use merge requests, even subsequently deleted, incur 50% mark penalty.","code":""},{"path":"conflicting.html","id":"predead","chapter":"17 Individual Coursework 2","heading":"17.2.3 Pre-Deadline Feedback","text":"give chance check work make corrections advance deadline, run automated marking code student repositories shortly :6.00pm, Tuesday 12th October 2021This add provisional feedback provisional mark issue tracker repository, covering part work completed pushed GitLab date. deadline make corrections. automated marking code mark latest commits, ignore earlier incorrect commits merge attempts. means can commit fixes feature branch attempt merge , try catch marks may missed first attempt.repositories changes made students deadline provisionally marked. don’t need request .guarantee provide provisional marks everyone started work provisional marking deadline. Students start work may receive provisional marking may , depending whether repository processed marking code time.","code":""},{"path":"conflicting.html","id":"subproc","chapter":"17 Individual Coursework 2","heading":"17.2.4 Submission Procedure","text":"submit work marking, must add comment coursework issue issue tracker project, saying:time submission time comment added repository.comment present coursework issue, assume ready submit work.may delete re-add comment many times like formal deadline coursework. work marked, ignore changes issue tracker; possible request marking second time marking project complete feedback uploaded issue tracker.changes repository made final eligible marking request made ignored marking process. make sure definitely finished work, add comment, especially submitting deadline.added request marking comment issue, development access repository removed, preserve state repository marking.","code":"Project ready for marking."},{"path":"conflicting.html","id":"lateness","chapter":"17 Individual Coursework 2","heading":"17.2.5 Late Submissions","text":"coursework follows University’s standard policy marking work submitted late.penalty 1 mark applied 24 hour period following deadline work late, total 9 periods. Note purposes calculation, weekends evenings counted. means , since coursework’s deadline Friday, submission Monday morning receive penalty 3 marks.penalties applied marks earned student removed. Marks go zero.Work submitted 10 calendar days deadline considered non-submission given automatic mark 0. discretion course leader Department whether work marked sufficiently feedback provided.coursework, submission time date time place comment saying work ready marking issue exercise. work pushed GitLab date marked. commits references pushed GitLab marking requested considered marking, even created modified local Git repository .","code":""},{"path":"conflicting.html","id":"dontcopy","chapter":"17 Individual Coursework 2","heading":"17.2.6 Plagiarism","text":"coursework subject University’s standard policy plagiarism:wiki.cs.manchester.ac.uk/index.php/UGHandbook19:Academic_Malpractice","code":""},{"path":"conflicting.html","id":"gettinghelp","chapter":"17 Individual Coursework 2","heading":"17.2.7 How to Get Help","text":"Help exercise available team study sessions (team marked). Sign live help queue gitlab.cs.man.ac.uk/comp23311_2021/COMP23311-Live-Help-Queue sessions, using Individual Coursework Ex 2 label issue template. member staff GTA speak person call directly Microsoft Teams ready provide help.","code":""},{"path":"conflicting.html","id":"indycwk2in","chapter":"17 Individual Coursework 2","heading":"17.3 The Coursework Instructions","text":"","code":""},{"path":"conflicting.html","id":"cloneandimport","chapter":"17 Individual Coursework 2","heading":"17.3.1 Step one: Clone and Import the Project into Eclipse","text":"Eclipse (whatever IDE chosen coursework ), import project coursework cloning URI:https://gitlab.cs.man.ac.uk/COMP23311_2021/sliding_puzzle2_<-username>.gitwhere <-username> replaced University username. personal repository set just use , activity. students can see contents (though course team GTAs can see ).cause new Java project appear IDE, ready use. version sliding puzzle game used individual coursework 1. Take look History view project, see commit graph. see development branch (called main coursework) two feature branches. One feature branches fast-forward merged development branch still -going hasn’t yet merged .ℹ️ Note ℹ️\nunsure complete step, refer back steps 1 2 instructions 1st individual coursework exercise course unit (chapter 16), detailed instructions.","code":""},{"path":"conflicting.html","id":"runderstand","chapter":"17 Individual Coursework 2","heading":"17.3.2 Step two: Run and Understand the Test Cases for the Feature","text":"issue placed issue tracker project, describing new feature asked implement coursework. Work already begun issue, feature branch already exists repository. test cases describing feature committed branch, along bare minimum changes production code needed make test code compile.branch called: move-counterYou must check feature branch, use tests guide implementation new feature. first step read test code, understand one saying functionality must implement.practice techniques test reading presented workshops, consider test case terms “Act, Arrange, Assert” model (see chapter 2).next step run tests. Since default project classpath sufficient simple project, can right clicking test folder selecting Run > JUnit Test. ’ll see couple new test cases pass, fail.ℹ️ Note ℹ️Test-First DevelopmentTest-first development (TFD) style software development begin writing collection tests describe new functionality added system. run tests, (mostly) fail, feature describe yet implemented. next step make changes production code implement required feature, thus make test cases pass.approach development, tests change function. Instead aiming detect errors introduced code base, tests take role specification: executable specification can run repeatedly, feature implementation moves forward. tests also therefore function kind progress report, telling us much work remains done can consider feature finished.writing test code production code also profound effect design code. write production code tests, often make design errors, thinking much code point view implementer class working . makes hard make good decisions parts behaviour exposed class’s interface, hidden behind .write test code first, forced think classes testing point view user class, rather implementer class. process writing tests helps us see information services class must provide public interface, designed ensure clarity ease use. can implement feature way corresponds design, can concentrate making internals class clear efficient. Implementation often quicker easier TFD, many hard design choices already made us.","code":""},{"path":"conflicting.html","id":"testsipass","chapter":"17 Individual Coursework 2","heading":"17.3.3 Step three: Implement the Feature/Make the Tests Pass","text":"good grasp functionality tests describe, start implementing functionality making tests pass.Make sure move-counter branch checked make changes code.usual approach TFD take failing test turn, make changes needed make test pass. , treat test case example general set tests, write code work tests, just single test starting .ℹ️ Note ℹ️Alternative Approaches Testing Development\nBroadly speaking, three main alternatives TFD common use. described .Manual-Test Development (MTD), oldest form development, (little) automated test code written system, testing performed done manually. form development still common open source projects, code written smaller consultancies. even projects excellent automated test coverage may tests need run manually, depend complex fixture set-steps (hardware configuration) complex outcomes.Test-Development (TAD)form development, features implemented production code, finished number test cases written check correctness implementation. tests sometimes written people implemented feature, sometimes independent development team, sometimes (though now rarely) dedicated independent test team write test cases specification document. ’ve included last case TAD, practice test cases aren’t fully implemented run implementation reached certain level maturity.Test-Driven Development (TDD), modern forms development listed , implementation feature set test cases describe implemented together, small steps, interleaving writing test code writing production code. TDD, production code can written response failing unit test, minimal production code changes needed cause test pass made. new test case passes, design code base reviewed, look improvement opportunities, ways generalise implementation cover test cases group.TDD similar TFD, important differences. TFD, grow implementation feature closely match requirements described test cases. TDD, grow implementation test suite fit requirements, aiming create tests production code needed deliver value client. results code high test coverage, strong correctness, lean implementation focused requirements. can challenging apply, requiring (least learnt) discipline creativity.TDD covered briefly Software Engineering 2: COMP23412\ndepth Agile Software Pipelines: COMP33312 (along related technique Behaviour Driven Development, BDD).\nimplementation task feature neither large complicated. need write many lines code reach solution. can look code written Game Timer feature, commits development branch, get inspiration handle behaviour required implement Move Counter feature. Just follow tests, try write smallest amount code needed make pass. don’t write enough code, tests tell , failing. write code isn’t needed, tests won’t tell , ’ll added unnecessarily maintenance costs system remainder lifetime code.couple slightly tricky aspects implementation equivalents Game Timer feature. Since exercise general Java coding, hints given help , free implement feature way compatible tests given, description issue.Hint: Switching move counting shuffling puzzleView source page want see hintHint: Refreshing Move Counter GraphicsPanelView source page want see hintWhen tests move-counter branch pass, observed correct behaviour several cases running game, step completed.ℹ️ Note ℹ️\nSliding Puzzle code base working limitations. particular, testing aspects GUI follow best practice. However, providing better quality tests aspects required whole system much larger, us use advanced Java elements taught yet. therefore decided keep example small simple, exercise, expense strict adherence good practice.","code":""},{"path":"conflicting.html","id":"featimp","chapter":"17 Individual Coursework 2","heading":"17.3.4 Step four: Commit and Push the Feature Implementation","text":"can now make commit containing details implementation. want make multiple commits, ’s fine, . commits must appear move-counter branch (, stage, move-counter branch).finished committing code changes, push move-counter branch remote repository (origin). important push branch stage, automated marking system can pick code changes accurately.Depending IDE version using, may need set push ref specs repository. Information given instructions 1st individual coursework, step 7 section 16.3.7.step complete can see changes commits GitLab, move-counter branch GitLab pointing commit end point local feature branch.","code":""},{"path":"conflicting.html","id":"mergedev","chapter":"17 Individual Coursework 2","heading":"17.3.5 Step five: Merge your Code into the Development Branch","text":"Now feature implementation complete, can merge changes development branch.Start checking branch want include new feature : case, main.History view project, right click commit move-counter branch pointing (, commit contains changes want merge checked branch), select Merge.\nFigure 17.1: Merge Main Menu\n⚠️ Caution ⚠️\nscreenshot shown illustration steps needed Eclipse . code changes shown part solution coursework. applies screen shots coursework instructions. don’t give away part code solution.Note also screenshots, development branch called master, main. branches play role. (Thanks bearing us work removal problematic terminology course materials.)Note exercise set merge asked attempt paused, conflicts found.\nFigure 17.2: Merge results showing conflicts\nsee conflicting merge result, step completed.⚠️ Caution ⚠️\npoint exercise walk experience detecting resolving conflicts two independent lines development, understand Git helps us manage conflicts. followed natural conventions approaches implementing Move Counter feature, discover conflicts try merge. found clever way implement feature avoids conflicts merge (e.g. rebasing feature branch onto main starting implementation feature), ’ll need think . can’t get full marks exercise unless implement feature way causes conflicts.","code":""},{"path":"conflicting.html","id":"resolveconfcomp","chapter":"17 Individual Coursework 2","heading":"17.3.6 Step six: Resolve the Conflicts and Complete the Merge","text":"look History view merge attempt previous step, notice merge commit created, move-counter branch still shown separate unconnected main branch.Git discovers conflicts present, refuse make merge. , merge operation doesn’t just fail. Instead, Git suspends merge operation, allowing us resolve conflicts continue merge. step, ’ll carry actions.","code":""},{"path":"conflicting.html","id":"walkthrough","chapter":"17 Individual Coursework 2","heading":"17.3.6.1 Walkthrough of the Conflict Resolution Process","text":"’ll now walk example conflict resolution, show procedure use coursework. code changes mentioned just illustration, part solution coursework.first task understand conflicts present. Git work detecting us, annotates source files special mark-, showing scope conflicts. Modern IDEs can understand mark-, use present different visualisations conflict us. following screen shot shows visualisations action: Git conflict mark-editor window IDE specific conflict markup Package Explorer view.\nFigure 17.3: Conflicts shown merge paused\nℹ️ Note ℹ️Integration Conflicts?Conflicts occur line code changed different ways two lines development trying integrate. Git can’t work automatically final integrated code —requires detailed understanding purpose code Git . human developer must take time work integrated form two code versions , rewrite code takes desired form.line code versions code, situation easy. Git adopt form line integrated version code.line code changes one versions, Git take changed form integrated version code. Git assumes newer version line takes precedence, carries forward integrated version code.line code changes versions, changes way, also easy handle. Git take either version line code (since versions ) use merged view code.problem arises versions code made different changes line code. conflicts occur, Git needs help human developer.Eclipse marks files contain conflicts special red, double-arrow decorator. files also “compile” decorator . conflict markers introduced files Git part legal Java syntax.editor window shows Git markup. consists three horizontal lines, separating different versions code. case, top middle bars see code currently-checked-(unmerged) main branch. (recall HEAD shorthand branch name, referring currently checked branch.) middle bar bottom bar see version line code presently move-counter branch Git repository.two ways remove conflicts. One edit files directly, remove conflict markers replace separate code versions single integrated version. example shown, example, might decide variables declared conflict need present final merged code version. case, edit file make happen showin figure 17.4\nFigure 17.4: Manually edit conflict\nremoved conflict GUI class.alternative way handle conflicts use Eclipse’s Merge Tool. Right click editor window, select Team > Merge Tool context menu appears.\nFigure 17.5: Invoking merge tool\nMerge Tool shows versions code, side--side, changed lines colour coded easy detection places attention needed. left hand window shows version code main, right hand window shows version code move-counter. coloured bars windows show changes: grey lines present main move-counter, purple lines present move-counter main, red lines present versions conflict.\nFigure 17.6: Merge tool showing conflicts\ntask edit file left hand window, contains desired integration changes files. case, ’s easy change: need include lines unchanged, copy paste line move-counter window main window. save file.\nFigure 17.7: Edits merge tool\nways removing conflict also remove compilation error file. see decorator removed file Package Explorer view. conflict marker remains file, however, yet told Git believe conflicts removed., right click anywhere Eclipse windows/views, select Team > Commit. bring special version Git Staging view, tailored resolving commits.\nFigure 17.8: Special commit view\nnow stage changes ’ve made GUI class, conflicts decorator removed:\nFigure 17.9: Commit view GUI staged\nrepeat conflict removal process Model class, also stage changes, commit view changes following:\nFigure 17.10: Commit view conflicts removed\nNotice Git now provided commit message added author committer details. Git recognised now dealt files affected conflicts recent merge ready proceed .can now edit merge message want . always leave automatically generated merge messages unedited, provide useful metadata understanding flow code change happened repository. people remove details conflicting files people leave . Regardless, aspect conflict resolution tricky complex, useful add note explaining merge commit.coursework, ask add extra information handled conflicts end commit message, leave automatically generated message unchanged start message.local history view project now shows feature branch merged main, merge commit. resulting code version contains features, integrated together.\nFigure 17.11: Local history merge completed\n","code":""},{"path":"conflicting.html","id":"yourturn","chapter":"17 Individual Coursework 2","heading":"17.3.6.2 Now It’s Your Turn","text":"coursework, next task find resolve conflicts introduced integration new Move Counter feature existing game features. Specifically, integrating work features added code base since start feature branch: Game Timer feature, case.therefore need use conflict resolution tools discussed document create version game Game Timer feature Move Counter feature, passes tests features (existing test suite). non-trivial task. need think carefully can get two features work well together single code version.good starting point read understand Game Timer feature code going working , including (course) tests.Make sure tests pass version code conflicts resolved, make merge commit. don’t forget test game manually running playing . automated tests won’t catch problems, supplemented small amount carefully targeted manual testing.Hint: Making Move Counter Game Timer Appear Main Game PanelView source see hintℹ️ Note ℹ️\nSuzanne’s Tips Conflict ResolutionHaving fix conflicts makes us appreciate colleagues keep commits tightly focused task hand, avoid unnecessary irrelevant changes code layout, spurious comments random reorganisations code. changes add nothing value code base, can considerably complicate task conflict resolution. good team member keep commits clean lean.try run IDE’s automatic formatter files committing . may like automated format comes cases, worth putting slightly ugly layout means won’t deal spurious formatting changes next need resolve conflicts.find helps decide advance order ’ll put code features integrated. example, coursework exercise, might decide put Move Counter elements Game Timer elements. makes quick easy consistent incorporate game changes across multiple classes, without requiring much thought.worth avoiding long intricate conflict resolution tasks, especially close deadline. Keep scale resolution task low, syncing frequently remote. implementing new feature, try find series small mini releases can implement merge individually, keep scale conflict resolution task .preferred manually edit conflict markers first encountering Git, now prefer use Merge Tool using Eclipse. Use approach ’s best current stage learning.using Merge Tool, normally expand fill whole Eclipse window, can see much code changing possible, can better understand risks .think ’ve fixed conflicts file, may discover caused compilation errors due changes affecting classes. check files Eclipse reporting compilation errors fix , looking especially errors files changed feature branch, continuing merge commit.\nthink ’ve fixed conflicts file, may discover caused compilation errors due changes affecting classes. check files Eclipse reporting compilation errors fix , looking especially errors files changed feature branch, continuing merge commit.Make sure run tests soon got back compiling code. ’s really easy break things code merging , especially didn’t write . good test coverage, test suite insulate potential errors. working team project, getting help buddy review code merge can also help (though may need merge push temporary branch instead development branch need buddy review remotely). Using merge/pull requests can also help (though ’s important learn carry merges manually first, really understand tools behind scenes behalf).","code":""},{"path":"conflicting.html","id":"pushtoremote","chapter":"17 Individual Coursework 2","heading":"17.3.7 Step seven: Push the Completed Merge to the Remote Repository","text":"complexities previous step, one easy. Just push new location main branch, plus merge commit , remote, following instructions individual coursework exercise 1 chapter 16.moving , don’t forget check can see merge commit remote repository GitLab, branches pointing commits local commit graph.","code":""},{"path":"conflicting.html","id":"requestm","chapter":"17 Individual Coursework 2","heading":"17.3.8 Step eight: Update the Issue Tracker and Request Marking","text":"Finally, last step update issue tracker short summary work done resolve .completed implementation Move Counter, successfully integrated main development line, tests passing, can close issue. Otherwise, leave issue open.done, can add comment issue tell us submitting solution marking. Please add text:next run marking code, observes comment, lose Developer access repository, make sure ready posting comment.","code":"Project ready for marking."},{"path":"conflicting.html","id":"messi","chapter":"17 Individual Coursework 2","heading":"17.3.9 Messed Up?","text":"make mistake coursework, can request reset staff. , post following line coursework issue issue tracker:’ll reset repository state start coursework. Obviously, ’ll lose access commits made coursework far.can request one reset coursework exercise, use wisely.","code":"    Please reset repository, @suzanne.m.embury."},{"path":"conflicting.html","id":"cw2fin","chapter":"17 Individual Coursework 2","heading":"17.3.10 Coursework Complete","text":"completes instructions second individual coursework exercise course unit. managed complete full, ’ll apply skills team coursework. practiced basic test first development. ’ll ready collaborate team Git projects, handle code integration conflicts often entails. also better understanding practical importance writing clear, focussed commits.Document version: 04 July, 2022","code":""},{"path":"dealing.html","id":"dealing","chapter":"18 Team Coursework 1","heading":"18 Team Coursework 1","text":"Team coursework exercise 1: Dealing Small Scale Code Changes","code":""},{"path":"dealing.html","id":"overview","chapter":"18 Team Coursework 1","heading":"18.1 Overview","text":"first team coursework exercise, team provided Git repository hosted School’s GitLab server. repository contains modified version version Stendhal code base. coursework begins, issue tracker repository populated number issues describing “bugs” code team must fix coursework deadline.’re just asking fix bugs. asking work like professional software development team. must ensure issues fixing covered unit tests fix , must use feature branches protect work team members mistakes might introduce . ’re also asking keep close eye quality development release branches (help continuous integration server), use basic Git techniques ensure , whatever happens code feature branches, code changes compile pass unit tests reach released code.exercise test ability :make use simple Git workflow, based feature branches, allow multiple coders work safely code base time,use automated test suite make code changes large body code without causing regression,write new tests make bugs visible fix ,use code reading techniques locate parts large software system relevant particular ug,prepare good quality release incorporating work multiple developers, andpresent professional demonstration work done, reflect upon team processes hey can improved.","code":""},{"path":"dealing.html","id":"what-you-have-to-do","chapter":"18 Team Coursework 1","heading":"18.2 What You Have to Do","text":"","code":""},{"path":"dealing.html","id":"stepone","chapter":"18 Team Coursework 1","heading":"18.2.1 Step one","text":"Following process covered workshops, team member acquire local copy team repository, learn build test , run code locally hosted version game. Instructions chapter 20.","code":""},{"path":"dealing.html","id":"steptwo","chapter":"18 Team Coursework 1","heading":"18.2.2 Step two","text":"chance get used working Stendhal code base, ’ll upload number issues project’s issue tracker. issue describe bug problem code base asked fix.issue list, perform minimal examination code base decide team responsible fixing bug. issues assigned responsible person issue tracker.Important: every member team must assigned responsible person one issue.team number members issues, plan fix issues. team fewer members , can choose issues address. example, team 5 students choose 5 issues address coursework, may ignore others. case, leave unselected issues unassigned, remove Coursework 1 Release milestone issue tracker. automated marking system mark issues associated milestone deadline.ℹ️ Note ℹ️Bugs vs FeaturesEvery year, exercise raises questions students concerned assigned “bug” isn’t really bug.software bug? widely accepted definition bug occurs implemented behaviour system deviates specification. contrasts feature, defined new behaviour needed system, currently described specification.sounds clear reasonable theory. practice, situation complicated fact systems don’t written specification. specification exist largely collection ideas recollections heads people responsible deciding system . Whether particular software change bug feature therefore eye beholder, little gained trying argue one way .“bugs” set exercise either actual bugs Stendhal project issue tracker, variations reported bugs issue tracker bugs invented closely analogous kinds bugs reported users game.Unfortunately, many bugs reported Stendhal issue tracker complex, difficult write tests , suitable beginning coursework exercise like one. tried retain form spirit “real” bugs issues assigned coursework. also means range difficulty levels. lucky/unlucky enough assigned easy bug, consider pairing someone else team might struggling harder one. can’t work , can sounding board, can help exploring code base find relevant parts code.","code":""},{"path":"dealing.html","id":"stepthree","chapter":"18 Team Coursework 1","heading":"18.2.3 Step three","text":"team member make estimate long take fix bug responsible . estimate recorded using GitLab’s Time Tracking facility. Information can found :gitlab.cs.man.ac.uk/help/workflow/time_tracking.mdAt stage, important estimate correct. important make attempt estimating starting write code fix.also set Due Date issue issue tracker. date work individual issue completed . Note deadline coursework. need complete individual work issue time merge work development branch new release created.","code":""},{"path":"dealing.html","id":"stepfour","chapter":"18 Team Coursework 1","heading":"18.2.4 Step four","text":"must use separate feature branches issue, protect team mates affected changes complete, quality checked ready use. next step, therefore, set branch issue responsible fixing.branch names ask use given Blackboard, Assessment > Team Coursework > Team Coursework Exercise 1, issues uploaded GitLab project. branch names expected automated marking system. Failure use exact names specified mean marking system unable find award marks work.must create feature branch starting development branch team repository. must create branch feature branch, example.","code":""},{"path":"dealing.html","id":"stepfive","chapter":"18 Team Coursework 1","heading":"18.2.5 Step five","text":"getting started fixes, team member must ensure bug responsible visible test suite. means presence bug must flagged least one failing test. , may need modify existing test make unwanted game behaviour visible (behaviour containing bug currently tested ) ’ll need create new test class scratch. important locate new test cases sensibly Stendhal code base, developers familiar organisation code able find easily. ’ll also need work use test objects Stendhal team provided, set game (partial game) state needed make issue visible.keep track long spend step, nearest hour. (Note actual number hours spent task, elapsed time started finished .) step completed, add comment issue telling us long . Please use following phrase, searched RoboTA 🤖 automated marking system:<time spent> replaced amount time spent task, expressed form GitLab issue time tracking facility can understand.Capturing fine-grained level time tracking data usual part software process. ask exercise can gain idea long kinds tasks take personally. help future creating defensible realistic estimates work.","code":"    Issue now visible in the test suite.\n    /spend <time spent>"},{"path":"dealing.html","id":"stepsix","chapter":"18 Team Coursework 1","heading":"18.2.6 Step six","text":"one tests fail presence bug, can make changes production code (code src folder) fix . step can considered complete changes made steps five six committed feature branch, following conditions true feature branch checked :tests wrote/modified make bug visible pass.tests Stendhal test suite fail.step 5, keep track long spend step, nearest hour. step completed, add comment issue recording . Please use following phrase, searched automated marking system:<time spent> replaced amount time spent task, expressed form GitLab issue time tracking facility can understand.may push feature branch team repository point steps 5 6, make progress visible team preserve record School GitLab server. wait issue completely fixed.pushed feature branch team’s remote, continuous integration server run automated build test processes, determine health code branch.","code":"    Issue resolved.\n    /spend <time spent>"},{"path":"dealing.html","id":"stepseven","chapter":"18 Team Coursework 1","heading":"18.2.7 Step seven","text":"next step merge work development branch. Stendhal team use master branch development branch, ask continue follow convention coursework7 coursework exercise, ask perform merges local repository push team repository. later exercises, make use Merge Requests GitLab help manage merging process, exercise create merge requests (mark penalty ). goal coursework exercise demonstrate understand basics merging, carrying steps . demonstrated , move using merge requests.merging work development branch team’s repository, need check code changes going introduce unexpected problems. , first, fetch changes team’s repository, merge local repository, make sure working --date version code base. (whole team following workflow correctly, step trivial.team activity taking process covered team study sessions.Next, check master branch merge feature branch (following approach covered GitLab Access Check activity).push master branch team’s remote repository stage. (may, course, push feature branch.)Check code base results merge compiles, full test suite passes. encounter problems, ’ll need reset master branch back commit merge. effect undoing merge just made.Fix problem feature branch start step . (course, problem turns caused code one team members committed team repository, ’ll need stop development work team member fix feature branch re-merge , coming back start step feature branch.)confident clean merge, can push changes master branch team repository. (may wish fetch commits team repository , certain amount time elapsed since started work step.), point, get clean development branch build continuous integration server bug replicated game run development branch, can close issue issue tracker.","code":""},{"path":"dealing.html","id":"stepeight","chapter":"18 Team Coursework 1","heading":"18.2.8 Step eight","text":"steps 5 6, keep track long spend step, nearest hour. step completed, add comment issue telling us . Please use following phrase, searched automated marking system:<time spent> replaced amount time spent task, expressed form GitLab issue time tracking facility can understand.⚠️ Caution ⚠️push broken code team’s development branchIf, deadline, feature branch contains compile errors failing tests, push team repository marking, merge development branch. team get marks merging broken code get allowing broken code reach development branch release tags.Leave issues unmerged feature branches open. team needs know issue yet fixed, can return future release customer interest fixing become pressing.Note team’s collective responsibility ensure status issues issue tracker accurately reflects state code base. team mate marked issue completed, notice tests failing merge, reopen issue, giving description problem comment issue. Similarly, team mate fixed bug forgotten close issue, can check close issue .","code":"    Feature branch merged into development branch.\n    /spend <time spent>"},{"path":"dealing.html","id":"stepnine","chapter":"18 Team Coursework 1","heading":"18.2.9 Step nine","text":"final technical step prepare release. Although several team members may contribute commits process, single team member take responsibility carrying . team member create issue task called:issue associated coursework 1 milestone, assigned whichever team member taking responsibility carrying release task.Choose commit development branch form basis release. commit include changes issues correctly fixed team coursework merged successfully development branch. issues included release.look previous releases created Stendhal team, notice number changes made case. Notably:version number software updated build.ant.properties file (change propagated files, build process).new authors added doc/AUTHORS.txt fileA description changes included release added doc/CHANGES.txt file.need make changes release . can add directly development branch (can use release branch8 merge development branch complete, wish).created commit contains code documentation want release, mark adding tag commit. tag must called:version code consider released code, marking. , important place right place. can create tag locally push , can use GitLab web interface create tag final release commit pushed.","code":"    Prepare release 1.36uom    VERSION_01_RELEASE_36_UOM"},{"path":"dealing.html","id":"stepten","chapter":"18 Team Coursework 1","heading":"18.2.10 Step ten","text":"done technical work stage, one task : prepare marking interview follows deadline coursework. interview, TA ask demonstrate bug fixes released code, discuss organised work balance load across team monitoring steps ’ve taken keep work team track deadline.information timing, location format interview posted Blackboard.Note team members must attend marking interview, team member may asked demonstrate talk issue responsible . team member fails attend registered legitimate excuse SSO member course team receive automatic 50% penalty mark exercise. Team members attend interview unaffected penalty.","code":""},{"path":"dealing.html","id":"imdone","chapter":"18 Team Coursework 1","heading":"18.3 Submission of Your Team’s Work","text":"submission work coursework exercise team’s GitLab repository. make sure contents issue tracker Git repository ready marked deadline. nothing else submit.“live” marking scheme exercise can found CI server used course unit. (get information days coursework released .) marking scheme gives details marks awarded, also gives interim mark team based work completed far. course, parts marking can automated. Others need done GTAs. GTA marking takes three forms:Pre-deadline annotation commits. assigned GTA look commits add annotations tell automated marking code parts exercise commit contributes . take note annotations let GTA staff member know believe annotation incorrect.Post-deadline marking team process changes made code base.Marking based team performance marking interview, reflections well worked team.deadline passed, temporarily lose developer role access repository won’t able make changes code commit graph. point, clone team repository automated marking process finalise many marks can. GTAs completed remaining marking process, marks uploaded Jenkins final mark plus feedback visible team’s RoboTA build.’ll get developer access back next coursework exercise begins.","code":""},{"path":"dealing.html","id":"cwkex","chapter":"18 Team Coursework 1","heading":"18.4 Coursework Extensions","text":"Since coursework team exercise, extensions given, option submit work late. Team members experience substantial difficulties completing work due illness legitimate reasons need complete Mitigating Circumstances form can taken account later. marking process sufficiently flexible take account non-contributing team members without significantly affecting team mark members.going able carry work issue deadline set team, must inform team members plenty time. allow make decisions include release, penalised work able .","code":""},{"path":"dealing.html","id":"passengers","chapter":"18 Team Coursework 1","heading":"18.5 Non-Contributing Team Members","text":"Every team member expected contribute meaningful code team’s repository. declare work intend deliver contribution assigning issue issue tracker. Commits feature branches made team member recorded responsible commit issue tracker.meaningful commit one contributes code changes either test production code moves team’s repository closer fix issue way. Adding white space, rewording comments moving lines examples code changes considered represent meaningful contribution exercise. Similarly, merge commit considered contribution solution.⚠️ Caution ⚠️student assigned work issue tracker made least one meaningful commit team repository, Department GitLab account, period covered exercise, automatically receive mark 0 whole exercise.applies even decide work pairs issues. Sitting watching someone else make commit, even telling type, count commit . commit must made GitLab account.team includes non-contributing members, marking scheme adjusted take account. means necessary contributing team members pick additional work, fix issues assigned non-contributing members. Instead, everyone concentrate fixing issue, including safely release. team mark adjusted take account issues fixed team members non-contributing.","code":""},{"path":"dealing.html","id":"freeriders","chapter":"18 Team Coursework 1","heading":"18.6 Partially Contributing Team Members","text":"team member contributes something, much less others contributes work way causes problems rest team, team whole can choose reduce mark student. happen, must:Send e-mail student soon problem noticed, pointing difficulties causing team, asking say can resolve matters. CC e-mail Anas Duncan, formal record communication.Set deadline team’s work sufficiently far ahead actual deadline, time chase people don’t deliver.team interview, send e-mail Anas/Duncan offending team member letting know team propose reduced mark interview.interview, raise issue TA, document circumstances marking form, along details proposed mark reduction. affected team member agrees, proposed reduction applied point.team agreement mark reduction reached, whole team need meet Anas Duncan agree way forward.Note process necessary team members assigned issues made commits team repository, automatically receive mark 0 case.Mark reductions apply individual team members . effect mark rest team. Teams asked try resolve problems within team possible, making mark reductions, option measure last resort teams need .","code":""},{"path":"dealing.html","id":"copycats","chapter":"18 Team Coursework 1","heading":"18.7 Plagiarism","text":"coursework subject University’s policies plagiarism. Details can found School web pages :studentnet.cs.manchester.ac.uk/assessment/plagiarism.php?view=ugNote committing work people GitLab account counts plagiarism, action taken detected.Document version: 04 July, 2022","code":""},{"path":"working.html","id":"working","chapter":"19 Team Coursework 2","heading":"19 Team Coursework 2","text":"Working Features","code":""},{"path":"working.html","id":"ovirew","chapter":"19 Team Coursework 2","heading":"19.1 Overview","text":"second exercise using Stendhal code base, team presented number issues recorded GitLab issue tracker. time, however, issues describe new features rather bugs. , describe extensions Stendhal game, rather corrections implementation bring back line way game’s owners believe behave.brings play number new software engineering skills. first difference amount work done. Unlike simple bugs looked last coursework exercise, features team presented larger size, involving modification existing classes design new classes. Taken whole, represent work can sensibly achieve time given coursework.must therefore choose subset issues team commit deliver deadline.Another difference scope work. bug fixes implemented full, decisions made much work described issue worthwhile complete. adding new features situation complicated: full implementation may require great many code changes, may put parts system’s behaviour risk. addition, may clear users react new functionality, variants may prefer use. therefore usual introduce new features gradually, course series releases, manage risks adjust direction travel light user reactions new functionality.must therefore create release plan issue, showing released incrementally game. implement first release full feature coursework.exercise follow broad phases first team coursework exercise, several additional steps added:Release planning.Planning releases implemented.Testing implementation.Code review.Integration system testing.Making new release.Preparing face--face interviews.can choose carry steps team, perhaps combining overlapping steps.exercise test ability :use basic software estimation techniques commit workload team can deliver, divide work fairly across team,scope features control risk adding new functionality existing development,make use simple Git workflow coordinating team development,write test suites maintain test coverage across new existing code,use code reading techniques locate parts large software system new functionality can safely added,use basic code review techniques help ensure quality team’s code, anduse test-first development good OO design principles guard regression future releases.","code":""},{"path":"working.html","id":"udo","chapter":"19 Team Coursework 2","heading":"19.2 What You Have to Do","text":"","code":""},{"path":"working.html","id":"releaseplan","chapter":"19 Team Coursework 2","heading":"19.2.1 Step 1: Release Planning","text":"first task create release plan issues issue tracker associated milestone coursework exercise. show workshops second part course unit.release plan issue describe sequence incremental releases , complete, fully implement feature game. done dividing work required full issue sub-features, can delivered independently . example, issue requires addition new quest game, brand new item type reward, might plan release item first one release, release quest next release, time try new item real game play.release, must describe:sub-features delivered release.target audience release (group users new functionality released )existing game elements can potentially used support aspects sub-features delivered, need adapted.releases must numbered presented order delivered. order take account dependencies sub-features. example, release containing new quest come release delivers new reward item (obvious reasons - can’t release quest reward item yet exist game).Releases designed one delivers “playable” feature, can tested live play. also need consider effects players game experience different stages release feature, make sure overall sequence releases makes sensible pleasant game experience. Players normally happy receive additional game features, capabilities, better items, releases progress, typically less happy game made awkward annoying previous release, lose useful capabilities previous releases.first release designed “canary release” (also sometimes called “feature rollout”). , aim test risky part feature technically feasible provides sensible enjoyable game play experience. Therefore, first release, must also give short rationale chose part full feature implement deploy game first. (3-4 sentences rationale required.)document release plans placing wiki team’s GitLab project. create page wiki issue, using page slugs shown Blackboard (Assessment > Team Coursework > Exercise 2. example, team S1Team107, page slug one issue given slow-innkeeper, wiki page issue reached following URL:gitlab.cs.man.ac.uk/comp23311_2021/stendhal_S1Team107/wikis/slow-innkeeperNOTE: NEED SUBSTITUTE TEAM NUMBER URL ABOVEThe release plans stage can quite high level short. aim just enough planning allow make good decisions features commit deliver, next step.Please use following text header section wiki page, can generate links release plans instructions GTAs marking:","code":"## Release Plan"},{"path":"working.html","id":"issueplan","chapter":"19 Team Coursework 2","heading":"19.2.2 Step 2: Issue Planning","text":"","code":""},{"path":"working.html","id":"ischoose","chapter":"19 Team Coursework 2","heading":"19.2.3 Step2.1: Choosing your Issues","text":"coursework set degree, told exactly need deliver work set guaranteed achievable timescales allowed. Real software engineering like . always implemented can realistically achieved time available. Making decisions build, much commit team deliver, essential part software engineering. coursework gives opportunity practice reflect skill, apply real life.allow , given selection issues describing new features coursework , implemented full, constitute work can reasonably achieve time available. must choose subset issues implement, balancing need enough work achieve target mark exercise amount time possible worthwhile devote exercise.feature implement worth 10 marks, implemented perfectly criteria marking scheme. However, set cap number marks can achieve implementation features. means select many features implement, wasting time, able achieve marks additional work done. aim work long hours order achieve needed, instead think can use time effectively, deliver expected amount value fewest person hours.Since somewhat unsual approach coursework, provided spreadsheet help making choice features implement. spreadsheet allow see effects choices mark achieve, based predictions mark ’ll awarded individual component work. spreadsheet can found bit.ly/coursework-2-mark-schemeRemember selecting issues need implement first releases release plan selected issue.decided features delivering release, remove Coursework 2 Milestone. issues committing deliver associated milestone deadline exercise. RoboTA mark set issues associated coursework milestone, interests make sure accurate coursework marked.","code":""},{"path":"working.html","id":"step2.2-creating-a-work-breakdown-structure-for-the-selected-issues","chapter":"19 Team Coursework 2","heading":"19.2.4 Step2.2: Creating a Work Breakdown Structure for the Selected Issues","text":"selected issue, create work-breakdown structure (WBS) come defensible estimate effort needed implement first release. work breakdown structure documented wiki page issue (addition release plan issue). WBSs stage contain detail high level release plans created previous stage. level granularity aim described RoboTA marking scheme exercise.Please use following text header section wiki page, can generate links WBSs instructions GTAs marking:","code":"## Work Breakdown Structure"},{"path":"working.html","id":"plimp","chapter":"19 Team Coursework 2","heading":"19.2.5 Step 2.3: Planning for the Implementation","text":"must next decide:\n1. team member lead selected issue,\n1. team members work implementation selected issue, \n1. team members act code reviewers selected issue.decisions documented issue tracker, described .Since features set substantial coding tasks bugs fixed first exercise, need work together, groups 2 3, implement selected features. , break team sub-teams, responsible delivery first release individual feature. teams sometimes called “feature teams”.common cause failure team work members team assume crucial task done someone else. avoid , important assign lead member sub-team. person responsible detailed planning issue, scoping , coordinating implementation work amongst \nmembers sub-team, documenting work needed marking. mean team leader tasks alone—means team lead person check tasks done everyone clear need . Apart , way tasks shared amongst sub-team members . expected sub-team members, including leader, coding issue, allow meet requirement least one meaningful commit made coursework every team member.Team leads assigned responsible person issue issue tracker.sub-team members issue must recorded issue tracker, using sentence form:Sub-team member: <URL GitLab profile team member>GitLab profile links form: gitlab.cs.man.ac.uk/name, name GitLab username. Multiple sub-team members may recorded separate comments, single comment newlines sentences. need record team lead sub-team member.Note receive marks coursework, every team member must assigned sub-team exercise, either lead sub-team member, must make meaningful commit contributing towards implementation feature sub-team assigned implement. Work allocation must designed ensure team members able meet criteria receiving marks.assignment roles must completed stage can proceed implementation issue. coursework, ask apply practice reviewing code integrated mainline development team. Therefore, also decide carry code review issue. Every member team must carry code review, code every feature must reviewed integration. welcome carry buddy reviews within sub-teams, pre-integration code review step must carried someone another sub-team.Code reviewers issues must recorded issue tracker, using sentence form:Code review : <link GitLab profile team member>Multiple code reviewers may recorded given issue, wished.document estimate effort required implement feature issue tracker. exercise, going use GitLab’s Time Tracking facility. Information can found :gitlab.cs.man.ac.uk/help/workflow/time_tracking.mdThe results planning must documented issue tracker wiki begin work selected issue.","code":""},{"path":"working.html","id":"timp","chapter":"19 Team Coursework 2","heading":"19.2.6 Step 3: Testing and Implementation","text":"issues allocated team lead, feature teams can start work implementation features. team lead begin expanding WBS work issue’s wiki page (necessary), allocating parts work sub-team members. Care taken find breakdown work allows sub-team members work parallel different parts feature meet criteria receive marks exercise.team lead set due date delivery feature team, using issue tracker’s Due Date facility. Obviously, due date chosen allow time code review, corrections merging feature development branch, plus making corrections event breaks build. due date must set work issue begins (considered time first commit implementation made).team lead update estimate issue issue tracker , based detailed planning carried , sub-team feel original estimate inaccurate.ask use Git workflow used first exercise, allow sub-team work collaboratively issue without interfering work rest team using feature branches.addition, new skills ask demonstrate second course unit. asking code test-first manner, manage quality commit messages team makes, use test coverage tool assess whether written sufficient tests . Details requirements given .","code":""},{"path":"working.html","id":"sensible","chapter":"19 Team Coursework 2","heading":"Choosing a Sensible Starting Commit","text":"important team start feature branches clean commit. Otherwise, problems commits 1st exercise (failing tests) carried forward new feature branches, may result lost marks exercise . reponsibility ensure happen.Teams clean build development branch Jenkins okay start work next coursework exercise point. Teams unstable failed builds development branch need start getting master branch clean state. problems caused merging feature branches unstable failed merges master, need revert commits9. Please get help early team study session unsure thisOnce suitable starting commit identified created, one member team create tag pointing commit. tag called:EX2_STARTWe created Jenkins build tag, help choose good starting point work exercise. Push tag candidate starting commit manually request job built (’ll need build job manually push tag without code changes.)place tag wrong commit, need change , need delete recreate . Instructions deleting tags can found end document.expected development branch start commit exercise 2, make sure master branch located commit start work features. named feature branches exercise 2 begin tagged commit later commit development branch.","code":""},{"path":"working.html","id":"gitworkflow","chapter":"19 Team Coursework 2","heading":"Git Workflow","text":", use feature branches keep work feature separate main development branch, satisfied code ready integrated main game code. Please continue follow Stendhal team’s practice using master branch development branch.Please use feature branch names given Blackboard exercise. change previous exercise likely one person working together issues, therefore one person committing feature branch. free create sub-branches , individual team members want work isolation part work. sub-branches merged feature branch; merged directly master branch.Note branch names given Blackboard expected automated marking system. Failure use exact names mean marking system unable find award marks work.","code":""},{"path":"working.html","id":"bpcm","chapter":"19 Team Coursework 2","heading":"Best Practice Commit Messages","text":"exercise, ask gradually increase Git skills following best practice terms commit messages use. ask adopt style commit message recommended GitHub. Details format can found Blackboard Course Content week 6 (“Git Workflows”).example commit message follows format want use :Allow Joshua list ingredients spy glassWhen asked, Joshua now list ingredients needs making new spy glass item.  trickier looked, Joshua already using available conversation states.  added new state (QUESTION_4) make work.Note phrasing first line, sentence imperative completes sentence “applied, commit …”.Please note team members must use GitLab account commit push work, commits must University e-mail address e-mail commit author. set using git config, described School wiki:wiki.cs.manchester.ac.uk/index.php/Gitlab/Git_Setup⚠️ Caution ⚠️\nPlease make sure set user.name user.email variables machines intend commit .Commits made accounts considered part team’s submission exercise!","code":""},{"path":"working.html","id":"tfcode","chapter":"19 Team Coursework 2","heading":"Test-First Coding","text":"exercise 1, asked write tests describe behaviour code change making. exercise, ask use test-first development strategy introduced workshops.sub-team begin writing least two failing acceptance tests feature plan implement, following test-first approach demonstrated workshops. tests describe core elements features, trivial side cases. example, test quest undertaken completed quickest way considered core, test quest refused first offer .help us assess give feedback use test-first development, ask commit two failing acceptance tests commit production code changes make pass. may make changes tests later commits, well (course) changes production code. first commits feature branch contain two tests sufficiently complete implementation allow code compile run unstable build. (Note normal practice enforce committing new tests feature branch, although course using test-first approach tends happens naturally. taking slightly stricter line expected practice, order help demonstrate understand principle test-first coding able apply practice.)tell us committed test code ready start working production code, ask mark final test code commit special tag. names tags given Blackboard. Jenkins builds set build commits marked tags, allow heck positioned correctly aid us marking.","code":""},{"path":"working.html","id":"testcov","chapter":"19 Team Coursework 2","heading":"Management of Test Coverage","text":"writing tests extensive functionality changes, may wonder written enough tests can stop. critical question software developers, since writing tests free (neither terms developer time, time required run tests). coursework, ask use test coverage help manage tests, determine whether need write .Since first time used test coverage tool, setting fairly low coverage goal exercise. ask ensure maintain overall instruction coverage level coursework set Stendhal team starting commit coursework. teams, either 52% 53% instruction coverage classes.mark team’s coverage using instruction coverage classes, given “Overall Coverage Summary” values team’s development branch build Jenkins.team’s coverage lower value, need use coverage reports find areas new code written well covered tests. Looking instructions executed test suite execution, ’ll need think extra tests add cause instructions executed.\n(Obviously, tests necessarily added main work production code completed.)","code":""},{"path":"working.html","id":"docuwork","chapter":"19 Team Coursework 2","heading":"Documenting Your Work","text":"use issue tracker team wiki document problems encounter require make changes plan team structure. Discussion implementing using tools (Facebook Slack) obviously fine remember can mark can see. Key decisions regarding work, changes planned scope features running late, must documented GitLab repository able take account marking.important piece documentation keep record long spent feature far. record team’s issue tracker GitLab, using “time tracking” feature, exercise 1. Information use available side bar issue. Note need record time spent sub-team members. probably find easier update time spent go along, rather trying remember adding total end either strategy acceptable.exercise, need record times different tasks (writing tests, implementation, merging) though may wish personal reference.","code":""},{"path":"working.html","id":"codereview4","chapter":"19 Team Coursework 2","heading":"19.2.7 Step 4: Code Review","text":"exercise, ask start make use additional code quality management technique: code reviews. goal ensure code merged development branch without independent team member look check errors code quality problems. lose marks unreviewed code merged development branch.test code production code changes must reviewed. can choose whether review individual commits proceed, review whole code branch merging.Reviews must given using GitLab commit comment feature, merge requests. Reviews given verbally, recorded tool GitLab, receive marks (obvious reasons).Every contributing team member must perform least one review GitLab across exercise.guide performing code review can found online course handbook.","code":""},{"path":"working.html","id":"devbranch","chapter":"19 Team Coursework 2","heading":"19.2.8 Step 5: Integrate Completed Features into the Development Branch","text":"satisfied feature branch contains code fit integrated game, merge feature branch development branch. exercise, ask use non-fast-forward merges merges feature branch development branch10. Eclipse, use Team > Merge command project context menu, select option create merge commit event fast-forward merge shown figure 19.1.\nFigure 19.1: Non Fast Forward Merge Option Eclipse\nUnfortunately, handy merge option accessible History View doesn’t give chance request option, used merges feature branch development branch. use version merge mistake, don’t panic. Fast forward merges easily undone just make resetting master commit merge made provided pushed merge team’s remote. Please continue make merges locally, checking History View carrying merge team’s remote.use merge requests coursework exercise, provide “quality gate” code, prevent integrated development branch undergone code review. GitLab perform merge merge requests request , advised use caution option. easy create incorrect merge using merge requests unless really understand work. Worse still create merge directly team’s remote repository, making difficult fix merge errors made. Even plan create merge merge request, still recommend checking merge temporary local branch pressing GitLab merge buttons. (’ve also set Jenkins jobs merge feature branches development branch commit, give early warning problems might arise—builds true “continuous integration” builds. merges carried Jenkins thrown away next build takes place. merge pushed back team’s repository.)assume new issues created remaining releases feature. Therefore, feature branch merged development branch, resulting commit produces clean stable build, observed feature working game, can consider issue closed update status issue tracker. Don’t forget add time required carry merge issue’s time tracker.Issues un-merged features left open, even commits made . team needs know feature’s canary release completed, can return future customer interest functionality proposed make effort worthwhile.","code":""},{"path":"working.html","id":"reeleaseprep","chapter":"19 Team Coursework 2","heading":"19.2.9 Step 6: Prepare the Release","text":"final technical step prepare release. Although several team members may contribute commits process, single team member take responsibility making sure release created correctly. team member create issue task called:Prepare release 1.37uomThis issue associated coursework 2 milestone, assigned whichever team member taking responsibility carrying release task.Choose commit development branch form basis release. commit include changes features completed team coursework merged successfully development branch. issues included release., need update:version number software updated (1.37uom).doc/AUTHORS.txt fileThe description changes included release doc/CHANGES.txt file.can make changes directly development branch (can use feature branch merge development branch complete, wish).created commit contains code documentation want release, mark adding tag commit. tag must called:VERSION_01_RELEASE_37_UOMThis version code consider released code, marking. , important place right place. can create tag locally push , can use GitLab web interface create tag release commits pushed.","code":""},{"path":"working.html","id":"interviewprep","chapter":"19 Team Coursework 2","heading":"19.2.10 Step 7: Prepare for the Marking Interview","text":"done technical work stage, one task : prepare team marking interview exercise. interview, GTA ask demonstrate features released code, discuss organised work balance load across team monitoring steps ’ve taken keep work team track deadline.information timing, location format interview can found section 0.23.Note team members must attend marking interview, team member may asked demonstrate talk issue responsible . team member fails attend registered legitimate excuse SSO member course team receive automatic 50% penalty mark exercise. Team members attend interview unaffected penalty.","code":""},{"path":"working.html","id":"teamsubmit","chapter":"19 Team Coursework 2","heading":"19.3 Submission of Your Team’s Work","text":"submission work coursework exercise team’s GitLab repository. make sure contents issue tracker, wiki, commit comments Git repository ready marked deadline. nothing else submit.deadline passed, lose developer access repository longer able push commits change references. still access issue tracker, since actions issue tracker time-stamped, changes make deadline ignored purposes marking work.","code":""},{"path":"working.html","id":"xtensions","chapter":"19 Team Coursework 2","heading":"19.4 Coursework Extensions","text":"Since coursework team exercise, extensions given. Team members experience substantial difficulties completing work due illness legitimate reasons need complete Mitigating Circumstances form can taken account later. marking process sufficiently flexible take account non-contributing team members without significantly affecting team mark.going able carry work issue deadline set team, must inform team members plenty time. allow make decisions include release, don’t lose time dealing fact work done.","code":""},{"path":"working.html","id":"nctm","chapter":"19 Team Coursework 2","heading":"19.5 Non-Contributing Team Members","text":"Every team member expected contribute meaningful code team’s repository.⚠️ Caution ⚠️student assigned sub-team issue, whether lead sub-team member, deadline coursework, automatically received mark 0 whole exercise.student made least one meaningful commit team repository, student account GitLab server, period covered exercise, automatically receive mark 0 whole exercise.applies even decide work pairs issues. Sitting watching someone else make commit, even telling type, count commit . commit must made pushed GitLab account.meaningful commit one contributes code changes either test production code moves team’s repository closer fix issue way. Adding white space, rewording comments moving lines examples code changes considered represent meaningful contribution exercise.","code":""},{"path":"working.html","id":"partially-contributing-team-members","chapter":"19 Team Coursework 2","heading":"19.6 Partially Contributing Team Members","text":"team member contributes something, much less others contributes work way causes problems rest team, team whole can choose reduce mark student. happen, must:Send e-mails student soon problem noticed, pointing difficulties causing team, asking say can resolve matters. CC e-mail Duncan, formal record communication.Set deadline team’s work sufficiently far ahead actual deadline, time chase people don’t deliver.team interview, send e-mail Suzanne offending team member letting know team propose reduced mark interview.interview, raise issue GTA, document circumstances marking form, along details proposed mark reduction. opinion affected team member also recorded, present.team agreement mark reduction reached, whole team need meet Duncan agree way forward.Note process necessary team members made commits team repository, automatically receive mark 0 case.Mark reductions apply individual team members . effect mark rest team. Teams asked try resolve problems within team possible, making mark reductions, option measure last resort teams need .","code":""},{"path":"working.html","id":"plagiarism-1","chapter":"19 Team Coursework 2","heading":"19.7 Plagiarism","text":"coursework subject University’s policies plagiarism. Details can found School web pages :studentnet.cs.manchester.ac.uk/assessment/plagiarism.php?view=ugNote committing work people GitLab account counts plagiarism, action taken detected. Rebasing commits authored others count plagiarism, providing original authorship information retained commit metadata.","code":""},{"path":"working.html","id":"technical-appendix","chapter":"19 Team Coursework 2","heading":"19.8 Technical Appendix","text":"","code":""},{"path":"working.html","id":"delab","chapter":"19 Team Coursework 2","heading":"19.8.1 Deleting a Tag on GitLab","text":"need move position tag created GitLab, need first delete tag (using red dustbin icon Tags page) recreate right place.easy enough. However, always making changes team’s remote repository, complication aware . team members old tag local repository, need make sure tag updated point right commit, someone pushes old location back repository .Therefore, soon tag recreated GitLab, team members run following command, command line, folder local Stendhal Git repository located:% git fetch --tagsYou can check tag now refers correct commit using command:% git rev-list -1 <tag name>recommended operations team repository, correcting location tag, done team study session, team present able carry necessary commands local repositories time.Document version: 04 July, 2022","code":""},{"path":"guiding.html","id":"guiding","chapter":"20 Testing Stendhal","heading":"20 Testing Stendhal","text":"Guidance Testing Stendhal.","code":""},{"path":"guiding.html","id":"intros","chapter":"20 Testing Stendhal","heading":"20.1 Introduction","text":"team study sessions week 2 onwards, ’ll working team coursework. focus initially writing tests make issues visible: , write tests fail bug reported issue present code base, pass present. process :First, understand bug replicating manually local copy game.Check see whether existing tests fail presence bug., need write test property. Use existing test suite source inspiration ideas .Check test fails original version code base (.e., reveals presence bug).Figure causing bug fix production code.Check tests now passing, including one reveals presence bug.approach, start green JUnit bar (although bug present, test reveals ), moving red JUnit bar (added test reveals bug) back green JUnit bar (test reveals presence bug, bug now fixed).document contains suggestions carrying first steps efficiently. ’ll look techniques carrying full process workshops week 3.","code":""},{"path":"guiding.html","id":"replicating","chapter":"20 Testing Stendhal","heading":"20.2 Manually Replicating The Issues","text":"find code base much easier navigate, code relating issue much easier find understand, first replicate issue manually. means running game local server, see bug happening context game play. give additional keywords searching (add keywords can extract issue description ) help locate relevant tests source bug., however, raises problem. issues require many hours play get player character required level able acquire objects necessary get NPCs involved issues. don’t time spare going get fix tested sorted timescales given coursework.Following common practice, Stendhal team provided facilities supporting targetted replication issues manual testing. facilities allow create player character admin status. gives player special powers — including ability teleport right NPC, summon item creature, interrogate internals item within game.Information useful features can found Stendhal wiki stendhalgame.org/wiki/Stendhal:AdministrationThink carefully within team use admin features, especially test accounts use. admin accounts specified contents file source code base, therefore something potentially version control. don’t want mess Git history continually committing changing everyone’s favourite test accounts file. little coordination beginning can keep Git history clean, allowing everyone able access least one admin level player account.","code":""},{"path":"guiding.html","id":"inspirations","chapter":"20 Testing Stendhal","heading":"20.3 Getting Inspiration for Writing your Own Test Cases","text":"people find writing test cases bugs large unfamiliar code bases challenging. normal expected. Writing test code quite different style coding accustomed , working blind, since don’t much existing experience working particular code. idea first team coursework exercise get experience writing fairly simple tests. difficult first, remember hand give help whenever need . Don’t sit stewing silence don’t know . Just ask!major source inspiration test cases existing test suite. good starting point writing test case look code base test cases similar one want write.cases, may find test cases already exist piece functionality working , just need add additional cases cover specific functionality affected bug solving. easiest case. test work , can look similar tests ideas. example, need write test checks properties object, can look tests Item class get ideas . , writing test quest, can look tests similar quests, get idea tests structured, testing utility code Stendhal team provided help get started quickly.Sometimes might need put ideas together two different places write test need. example, dealing issue describes error pets affected stings poisonous creatures, might look tests deal poisoning player characters, tests deal health pets. Putting ideas two tests together helps write new test need. can also look production code ideas working functionality well covered tests.Existing test cases also give lots useful tips locate new test code, whether existing test class whether need create brand new test class issue.feel embarrassed copying pasting existing test code modifying fit issue. normal survival technique software engineers wild. make sure though understand code copied, least high level. Don’t leave bits code sure . just lead brittle slow tests.course, since coursework exercise, feel embarrassed copying pasting solutions written members teams issues. plagiarism. Just use version Stendhal code base, work team members, build tests .Document version: 04 July, 2022","code":""},{"path":"committing.html","id":"committing","chapter":"21 Integrating commits","heading":"21 Integrating commits","text":"Integrating Commits Team’s Commits","code":""},{"path":"committing.html","id":"commintro","chapter":"21 Integrating commits","heading":"21.1 Introduction","text":"team study activity, Syncing Team Repository, practised synchronise local repository team’s someone team pushed work remote since last synchronised. follow self-study document, ’ll cover procedure recommend follow work local master branch need integrate work team remote. covers complex cases team study activity. ones common working collaborative coding project using Git.Note document explanation various Git concepts, using running example based example used chapter 15 Syncing Team Repository. won’t able follow along exact steps project, ’ll able use concepts ideas describe work afterwards.","code":""},{"path":"committing.html","id":"rejected","chapter":"21 Integrating commits","heading":"21.2 Git has Rejected my Push","text":"Suppose team mate made commits local master branches, starting commit project. worked feature branch, merged development branch (using fast-forward merge) local history looks like figure 21.1.\nFigure 21.1: local history\nteam mate made single commit directly onto development branch pushed work team repository, remote commit graph looks like figure 21.2.\nFigure 21.2: remote commit graph\npush work, Git rejects attempt, shown figure 21.3.\nFigure 21.3: Can see git rejected push?\nCan see ?push development branch remote, Git try work combine two graphs. commit graphs common starting commit (96e7b2f), appear combined graph, two lines commits extending —line leading local master branch line leading team mate’s master branch, position last pushed team’s remote repository.Combining commit graphs easy Git can us automatically. problem comes Git tries work position master branch combined commit graph. Git needs reconcile current position master (commit 012f3c3f) new position suggesting (commit 48b498b). tries using fast-forward merge, isn’t possible reject attempt. case, path combined graph linking two master branch positions involve going backwards time. Therefore, fast-forward merge possible, Git rejects push.Git rejects push, means need synchronise state local repository team repository. can push (hopefully successful—provided work pushed repository meantime)., synchronisation follows two steps:Fetch new commits remote repository.Integrate existing commits new commits.","code":""},{"path":"committing.html","id":"fetchingr","chapter":"21 Integrating commits","heading":"21.2.1 Fetching the New Commits from the Remote","text":"step straightforward. Just right click project name Package Explorer view, select Team > Fetch origin. local commit graph now looks like figure 21.4\nFigure 21.4: local commit graph\ncan see fast-forward merge remote tracking branch master local master branch possible.next step integrate work pulled team remote , result can pushed remote visible team members.Git provides two mechanisms integrating separate lines development work: merge rebase. useful, different strengths weaknesses. Different workflows recommend used different ways. example, GitFlow mandates use non-fast-forward merges, even situations fast-forward merges allowed, Cactus Flow requires use rebase code integration events. workflows mix merge rebase, simple Feature Branches workflow ask use course unit.situation looking now, synchronising work work team, recommend use rebase rather merge. remainder document, ’ll look strategies, explain make recommendation.","code":""},{"path":"committing.html","id":"integrating-the-new-commits-using-merge","chapter":"21 Integrating commits","heading":"21.3 Integrating the New Commits using Merge","text":"Git merge operation takes two branches, one pointing line development needs extended new changes (target branch), pointing line development containing new changes need integrated (source branch). three possible options merge:changes already target branch (source target point commit, source branch points commit ancestor commits target branch). case, merge succeeds without Git anything.changes line development target branch, ahead . target branch just needs moved forward along line commits, reach point source branch. fast-forward merge case.cases, need create new merge commit, two parent commits, source branch target branch. target branch moved forward points new merge commit, includes commits source branch well commits pointed . non-fast-forward merge case.Looking example combined graph Fetch operation, can see 3rd cases applies.make merge commit, first make sure checked branch want integrate new commit . case, local master branch. can see History view contents already checked .Right click commit pointed branch want integrate : case, commit pointed branch origin/master. Select Merge.succeeds, produces summary shown figure 21.5\nFigure 21.5: Merge result dialog box indicating success\ntells us merge fast-forward merge, checked branch (HEAD) moved forward point new merge commit, reminds us commits merged operation. History view shown figure 21.6 us new local commit graph operation completed:\nFigure 21.6: History view shows us new local commit graph\ncan clearly see new merge commit, two parent links. code base represents contains changes made us (fix healing spell bug) changes made pushed team mate (addition admin player admins.txt file.Notice checked branch (master) changed position result operation. feature branch remote tracking branch master remain made merge.compare new local commit graph graph remote (still start scenario) shown figure 21.7, ’ll see Git can now perform fast-forward merge new commits local master branch master branch remote.\nFigure 21.7: New local commit graph graph remote, still start scenario\nnow, can push work, push succeed.remote repository now contains commits, integrated team mates’ commits, master.\nFigure 21.8: remote repository now contains commits\n(Note didn’t push feature branch, visible GitLab ((gitlab.cs.man.ac.uk)[https://gitlab.cs.man.ac.uk/], even though commits made now present team remote. Git keeps clear distinction commits branches. push branch, also push commits pointing , don’t automatically push branches tags pointing commits.)local repository, Git updated position remote tracking branch, origin/master, reflect change position branch remote.\nFigure 21.9: Git updated position remote tracking branch\nMerge Git great tool want integrate feature branches development branch, hotfix branches release branch, situation line development reached stable state needs integrated next line development pipeline leading released code., great tool use synchronising work team’s. creates unnecessary merge commits branching structures code history don’t reflect key points code integration, simply reflect decided synchronise code time. isn’t information need keep future readers code base. complicates code history, making look less linear clean . anything makes code base harder read added cost avoid can.Using second technique code integration, Git rebase, avoids problematic cluttering code history. requires little effort developer’s part, soon becomes second nature. ’ll now explain carry synchronisation task just discussed, using rebase instead merge.Git Pull Command\nmay wondering far mentioned Git pull command, commonly talked way quickly sync remote repository.\nGit pull (vanilla form) just syntactic sugar execution two Git commands: git fetch followed git merge. ’s handy shortcut whenever want use merge approach synchronising code, also therefore shares limitations using merge synchronisation. Whenever execute git pull may creating new merge commit code history.possible configure pull command work differently (using rebase instead merge, example). course unit, especially students new collaborative coding using Git, recommend avoid use pull command, instead carry two steps separately . require many mouse clicks, allows see happening stage, adjust next steps accordingly. also means gain much solid understanding Git actually , rather just issuing pull command hoping best.","code":""},{"path":"committing.html","id":"rebase","chapter":"21 Integrating commits","heading":"21.4 Integrating the New Commits using Rebase","text":"Let’s go back time, point started integrate commits fetched remote. (Luckily, using Git, tool going back time easily.) local commit graph looks like figure 21.10\nFigure 21.10: local commit graph\nteam remote looks like figure 21.11.\nFigure 21.11: team remote graph\ntime, ’re going use rebase perform synchronisation. rebase branch onto branch B, asking Git replay commits unique branch top branch B, though made changes B checked formerly branch checked .example, let’s look simple commit made Stendhal development team prepare one 2019 releases shown figure 21.12\nFigure 21.12: simple commit made Stendhal development team\nshows change introduced commit. red coloured lines (starting -) lines deleted, green coloured lines (starting +) lines added commit. Git stores 3 lines change three lines change, allow work change applied. (Line numbers also shown, can’t relied upon entirely - lines added removed part file , line numbers completely inaccurate.)Although change made specific version code, change can made version includes file, version contains lines modified commit preceding following lines identify . words, commit can taken replayed part commit graph. Provided affected parts files , commit makes just much sense replayed originally applied. rebasing.can use notion integrate work, work team.\nshow use rebase case merged feature branch, ’ll first illustrate idea simpler scenarios.","code":""},{"path":"committing.html","id":"rebasingc","chapter":"21 Integrating commits","heading":"21.4.1 Rebasing Commits Made on the Master Branch","text":"Imagine made commits directly master branch need synchronise commit master made team mate pushed team remote. local commit graph looks like figure 21.13.\nFigure 21.13: local commit graph\ncan create linear code history suitable fast-forward merging rebasing two commits top commit team mate. , make sure local master branch checked . right click commit want rebase onto (commit 012f3c3) select Rebase HEAD menu appears.produces commit graph shown figure 21.14\nFigure 21.14: commit graph, note changes carefully\nLook carefully happened . almost looks though two commits master moved across origin/master branch. fact, brand new commits; see different SHA identifiers. change made code , commit message author details. committer details changed show different committed date. committer potentially changed, person rebase wasn’t person making commits first place.local master branch now moved point latest new (rebased) commits. old commits still present repository, since now reachable branch tag, Git show .Since master now ahead position remote repository, ’ll able push team repository. origin/master branch moved forward tip master result push. local branch location remote tracking branch, know repositories sync (least far branches go).","code":""},{"path":"committing.html","id":"featureb","chapter":"21 Integrating commits","heading":"21.4.2 Rebasing to Sync Repositories When Working on a Feature Branch","text":"Let’s now consider scenario working feature branch. created feature branch initial commit, made couple commits yet finished working . start working day, want synchonise repository team’s, don’t diverge far away work rest team . ’ve fetched commits remote, local graph looks like figure 21.15.\nFigure 21.15: local graph ’ve fetched commits remote\n’d started work feature branch team mate pushed commit remote, ’d able synchronise easily. feature branch begun commit 012f3c3, local master branch . ’d able push code remote straightaway, integration fast forward merges.can use rebase get code base state.First, synchronise position local master branch origin/master branch. , check master right click commit origin/master pointing (commit 012f3c3) select Rebase HEAD . result looks like figure 21.16.\nFigure 21.16: updated commit graph\nNotice appeared performed fast-forward merge master origin/master? difference commit graphs result fast-forward merge rebase, case.Next, need replay feature branch commits top master. Check feature branch, right click commit two master branches located select Rebase HEAD. commit graph now look like figure 21.17:\nFigure 21.17: New commit graph\ncan seen, now synchronised (tidy!) commit history. local master branch location remote tracking branch (now) feature branch based latest version code. can now push either master feature branch successfully, can continue work feature branch knowing building recent version code.Rebase Local History, Shared Public HistoryRebase little riskier using merge. Merge leaves whole history intact, adding merge commit , risk losing commits. rebase rewrites history code changes, potentially quite radical ways. Information, cases even commits, can lost.problem rewrite code history local repository, ’s vitally important don’t attempt change history team’s remote. confusing disruptive everyone team, runs significant risk losing commits—commits, commits colleagues. pleased…\nusing rebase ’s important keep mind commits local commit graph also exist team’s remote commits just local code history. Commits former category rebased. Commits latter category can .","code":""},{"path":"committing.html","id":"rebaseffm","chapter":"21 Integrating commits","heading":"21.4.3 Rebasing to Sync Repositories After a Fast-Forward Merge","text":"can now finally return scenario started document . reminder, local repository, just merged feature branch local master branch, discovered new commits appeared remote master synchronised attempting push:\nFigure 21.18: reminder commit graph\nscenario gives example rebase requires little extra thought using . need first decide want code history look like, can use rebase make happen.case, need decide want history merged feature branch look like. remembered fetch sync starting work feature branch, ended fast-forward merge branch master, parent origin/master. , let’s make history look like ’s happened.achieve history, first reset local master branch point origin/master—commit , remembered sync creating feature branch. Check master, right click origin/master commit select Reset > Hard.\nFigure 21.19: local commit graph reset\nrebase feature branch top master. first check feature branch, right click master branch commit, select Rebase HEAD . results graph shown figure 21.20\nFigure 21.20: Resulting commit graph feature branch rebasing\nNow reorganised history point ready merge feature branch development branch. feature branch integration step, strictly speaking use Git merge. since fast forward merge, difference terms commit graph outcome using merge rebase case.\nFigure 21.21: Reorganised history\nrepository now ready push. Since master ahead origin/master line development, Git problem making fast-forward merge needed allow accept push shown figure 21.22\nFigure 21.22: local commit graph push\ncode history GitLab looks pleasantly clear linear figure 21.23.\nFigure 21.23: code history GitLab pleasantly clear linear\nForce Push\nrebase changes code history, easy get situation local history differs remote history ways mean Git refuses push work. can stressful (especially close looming deadline) need resist temptation use force push. almost always leads loss colleague’s commits can disruptive team.\nInstead, need get repository state can pushed, without requiring --force flag. long stick rule changing commits also exist team remote, well. Though always worth leaving enough time deadline get help team mates course team things go wrong.","code":""},{"path":"committing.html","id":"rFinalWord","chapter":"21 Integrating commits","heading":"21.5 A Final Word","text":"document, took several different approaches synchronising local repository team remote, team mates made changes. course unit, ask use:Git Merge integrating finished feature branches development branch, andGit Rebase synchronising repository team remote.allows practice styles code integration single project, also keep fairly simple well-used workflow (based feature branches).means workflow use, certainly don’t claim best circumstances. approach allows gain core Git skills enable use workflow may called comply future projects.One major omission document discussion happens encounter conflicts integrating code synchronising repository. ’ve chosen issues exercise 1 try avoid conflicts, definitely encounter second team coursework exercise, start work larger features sub-teams. ’ll cover handling conflicts another learning resource unit.Good luck!Document version: 04 July, 2022","code":""},{"path":"integrating.html","id":"integrating","chapter":"22 Continuous integration","heading":"22 Continuous integration","text":"Continuous integration (CI) practice automating integration code changes multiple contributors single software project.","code":""},{"path":"integrating.html","id":"ici","chapter":"22 Continuous integration","heading":"22.1 Introduction to Continuous Integration","text":"COMP23311 far, begun use number modern software development tools help us keep code quality high, even multiple developers working code base. ’re now going introduce another class tool: continuous integration server.name indicates, tools job continually putting software system processes lead releasable software. typical continuous integration server :Integrate various components system.Compile code create executable version system.Run unit tests, integration tests acceptance tests.Generate reports quality system (example, test coverage reports).Inform development team part process fails.steps undertaken regular intervals, usually based automated trigger. Developers need remember request happens; CI server takes care us.aim repeatedly going process discover problems early, well release deadline, plenty time correct .tools came common use, developers concentrated parts system, building testing isolation, release deadline approached. whole system compiled integrated, tests run full code base. Inevitably, tests fail , worst cases, code fail even compile. deadline looming, panicked team find fix problems pressure, often leading bugs introduced poor decisions taken avoided team thought integrate, build test code went along instead last minute.lot said building testing code frequently. go process just small changes made code base, ’s fairly safe bet cause failing tests one changes ’ve just made. Even changes cause error, something done caused error become visible. cases, ’ll need examine changes able track root cause error. problem can fixed fairly quickly, code changes area code start happen developers made use buggy code.Contrast fix multiple interacting bugs time, deadline looming, code gets messier messier get frustrated tired., building testing whole system frequently, beginning project, good idea. problem programmers (human) don’t remember . build test local version system easily enough: IDE continually check compile errors, type, fairly easy get habit building running unit tests locally code. many us willing break chain thought piece code order integrate work developers wait lengthy acceptance test suites run? Instead, CI server takes task us, interrupting us something gone wrong.Continuous integration servers typically run separate shared machines set build test code frequently like. can set timed schedule (e.g., build every morning developers come start work) can ask build test process carried every time someone team pushes changes shared repository. latter option good can manage , pushed code breaks aspect build test pipeline, ’ll get almost immediate warning continuous integration server. ’ll receive e-mail server, else server might set push notification team’s chat channel Slack Discord MS-Teams, communication system.CI server us COMP23311. One best practices try follow course unit maintaining clean releases. (obviously don’t want deploy code customer known faults.) CI server helps telling problems code push GitLab within minutes appearing . means can fix problems still feature branches, can make sure clean code makes development branch (importantly) release tags.course unit, use Jenkins (jenkins.io), well-established CI server. set number build jobs , show health team’s submission coursework exercises far. brief guide show use Jenkins access information build health team, interpret reports provides.","code":""},{"path":"integrating.html","id":"logging","chapter":"22 Continuous integration","heading":"22.2 Logging onto Jenkins CI Server:","text":"can login Departments Jenkins continuous integration (CI) server ci.cs.manchester.ac.uk/jenkins. take login screen. Enter University username password form press Sign .now taken main Jenkins “dashboard”, showing folder created contain build jobs COMP23311 team coursework semester, look something like figure 22.1\nFigure 22.1: main Jenkins dashboard\nvarious features note screen. left menu basic commands, information builds Jenkins currently running. set Jenkins server can run number builds parallel (exactly many varies year year, resources available). build jobs requested time, jobs show Build Queue, waiting build executor become available. able see build information team’s jobs, often Jenkins occupied building jobs teams, busy times (example, days coursework deadline) team’s build jobs may stuck queue anything minutes several hours.right dashboard, can see list top-level jobs folders access . moment, thing can see folder work COMP23311. grey folder icon indicates folder build job. Next , can see icon indicating “weather” set builds. , shows status builds within folder recent builds. stormy weather icon indicates builds folder failing, time. contrast, sun icon indicate builds folder succeeding. Figure 22.2 shows build health icons, meanings.\nFigure 22.2: range icons indicate health build. left right: rain icon used indicate 20% 39% builds successful. cloud icon: 40% 59%. overcast icon: 60% 79% builds successful. sun icon indicates greater 80% builds successful.\ncan get information health item hovering weather icon Jenkins shown figure 22.3.\nFigure 22.3: Hovering icon display tool tip gives information icon means terms build.\ncan see, tool tip gives information build health, also indicates worst performing build within folder. really useful diagnosing problems, finding branches need extra attention.Team 47 doesn’t great build health moment, still time improve build “weather” coursework deadline. Take look weather status team’s build folder. complete coursework builds move red green, build health icon become sunnier.","code":""},{"path":"integrating.html","id":"cbuilds","chapter":"22 Continuous integration","heading":"22.3 Accessing your Coursework Builds","text":"Next, ’re going look builds set exercise 1 coursework.Click link team’s COMP23311 folder. show list builds folders created team course unit shown figure 22.4.\nFigure 22.4: example teams coursework builds look Jenkins\nstage course unit, builds exercise 1 set . Later, folders jobs appear , coursework progresses.year, see additional project team’s folder. job creates stores reports work created RoboTA automated feedback marking system. see team coursework far, click job selected Team Marks Feedback report.’ll now take builds set team team coursework exercise 1. Click Exercise 1 Builds folder link. take Web page showing following builds figure 22.5\nFigure 22.5: example contents Exercise 1 Builds folder displayed Jenkins.\npage, can see summaries actual builds, instead just folders. set Jenkins projects build important code versions coursework: development branch (master) release tag (VERSION_01_RELEASE_27_UOM) team screenshot—team use different release tag).team also additional build, shown screen shot, tag called COMP23311_EX1_STARTING_POINT. shows build health start coursework.Instead folder icon, build jobs coloured icons indicating whether recent build successful . red exclamation mark beside release branch project shows latest build tag unsuccessful. error occurred build process meant executable code produced. caused compilation error code, also mean tag branch built doesn’t yet exist team’s GitLab repository. Builds kind called failed builds.yellow icon beside development branch build figure shows build process succeeded unit tests failed. build like , executable code created run, later check failed, called unstable build.total, four build status icons might see Jenkins, shown figure 22.6. goal builds get green build icon beside . indicates successful build: compilation errors, Ant build file executed successfully unit tests passed. kind build called stable build.final type build icon grey, simply indicates either builds yet attempted particular job last build aborted complete. one team pushed code repository since Jenkins builds created, exercise 1 builds grey. change soon code changes pushed.\nFigure 22.6: Four build status icons might see. left right: 1. Grey entry sign (built) build yet attempted build aborted. 2. Red exclamation mark (Failed build) build process completed. 3. Amber exclamation mark (Unstable) build succeeded tests failed. 4. Green tick (Stable build) build process succeeded tests passed.\nright build job names, Jenkins gives information previous builds. tells us long ago recent successful build (either stable unstable) long ago recent failed build . also gives link information build. , five builds carried development branch, link recent successful build build #5, recent unsuccessful build build #2.Jenkins also gives duration last build. important real systems, builds taking long indicate problem system. addition, length typical build affects long programmers need wait get feedback pushes. Experience shown programmers wait minutes information status build, wait much longer 10 minutes, change focus another task, lose context needed efficiently fix problems may revealed build. important build times kept control.Manually Requesting BuildThe buttons final column allow manually request build job scheduled (opposed waiting someone pushes new code GitLab repository). Try pressing button next build jobs now. see text Build Scheduled appear button, (shortly) job appear one Build Executors (queue, request build busy period).build completes, summary builds job updated. may need refresh browser window see new information.","code":""},{"path":"integrating.html","id":"drilling","chapter":"22 Continuous integration","heading":"22.4 Drilling Down on the Development Branch Build","text":"Next, ’re going drill information Jenkins provides individual build jobs. ’ll look development branch build first, come back look contents Feature Branch Builds folder later.Click build job link master branch. taken page looks similar figure 22.7.\nFigure 22.7: Jenkins view master branch\nFigure 22.7 main page build job set development branch team’s repository. gives summary recent build status job, also information build history. Let’s take look information options provided .top, purple Jenkins banner, can see breadcrumbs showing parent folders particular job. names clickable links.Just , left, menu showing things can build job. buttons links information build, commands can issue. Note, example, presence Build Now option, gives another way manually request build job scheduled.bottom left, see table showing build history job. row summarises past build attempt. status build shown (coloured ball icon), followed link detailed build report date time build took place. Finally, non-stable builds end light bulb icon, indicating cause build failure analysed, information added build report. Hovering mouse light bulb give indication went wrong.remainder page information status recent build, including links various reports produced build. first link workspace (.e., filespace) used recent build, second information code changes triggered build.section headed Identified Problems (light bulb icon 💡) see description caused build fail become unstable. case, code able compile successfully. problem test cases failed.Next comes link build report (indicated grey clipboard icon). case, report produced JUnit build last run. summary tells us many tests failed build (importantly) gives information change test failures occurred recent build. case, summary 5 Failures / +5 indicates five tests failing total, five failures appeared recent build (build added five failures). useful information test failures appeared build likely caused changes pushed GitLab repository triggered build. Test failures first appeared older builds caused anything just done code.can click Latest test result link information tests failed .Two build reports shown page: two graphs right hand side page. one top shows test results trend course recent builds. blue line shows number tests pass, yellow line shows number tests skipped (using @Ignore annotation) red line (important one) shows many tests failing. can just see slight increase number failing tests latest build (plus corresponding decrease number passing tests).graph shows code coverage trend, produced JaCoCo coverage reports recent builds. Coverage team fairly stable, slight drop coverage recent build, caused failing tests. (normal coverage drop little tests fail, since test assertions executed therefore lines covered. significant decrease, however, indicate tests bulky, separated larger number smaller, independent unit tests.)can click build reports get detailed information results recent build. can also click individual builds Build History, see copies reports created time build. can even see copy console output produced build run.","code":""},{"path":"integrating.html","id":"happens","chapter":"22 Continuous integration","heading":"22.5 What Happens When Jenkins Builds a Job","text":"well information fingertips, useful understand comes . , now going look happens Jenkins performs build job.","code":""},{"path":"integrating.html","id":"triggers","chapter":"22 Continuous integration","heading":"22.5.1 What Triggers the Build?","text":"first question answer causes Jenkins start perform build job. already seen can manually schedule build, using Build Now command button. relies us, developers, remembering request build done. saw beginning exercise, whole point continuous integration servers don’t remember request build. done automatically, whether remember .Jenkins builds can triggered automatically number ways. example, can put schedule place causes job built every hour, every 6 hours, every 15 minutes, best suits needs time.probably popular way triggering build set web hook causes Jenkins build job whenever someone pushes new code (changed code) team repository. set team repository. Whenever push code changes repository, GitLab sends notification Jenkins change. Jenkins uses information trigger jobs use repository changed.Keep eye next time anyone team pushes code changes team repository. soon push made, take look Jenkins dashboard wait see build triggered.Triggering Builds Without Code ChangeJenkins can set trigger kinds GitLab actions, including commenting issue creating tag. However, Jenkins detects one triggering events happened, first thing check something changed code base. changes code, different build outcome, Jenkins saves time ignoring triggering event.sensible behaviour time, sometimes bit nuisance. example, build job set tag, might expect Jenkins notice tag created rebuild job. Jenkins can indeed notice tag appearing, since change involves new commits, trigger rebuild. cases, necessary request build manually.’ll encounter issue builds release tags. ’ve prepared team’s release, ’ll add required release tag commit. Jenkins won’t build release tag project stage. ’ll need manually request build check whether release build good health.","code":""},{"path":"integrating.html","id":"workspace","chapter":"22 Continuous integration","heading":"22.5.2 The Jenkins Workspace","text":"job triggered (code changes occurred), Jenkins uses GitLab plugin connect team’s repository create clone whole repository workspace set aside job.checks branch specified focus build.point, Jenkins created directory folder internal space, copy team’s code base mirrors one machine. (obviously doesn’t files changes yet pushed team’s repository.)","code":""},{"path":"integrating.html","id":"antbuild","chapter":"22 Continuous integration","heading":"22.5.3 Jenkins Runs the Ant Build","text":"copy code workspace, Jenkins attempts build executable . exactly way practised workshops: calls Ant invokes dist target build.xml file within workspace.done within shell. Jenkins records outputs running build script shell, stores build, later diagnostic purposes.also set Jenkins jobs run unit tests. build complete, Jenkins invoke test Ant target, order cause unit tests run, coverage information gathered — exactly way things happen run Ant script within IDE.Digression (Examinable)one difference way Jenkins runs unit tests. machine Jenkins running headless server. graphics console attached . sits machine room, rather someone’s desk operated remotely terminal rather graphical interface mouse trackpad. means test cases exercise GUI Stendhal game system fail, graphical display configured machine. get round running Xvfb, X Virtual Framebuffer, running unit tests. creates virtual graphical display — just enough one — allow unit tests exercise GUI elements function normal desktop machine.","code":""},{"path":"integrating.html","id":"results","chapter":"22 Continuous integration","heading":"22.5.4 The Results are Published","text":"final step Jenkins build process publish reports created build process can accessed build web pages. happens JUnit test results JaCoCo coverage results. configured builds publishing steps , graphs web page test results appear build web page.","code":""},{"path":"integrating.html","id":"fbuilds","chapter":"22 Continuous integration","heading":"22.6 A Look at Feature Branch Builds","text":"almost concludes tour around Jenkins builds created use work exercise 1. ’ll finish look contents Feature Branch Builds Issue Revealing Builds folders.browser, click breadcrumb Exercise 1 Builds. click link Feature Branch Builds folder.taken web page containing something like figure 22.8.\nFigure 22.8: Jenkins view feature branch builds\ncan probably work now, folder contains whole collection different builds. Team 47 working different set issues team, therefore working different branch names ones team’s builds. overall organisation similar team. one build job set feature branches asked create. feature branch builds stable compile (since deadline need contain code fixes bug) pass tests.can drill builds get information build, information caused failed unstable builds.second set builds Issue Revealing Builds folder. navigate folder, see set builds looking something figure 22.9.\nFigure 22.9: Issue Revealing Builds folder Jenkins\nbuilds little unusual. job run tests code base consisting production code start exercise (.e., code contain fixes) test code feature branch tip (.e., code contains tests wrote reveal issue). means expect builds unstable. want see tests failing, can see issue properly exposed . fully sure revealed issue correctly, ’ll need drill build take look tests failing. Ideally, just tests written reveal issue. test cases failing well (, worse, instead ) new test cases, final mark reduced.Builds kind normally created real software team. provided help track progress towards goals coursework, help us marking tests fairly accurately.Note builds two folders either stable unstable deadline. one case failed (red) build acceptable released repository: fewer people team number bugs assigned. team expected fix one issue per person. example, 5 person team expected fix 5 issues provided. case, builds issue left unfixed can fail without marks penalty (since fail required branch tag present team’s repository).","code":""},{"path":"integrating.html","id":"confused","chapter":"22 Continuous integration","heading":"22.7 Confused? Stuck? Need Help?","text":"aspect Jenkins builds created unclear, please come get help TA member staff team study sessions. meet workshop attendance requirements, also free e-mail Suzanne questions outside team study sessions.School’s CI server administered Chris Page. Technical faults outages reported support.cs.manchester.ac.uk.Bugs feature requests RoboTA system reported project issue tracker gitlab.cs.man.ac.uk/institute--coding/robota-issue-trackerDocument version: 04 July, 2022","code":""},{"path":"reviewing.html","id":"reviewing","chapter":"23 Code review","heading":"23 Code review","text":"addition time spent debugging code (see chapter 3), software engineers spend lots time reviewing people’s code. crucial part building better quality software, see figure 23.1. Code review crucial skill learn, reviewer reviewee. chapter introduces key concepts code review can use course.\nFigure 23.1: code look like song lyrics written using stuff comes question mark URL? Reviewing people’s code can hard work probably hard people review code. However, code review fundamental building quality software. Code Quality (xkcd.com/1833) Randall Munroe licensed CC -NC 2.5\n","code":""},{"path":"reviewing.html","id":"why","chapter":"23 Code review","heading":"23.1 Why Review Code?","text":"Code review process program code written one person (group people) inspected another person (group people), find errors infelicities. one primary tools used today manage quality organisation’s code base. Code review comes lots different flavours (list main ones later document) core idea, common , basic one: easier spot problems code written someone else code.easy see might case. just written code, idea code fresh minds. hard see discrepancies mental model code code written actually . read code written someone else, many preconditions assumptions get way understanding written, opposed intended.applies general code quality issues well bugs. code reviewer can spot failed follow naming layout standards use within code, used comments way follow conventions rest code base. hard keep track things, especially new team, well making code . code review can point problems leave feature branch, good quality code reaches development branch.saw earlier course unit major advantages finding bugs earlier introduced rather later, costs rising especially dramatically bugs make code used customer11. automated testing (unit testing, etc.) can go long way towards finding defects reach customer, complete solution problem. Testing can find defects thought check . testing help us weed poor quality code makes future bugs harder find fix.turns code review excellent complement testing. Studies shown code review can find 60% defects (McConnell 2014), unit testing finding 25%. two techniques work well partnership: automated testing relatively cheap run, can run repeatedly without needing (much) human intervention. Code review expensive, requires human effort time performed, can find wider range defects. good workflow therefore make sure bugs detected code review converted test cases, can detected cheaply future versions code, valuable code review effort can put towards finding new defects currently covered code base. course, maximum efficiency, requires code review ever performed code already passes test suite.Code review advantages well, helping homogenise improve coding styles across teams, spread knowledge code base evenly throughout team. code reviewed least one person, days parts code untouchable anyone except lone expert created gone team’s truck factor increased12. human nature code carefully correctly know one colleagues looking code push team repository.important aware costs code review, well, however. Code review takes time. Typical code review rates 100 200 lines code per hour, experienced professionals (Kemerer Paulk 2009; Bisant Lyle 1989). New team members slower . typical team, one can expect spend 1 5 hours per week reviewing code (, perhaps, release deadline approaches). Time spent reviewing time spent coding, can sometimes hard justify spending time deadlines looming. , exactly team pressure code reviews needed. errors slip stage come back expensive form, customer feels bite.","code":""},{"path":"reviewing.html","id":"crtypes","chapter":"23 Code review","heading":"23.2 Types of Code Review","text":"many proposals different ways code reviews, ranging simple informal heavyweight expensive monitoring programmes. , mention key types, give feel different ways code review implemented practice.","code":""},{"path":"reviewing.html","id":"buddy","chapter":"23 Code review","heading":"23.2.1 Buddy Review","text":"Starting small simple, several informal kinds code review. normally come heading “buddy review”. name suggests, kind review done informally, coders less equal status within team, -needed basis. simple asking someone else team look particularly tricky piece code commit (“shoulder” review). , teams, developers assigned “buddy” talk code , ready pushed.teams use agile practice pair programming, code review happening time, pair takes turns act “driver” “navigator” roles. navigator looks code written driver, performing essentially code review function, continuous basis short feedback time.","code":""},{"path":"reviewing.html","id":"goteam","chapter":"23 Code review","heading":"23.2.2 Team-Based Review","text":"Many teams formal structures reviewing code, ensure quality managed evenly across team, regardless individual team members’ preferences code review.rise source code repositories like GitHub GitLab, coding workflows developed around give perfect framework insert code review normal day--day work team. example, many teams require code feature branch reviewed another team member can merged development branch. can even enforced use tools Gerrit, allows code held “staging area” code review, blocks integration code main development branch authorised user agreed meets team’s quality standards.However, forms team-based code review possible, use many years. One common team-based review technique “walkthrough”. involves meeting affected team members (typically 2) one team member gives verbal presentation artefact, taking rest team way works intended achieve. Walkthroughs can take place early development, sanity check planned design, example, later release cycle, check correctness implementation key algorithm section code, working together line--line.","code":""},{"path":"reviewing.html","id":"formal","chapter":"23 Code review","heading":"23.2.3 Formal Review","text":"formal type code review involves work team inspected external team. kind review usually performed large organisations tightly-defined processes managing software quality across organisation. sometimes go name “inspections”, “formal technical reviews” “formal management reviews”. formal technical review involve work team assessed external team technical experts. Formal management review, hand, assessment quality team’s processes, normally involve work team inspected senior (possibly non-technical) staff within organisation.reviews often linked long term future team project. Continued funding may dependent successfully passing series formal review processes.Unsurprisingly, formal type code review also expensive, extensive documentation presentations prepared advance, well hotel meeting rooms needing booked participants, sometimes 2 3 days.Now teams taking responsibility code reviews, using informal techniques, large scale formal reviews less common. (always doubts cost-effectiveness, effects staff stressful reviews often seen counter-productive long term.) funding reviews presentations senior management customers still normal part life software engineer, code quality typically managed informal, team-based routes modern organisations.","code":""},{"path":"reviewing.html","id":"goodpractice","chapter":"23 Code review","heading":"23.3 Good Practice for Code Reviewers","text":"code review effective means discovering removing defects software, important everyone involved (reviewers reviewees) see process positive one, rather chore endured. important criticisms worded constructively, questions blame regarded less importance finding fixing errors. Code reviewers seen allies common enemy (bugs reach customer), time people enjoy flaws publicly pointed .therefore important code reviewers adopt neutral tone, balance negative points positive comments aspects code done well. particularly important performing code review new team. Later, trust mutual respect built , code reviews can less carefully worded. early days, important think comments can worded, ensure received positive way. regardless diplomacy reviewer carries work, reviewee, code reviews powerful mechanism learning challenged, cope constructive criticism defend ideas feel reviewer overlooked something importance.learning effect code reviews can helped making reviews accessible whole team (GitLab repository). way, code reviewer held accountable reviews, just coder held accountable code.Another technique can help practice “promiscuous reviewing”, team members review work team members, time, rather sticking rigid unchanging buddy review pairings. avoids risk “revenge reviews”, helps foster “---together” team mentality. person reviewing code conscious , far future, roles reversed. can help keep review process constructive considerate.performing code review, following aspects code can commented :Possible defects: example, pointing --one error loop, improper handling negative numbers.Possible flaws testing: example, missing case covered tests, pointing two tests seem testing thing (.e., redundant tests).Design issues: example, pointing class split two classes, recommending method moved different class.Naming issues: example, noting class name drifting line changing function class, legacy variable names need updated follow team’s current practice.Coding style issues: example, pointing inconsistent code layout, naming constants inconsistent constants elsewhere code.Presence code test smells: example, methods long, test methods containing two separate tests bundled together.Use Git: example, noting commit message insufficiently clear commits squashed together make meaningful representation change made.Comments Build: example, noting platforms bug-fix suitable , pointing change require changes build process configuration elements.Effect Team Metrics: example, noting code coverage negatively positively affected change, additional technical debt change incurs.Examples good practice: example, elegant solution found problem, code clear readable without requiring comments.can see list code review can address just defects errors, covering also code quality, enforcement conventions, performance issues code readability aspects. Code reviewers try comment matters preference. example, team agreed convention white space code, reviewers criticise team members using spaces preference using tabs, provided look code options. line preference best practice always clearly defined, degree trial error order. find continually pointing someone placing curly brackets differently rest team, person continually ignores advice, probably time move find bigger fish fry.give indication kinds conversation can productively take place using code review, links show examples commit comments.github.com/nodejs/node/pull/9440/filesgithub.com/nodejs/node/commit/2e568d95bdd689494b163f1cfe8bbc38f32e45ed#commitcomment-19306986These examples taken NodeJS project github.com/nodejs/node.","code":""},{"path":"reviewing.html","id":"gitlabrev","chapter":"23 Code review","heading":"23.4 Code Review Facilities in GitLab","text":"GitLab, like GitHub, provides facilities commenting merge/pull requests, individual commits.examining merge request, GitLab allows comments placed code changes included proposed merge. merge request assigned person review code. examining changes, reviewer can decide accept merge request, request changes. changes made, developer can request second round review. way, code reviewer acts gate keeper, preventing poor quality code reaching development branch.\nFigure 23.2: Sample conversation nodejs\n, comments can added directly individual commits. Comments commit whole can added dialogue box end commit. , comments can added specific lines. , hover mouse line commit wish add comment. small speech bubble appear left hand side line. Click bring comment box, shown figure 23.3 similar shown NodeJS examples given previous section.\nFigure 23.3: Sample conversation nodejs\n","code":""},{"path":"reviewing.html","id":"crcourse","chapter":"23 Code review","heading":"23.5 Code Review in COMP23311","text":"exercises 2 3 COMP23311 team coursework, asked practice informal team-based code review system. ensure code every feature add Stendhal code base, change, reviewed separate team member. includes test code production code changes.use GitLab’s comment facility review team’s work. feature short enough review one go, produced plenty time, can add code review merge request feature branch.attempting larger feature, smaller feature taking long time implement, may want give interim code reviews, partial versions feature test code. , can use GitLab’s comment facility individual commits. means can review commits pushed team’s repository, even branch merged main development branch yet. case, check coder whether happy commits reviewed, can quite annoying told problems aware , middle fixing.organise team complete reviews provided :code changes made new features reviewed.contributing team members carry least one code review.Code review widely used software development industry today. can expect subjected code reviews soon start write code becomes visible team’s repository. Many companies also expect software engineers, matter junior, review code others. well helping keep quality team’s code base high, code review also great way learn conventions standards used team. Look code reviews provided colleagues learn considered good bad practice, get feel degree style review comments team members expect.COMP23311, ask carry basic buddy reviewing. coursework, can practice commenting others code, responding comments . useful interviewing material, also prepare join software team using modern software quality management techniques.can also ask industry mentor code reviewing practices used organisation, help work team.Good luck!Document version: 04 July, 2022","code":""},{"path":"automating.html","id":"automating","chapter":"24 Unit testing","heading":"24 Unit testing","text":"“Never field software development much owed many lines code”— Martin Fowler JUnit.org","code":""},{"path":"automating.html","id":"jintro","chapter":"24 Unit testing","heading":"24.1 Introduction","text":"COMP23311, going make use industry strength toolkit software engineering. document introduces part toolkit ’ll making use right beginning course unit: JUnit. JUnit testing harness Java allows us write concise readable automated tests Java code. also provides facilities executing tests reporting results.took COMP16412 (Programming 2) last year encountered JUnit learning code Java. course unit, JUnit test suites provided use, much said interpret write . others, JUnit completely new.Either way, end COMP23311, written JUnit tests—possible quite lot —experienced benefits coding support large (ish) automated test suite. ’ll spending quite lot workshops coursework talking developing ideas. now, short document introduces basic concepts need get started.","code":""},{"path":"automating.html","id":"automated-test","chapter":"24 Unit testing","heading":"24.2 What is Automated Testing and Why Do We Need It?","text":"Testing piece software process running determine closely actual behaviour matches requirements set . means deciding selection input values code run , working advance running (sometimes even writing) code expected output input code behaving wish . run code selected inputs, check actual output produced code, compare expected output. actual output matches expected output, say test passes. differs way, say test fails13.failing test evidence software building correctly implement behaviour require . tells us coding work done, gives us information work .contrast, can’t learn much fact individual test passes, since bugs may still exist parts code covered test. comprehensive test suite, covering key cases, can start confidence might implemented correctly tests suite pass.basic approach testing software manual testing. manual testing, person operates software, entering selected input values painstakingly observed results software outputs, check whether expected . early days software engineering, testing done like . Humans flexible creative, also slow unreliable. thorough manual testing requires lot effort boring repetitive. easy human tester miss key cases, mistype selected input misread output.Computers, hand, excellent repeating action , can quickly perfect reliability. theory, much better systematic testing humans, fact turns largely (though completely) case. Software testers started write scripts automate process running software selected inputs, human tester eyeball output see whether matched expected. scripts save lot time, help manual testers consistent thorough test cases check. , fully automated tests, since check whether actual output matches expected output. human testers still work .turns computers can part testing process us , can much faster precisely manual testers hope . fully automating testing, get test suite takes little bit effort set first place, can run many times , cheaply. simple idea revolutionised way develop software course last two decades.Let’s look one way automated test suite can save us time coding. Suppose comprehensive, semi-automated test suite code write, perhaps form collection scripts. Running scripts checking results takes good 15 minutes concentrated effort, normally run couple times day, sometimes running suite end day coding. One afternoon, run tests, notice tests used pass now fail. Something added code day broken functionality thought working.called “regression”, since behaviour software system “regressed” requirements previously met. cause regression, (ideally) fixed try add functionality fix bugs. Often, regressions caused changes made recently, starting point look 50 new lines added day 100 lines code changed find source regression, fix . might also need look lines code lines changed added interact . going take time!Imagine instead fully automated test suite takes just seconds run, works tests failed us. Instead running suite just twice day, run test suite making every small code change. Now, notice newly failing test, look last 5 6 lines code changed since last ran tests (related lines code) find source problem. reduces scope debugging task, makes bugs much cheaper simpler find. also find bugs earlier, easier correct attention already focused area code hidden . never end situation large body code several (many!) bugs mixed together, requiring marathon debugging session goodness-knows--long fix.cost savings frequent use comprehensive automated test suite can significant—much many organisations now make use continuous integration test systems, automatically build test new piece code checked version control system, reporting back developers problems discovered. ’ll get chance work system later course unit.","code":""},{"path":"automating.html","id":"simpleg","chapter":"24 Unit testing","heading":"24.3 Automated Testing in JUnit: a Simple Example","text":"commonly used testing harness Java code JUnit main testing tool learn use course unit. principle behind JUnit simple: automated test case JUnit merely Java method (test method) invokes another Java method (code test) selected inputs, compares output expected result. actual output matches expected, test passed JUnit exits quietly. discrepancy, JUnit reports test failed, gives programmer information differences output observed.’ll introduce ideas looking use JUnit test simple Java method. code listing , ’ll find code JUnit tests method calculates largest square less equal parameter. ’ll go test class line line.import statements pull JUnit classes static methods need, ’ll see definition class called LargestSquareTest public class LargestSquareTest. JUnit classes ordinary Java classes, defined usual way. JUnit class going contain tests solution class called LargestSquare, call LargestSquareTest. fact, class legal name. , , ’re following common convention JUnit test classes named class test, word Test stuck end. useful , reader code, can see instantly classes test classes , also class tested test class.Inside class, four method definitions. methods describes separate test case class test. ordinary Java instance methods, kind met , exception fact annotated @Test. encountered annotations COMP16121/212, simple understand. allow us annotate code information useful compiler language processors, ignored ordinary execution. case, purpose annotations purely tell JUnit test runner methods defined class executed test cases, .couple JUnit annotations ’ll encounter later course. now, important thing note must put @Test annotation start every test case method write. don’t, test case described un-annotated method won’t get executed run test suite.Now let’s look test methods . Every JUnit test method public (allow JUnit runner call ) void return type. JUnit test methods must input parameters. can called legal Java method name, (just JUnit class names) usual follow naming conventions. people (historical reasons) begin every test method word “test”. prefer follow convention beginning test names word “”, making name describe behaviour test testing. idea names tests, viewed isolation (possible IDEs) read like specification code test.might bit surprised long method names . may even wondering long method names can possibly best practice. ’s true names long cumbersome ordinary code. writing ordinary code . JUnit methods called JUnit runner, uses reflection identify methods tagged @Test annotation, run . human ever write code calls JUnit methods. human ever type long names . , role play one documentation; method names tell us intent test case . usually means writing quite long method name, also useful, forces us think test going write , get nitty gritty coding .Next, ’ll look happening inside test case methods . Let’s focus example assertThat(LargestSquare.lessThanOrEq(0), (0)). , calling code test (static method LargestSquare class called lessThanOrEq() specific input value (case, 0). , using method provided test harness assertThat() state expect result , method called specified input value. case, expect output 0.assertThat() matcher method provided part Hamcrest matching library. comes several forms (quite complicated), need understand moment takes value given first parameter, matches expression second. values match, assertion exits quietly. mismatch assertion flags failing test, along information exact form mismatch detected. assertions test class code listing use pre-provided matcher (value), checks whether provided value equal value . , assertThat() statement code listing checks LargestSquare.lessThanOrEq(0) returns value equal 0, lets programmer know doesn’t.Notice whole test case reads quite like English sentence describing want code behave. want “assert largest square less equal 0 0”. Well-written test cases property. (far practicable) read like natural, readable statements behaviour trying implement.lot learn JUnit simple tests described far. , brief introduction enough help get started working tests workshops coursework next weeks.Document version: 04 July, 2022","code":"import static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.core.Is.is;\n\nimport org.junit.Test;\n\npublic class LargestSquareTest {\n\n    @Test\n    public void shouldReturn0AsLargestSquareLessThanOrEqualTo0() {\n        assertThat(LargestSquare.lessThanOrEq(0), is(0));\n    }\n\n    @Test\n    public void shouldReturn1AsLargestSquareLessThanOrEqualTo1() {\n        assertThat(LargestSquare.lessThanOrEq(1), is(1));\n    }\n\n    @Test\n    public void shouldReturn1AsLargestSquareLessThanOrEqualTo3() {\n        assertThat(LargestSquare.lessThanOrEq(3), is(1));\n    }\n\n    @Test\n    public void shouldReturn4AsLargestSquareLessThanOrEqualTo4() {\n        assertThat(LargestSquare.lessThanOrEq(4), is(4));\n    }\n}"},{"path":"reading.html","id":"reading","chapter":"25 References","heading":"25 References","text":"well recommended reading section 0.3, section lists everything ’ve cited. Links librarysearch.manchester.ac.uk take electronic copies (login required) University Manchester, pages take seconds render appear (eventually).","code":""}]
